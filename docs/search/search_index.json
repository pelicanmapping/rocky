{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rocky Documentation","text":"<p>Welcome to the Rocky documentation site.</p> <p>This site is generated with MkDocs. API references are produced using <code>clang-doc</code> and are available under API Reference.</p>"},{"location":"api/","title":"C/C++ Reference","text":"<ul> <li>Namespace: GlobalNamespace</li> <li>Namespace: jobs</li> <li>Namespace: nlohmann</li> <li>Namespace: rocky</li> <li>Namespace: ROCKY_NAMESPACE</li> <li>Namespace: std</li> <li>Namespace: vsg</li> <li>Namespace: weemesh</li> </ul>"},{"location":"api/all_files/","title":"All Files","text":""},{"location":"api/all_files/#globalnamespace","title":"GlobalNamespace","text":""},{"location":"api/all_files/#jobs","title":"jobs","text":""},{"location":"api/all_files/#nlohmann","title":"nlohmann","text":""},{"location":"api/all_files/#rocky","title":"rocky","text":""},{"location":"api/all_files/#rocky_namespace","title":"ROCKY_NAMESPACE","text":""},{"location":"api/all_files/#std","title":"std","text":""},{"location":"api/all_files/#vsg","title":"vsg","text":""},{"location":"api/all_files/#weemesh","title":"weemesh","text":""},{"location":"api/GlobalNamespace/","title":"Global Namespace","text":""},{"location":"api/GlobalNamespace/#namespaces","title":"Namespaces","text":"<ul> <li>ROCKY_NAMESPACE</li> <li>std</li> <li>rocky</li> <li>nlohmann</li> <li>vsg</li> <li>weemesh</li> <li>jobs</li> </ul>"},{"location":"api/GlobalNamespace/#records","title":"Records","text":"<ul> <li>TiXmlDocument</li> <li>TiXmlElement</li> <li>TiXmlComment</li> <li>TiXmlUnknown</li> <li>TiXmlAttribute</li> <li>TiXmlText</li> <li>TiXmlDeclaration</li> <li>TiXmlParsingData</li> <li>TiXmlCursor</li> <li>TiXmlVisitor</li> <li>TiXmlBase</li> <li>TiXmlNode</li> <li>TiXmlAttributeSet</li> <li>TiXmlHandle</li> <li>TiXmlPrinter</li> <li>RTFileStream</li> <li>RTree</li> </ul>"},{"location":"api/GlobalNamespace/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/#operator","title":"operator&gt;&gt;","text":"<p>int &amp; operator&gt;&gt;(int &amp; in, TiXmlNode &amp; base)</p> <p>An input stream operator, for every class. Tolerant of newlines and            formatting, but doesn't expect them.</p>"},{"location":"api/GlobalNamespace/#operator_1","title":"operator&lt;&lt;","text":"<p>int &amp; operator&lt;&lt;(int &amp; out, const TiXmlNode &amp; base)</p> <p>An output stream operator, for every class. Note that this outputs         without any newlines or formatting, as opposed to Print(), which            includes tabs and new lines.</p> <pre><code>        The operator&lt;&lt; and operator&gt;&gt; are not completely symmetric. Writing         a node to a stream is very well defined. You'll get a nice stream           of output, without any extra whitespace or newlines.\n\n        But reading is not as well defined. (As it always is.) If you create            a TiXmlElement (for example) and read that from an input stream,            the text needs to define an element or junk will result. This is            true of all input streams, but it's worth keeping in mind.\n\n        A TiXmlDocument will read nodes until it reads a root element, and          all the children of that root element.\n</code></pre> <p>Appends the XML node or attribute to a std::string.</p>"},{"location":"api/GlobalNamespace/#iterator_base","title":"iterator_base","text":"<p>int iterator_base(T &amp; geom, _Bool trav_holes)</p> <p>Defined at src/rocky/Feature.h#339</p> <p>template inlines</p>"},{"location":"api/GlobalNamespace/#enums","title":"Enums","text":"<p>| enum TiXmlEncoding |</p> <p>--</p> <p>| TIXML_ENCODING_UNKNOWN | | TIXML_ENCODING_UTF8 | | TIXML_ENCODING_LEGACY |</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#164</p> <p>Used by the parsing routines.</p>"},{"location":"api/GlobalNamespace/RTFileStream/","title":"class RTFileStream","text":"<p>Defined at src/rocky/rtree.h#393</p> <p>Because there is not stream support, this is a quick and dirty file I/O helper. Users will likely replace its usage with a Stream implementation from their favorite API.</p> <p>Fwd decl</p>"},{"location":"api/GlobalNamespace/RTFileStream/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/RTFileStream/#rtfilestream","title":"RTFileStream","text":"<p>public void RTFileStream()</p> <p>Defined at src/rocky/rtree.h#400</p>"},{"location":"api/GlobalNamespace/RTFileStream/#rtfilestream_1","title":"~RTFileStream","text":"<p>public void ~RTFileStream()</p> <p>Defined at src/rocky/rtree.h#405</p>"},{"location":"api/GlobalNamespace/RTFileStream/#open","title":"Open","text":"<p>public _Bool Open(const char * a_fileName, const char * mode)</p> <p>Defined at src/rocky/rtree.h#410</p>"},{"location":"api/GlobalNamespace/RTFileStream/#openread","title":"OpenRead","text":"<p>public _Bool OpenRead(const char * a_fileName)</p> <p>Defined at src/rocky/rtree.h#420</p>"},{"location":"api/GlobalNamespace/RTFileStream/#openwrite","title":"OpenWrite","text":"<p>public _Bool OpenWrite(const char * a_fileName)</p> <p>Defined at src/rocky/rtree.h#425</p>"},{"location":"api/GlobalNamespace/RTFileStream/#close","title":"Close","text":"<p>public void Close()</p> <p>Defined at src/rocky/rtree.h#430</p>"},{"location":"api/GlobalNamespace/RTFileStream/#write","title":"Write","text":"<p>public size_t Write(const TYPE &amp; a_value)</p> <p>Defined at src/rocky/rtree.h#440</p>"},{"location":"api/GlobalNamespace/RTFileStream/#writearray","title":"WriteArray","text":"<p>public size_t WriteArray(const TYPE * a_array, int a_count)</p> <p>Defined at src/rocky/rtree.h#447</p>"},{"location":"api/GlobalNamespace/RTFileStream/#read","title":"Read","text":"<p>public size_t Read(TYPE &amp; a_value)</p> <p>Defined at src/rocky/rtree.h#454</p>"},{"location":"api/GlobalNamespace/RTFileStream/#readarray","title":"ReadArray","text":"<p>public size_t ReadArray(TYPE * a_array, int a_count)</p> <p>Defined at src/rocky/rtree.h#461</p>"},{"location":"api/GlobalNamespace/RTree/","title":"class RTree","text":"<p>Defined at src/rocky/rtree.h#61</p> <p>RTree</p> <p>Implementation of RTree, a multidimensional bounding rectangle tree. Example usage: For a 3-dimensional tree use RTree myTree; <p>This modified, templated C++ version by Greg Douglas at Auran (http://www.auran.com)</p> <p>DATATYPE Referenced data, should be int, void, obj etc. no larger than sizeof and simple type ELEMTYPE Type of element such as int or float NUMDIMS Number of dimensions such as 2 or 3 ELEMTYPEREAL Type of element that allows fractional and large values such as float or double, for use in volume calcs <p>NOTES: Inserting and removing data requires the knowledge of its constant Minimal Bounding Rectangle.        This version uses new/delete for nodes, I recommend using a fixed size allocator for efficiency.        Instead of using a callback function for returned results, I recommend and efficient pre-sized, grow-only memory        array similar to MFC CArray or STL Vector for returning search query result.</p>"},{"location":"api/GlobalNamespace/RTree/#members","title":"Members","text":"<p>protected Node * m_root</p> <p>protected ELEMTYPEREAL m_unitSphereVolume</p>"},{"location":"api/GlobalNamespace/RTree/#records","title":"Records","text":"<p>Node</p> <p>Iterator</p> <p>Rect</p> <p>Branch</p> <p>ListNode</p> <p>PartitionVars</p>"},{"location":"api/GlobalNamespace/RTree/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/RTree/#rtree","title":"RTree <p>public void RTree() <p>Defined at src/rocky/rtree.h#469</p>","text":""},{"location":"api/GlobalNamespace/RTree/#rtree_1","title":"RTree <p>public void RTree(const RTree &amp; other) <p>Defined at src/rocky/rtree.h#492</p>","text":""},{"location":"api/GlobalNamespace/RTree/#rtree_2","title":"~RTree <p>public void ~RTree() <p>Defined at src/rocky/rtree.h#499</p>","text":""},{"location":"api/GlobalNamespace/RTree/#insert","title":"Insert <p>public void Insert(const ELEMTYPE[NUMDIMS] a_min, const ELEMTYPE[NUMDIMS] a_max, const DATATYPE &amp; a_dataId)</p> <p>Defined at src/rocky/rtree.h#506</p> <p>Insert entry</p> <p>a_min Min of bounding rect</p> <p>a_max Max of bounding rect</p> <p>a_dataId Positive Id of data.  Maybe zero, but negative numbers not allowed.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#remove","title":"Remove <p>public void Remove(const ELEMTYPE[NUMDIMS] a_min, const ELEMTYPE[NUMDIMS] a_max, const DATATYPE &amp; a_dataId)</p> <p>Defined at src/rocky/rtree.h#530</p> <p>Remove entry</p> <p>a_min Min of bounding rect</p> <p>a_max Max of bounding rect</p> <p>a_dataId Positive Id of data.  Maybe zero, but negative numbers not allowed.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#search","title":"Search <p>public int Search(const ELEMTYPE[NUMDIMS] a_min, const ELEMTYPE[NUMDIMS] a_max, CALLBACK_TYPE &amp;&amp; callback)</p> <p>Defined at src/rocky/rtree.h#552</p>","text":""},{"location":"api/GlobalNamespace/RTree/#intersects","title":"Intersects <p>public _Bool Intersects(const ELEMTYPE[NUMDIMS] a_min, const ELEMTYPE[NUMDIMS] a_max)</p> <p>Defined at src/rocky/rtree.h#579</p> <p>True if the input intersects any data in the tree</p>","text":""},{"location":"api/GlobalNamespace/RTree/#removeall","title":"RemoveAll <p>public void RemoveAll()</p> <p>Defined at src/rocky/rtree.h#842</p> <p>Remove all entries from tree</p>","text":""},{"location":"api/GlobalNamespace/RTree/#count","title":"Count <p>public int Count()</p> <p>Defined at src/rocky/rtree.h#585</p> <p>Count the data elements in this container.  This is slow as no internal counter is maintained.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#load","title":"Load <p>public _Bool Load(const char * a_fileName)</p> <p>Defined at src/rocky/rtree.h#613</p> <p>Load tree contents from file</p>","text":""},{"location":"api/GlobalNamespace/RTree/#load_1","title":"Load <p>public _Bool Load(RTFileStream &amp; a_stream)</p> <p>Defined at src/rocky/rtree.h#633</p> <p>Load tree contents from stream</p>","text":""},{"location":"api/GlobalNamespace/RTree/#save","title":"Save <p>public _Bool Save(const char * a_fileName)</p> <p>Defined at src/rocky/rtree.h#763</p> <p>Save tree contents to file</p>","text":""},{"location":"api/GlobalNamespace/RTree/#save_1","title":"Save <p>public _Bool Save(RTFileStream &amp; a_stream)</p> <p>Defined at src/rocky/rtree.h#780</p> <p>Save tree contents to stream</p>","text":""},{"location":"api/GlobalNamespace/RTree/#getfirst","title":"GetFirst <p>public void GetFirst(Iterator &amp; a_it)</p> <p>Defined at src/rocky/rtree.h#259</p> <p>Get 'first' for iteration</p>","text":""},{"location":"api/GlobalNamespace/RTree/#getnext","title":"GetNext <p>public void GetNext(Iterator &amp; a_it)</p> <p>Defined at src/rocky/rtree.h#282</p> <p>Get Next for iteration</p>","text":""},{"location":"api/GlobalNamespace/RTree/#isnull","title":"IsNull <p>public _Bool IsNull(Iterator &amp; a_it)</p> <p>Defined at src/rocky/rtree.h#285</p> <p>Is iterator NULL, or at end?</p>","text":""},{"location":"api/GlobalNamespace/RTree/#getat","title":"GetAt <p>public DATATYPE &amp; GetAt(Iterator &amp; a_it)</p> <p>Defined at src/rocky/rtree.h#288</p> <p>Get object at iterator position</p>","text":""},{"location":"api/GlobalNamespace/RTree/#allocnode","title":"AllocNode <p>protected Node * AllocNode()</p> <p>Defined at src/rocky/rtree.h#883</p>","text":""},{"location":"api/GlobalNamespace/RTree/#freenode","title":"FreeNode <p>protected void FreeNode(Node * a_node)</p> <p>Defined at src/rocky/rtree.h#897</p>","text":""},{"location":"api/GlobalNamespace/RTree/#initnode","title":"InitNode <p>protected void InitNode(Node * a_node)</p> <p>Defined at src/rocky/rtree.h#934</p>","text":""},{"location":"api/GlobalNamespace/RTree/#initrect","title":"InitRect <p>protected void InitRect(Rect * a_rect)</p> <p>Defined at src/rocky/rtree.h#942</p>","text":""},{"location":"api/GlobalNamespace/RTree/#insertrectrec","title":"InsertRectRec <p>protected _Bool InsertRectRec(const Branch &amp; a_branch, Node * a_node, Node ** a_newNode, int a_level)</p> <p>Defined at src/rocky/rtree.h#960</p> <p>Inserts a new data rectangle into the index structure. Recursively descends tree, propagates splits back up. Returns 0 if node was not split.  Old node updated. If node was split, returns 1 and sets the pointer pointed to by new_node to point to the new node.  Old node updated to become one of two. The level argument specifies the number of steps up from the leaf level to insert; e.g. a data rectangle goes in at level = 0.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#insertrect","title":"InsertRect <p>protected _Bool InsertRect(const Branch &amp; a_branch, Node ** a_root, int a_level)</p> <p>Defined at src/rocky/rtree.h#1021</p> <p>Insert a data rectangle into an index structure. InsertRect provides for splitting the root; returns 1 if root was split, 0 if it was not. The level argument specifies the number of steps up from the leaf level to insert; e.g. a data rectangle goes in at level = 0. InsertRect2 does the recursion.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#nodecover","title":"NodeCover <p>protected Rect NodeCover(Node * a_node)</p> <p>Defined at src/rocky/rtree.h#1064</p> <p>Find the smallest rectangle that includes all rectangles in branches of a node.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#addbranch","title":"AddBranch <p>protected _Bool AddBranch(const Branch * a_branch, Node * a_node, Node ** a_newNode)</p> <p>Defined at src/rocky/rtree.h#1083</p> <p>Add a branch to a node.  Split the node if necessary. Returns 0 if node not split.  Old node updated. Returns 1 if node split, sets *new_node to address of new node. Old node updated, becomes one of two.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#disconnectbranch","title":"DisconnectBranch <p>protected void DisconnectBranch(Node * a_node, int a_index)</p> <p>Defined at src/rocky/rtree.h#1108</p> <p>Disconnect a dependent node. Caller must return (or stop using iteration index) after this as count has changed</p>","text":""},{"location":"api/GlobalNamespace/RTree/#pickbranch","title":"PickBranch <p>protected int PickBranch(const Rect * a_rect, Node * a_node)</p> <p>Defined at src/rocky/rtree.h#1126</p> <p>Pick a branch.  Pick the one that will need the smallest increase in area to accomodate the new rectangle.  This will result in the least total area for the covering rectangles in the current node. In case of a tie, pick the one which was smaller before, to get the best resolution when searching.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#combinerect","title":"CombineRect <p>protected Rect CombineRect(const Rect * a_rectA, const Rect * a_rectB)</p> <p>Defined at src/rocky/rtree.h#1164</p> <p>Combine two rectangles into larger one containing both</p>","text":""},{"location":"api/GlobalNamespace/RTree/#splitnode","title":"SplitNode <p>protected void SplitNode(Node * a_node, const Branch * a_branch, Node ** a_newNode)</p> <p>Defined at src/rocky/rtree.h#1186</p> <p>Split a node. Divides the nodes branches and the extra one between two nodes. Old node is one of the new ones, and one really new one is created. Tries more than one method for choosing a partition, uses best result.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#rectsphericalvolume","title":"RectSphericalVolume <p>protected ELEMTYPEREAL RectSphericalVolume(Rect * a_rect)</p> <p>Defined at src/rocky/rtree.h#1234</p> <p>The exact volume of the bounding sphere for the given Rect</p>","text":""},{"location":"api/GlobalNamespace/RTree/#rectvolume","title":"RectVolume <p>protected ELEMTYPEREAL RectVolume(Rect * a_rect)</p> <p>Defined at src/rocky/rtree.h#1215</p> <p>Calculate the n-dimensional volume of a rectangle</p>","text":""},{"location":"api/GlobalNamespace/RTree/#calcrectvolume","title":"CalcRectVolume <p>protected ELEMTYPEREAL CalcRectVolume(Rect * a_rect)</p> <p>Defined at src/rocky/rtree.h#1267</p> <p>Use one of the methods to calculate retangle volume</p>","text":""},{"location":"api/GlobalNamespace/RTree/#getbranches","title":"GetBranches <p>protected void GetBranches(Node * a_node, const Branch * a_branch, PartitionVars * a_parVars)</p> <p>Defined at src/rocky/rtree.h#1279</p> <p>Load branch buffer with branches from full node plus the extra branch.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#choosepartition","title":"ChoosePartition <p>protected void ChoosePartition(PartitionVars * a_parVars, int a_minFill)</p> <p>Defined at src/rocky/rtree.h#1316</p> <p>Method #0 for choosing a partition: As the seeds for the two groups, pick the two rects that would waste the most area if covered by a single rectangle, i.e. evidently the worst pair to have in the same group. Of the remaining, one at a time is chosen to be put in one of the two groups. The one chosen is the one with the greatest difference in area expansion depending on which group - the rect most strongly attracted to one group and repelled from the other. If one group gets too full (more would force other group to violate min fill requirement) then other group gets the rest. These last are the ones that can go in either group most easily.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#loadnodes","title":"LoadNodes <p>protected void LoadNodes(Node * a_nodeA, Node * a_nodeB, PartitionVars * a_parVars)</p> <p>Defined at src/rocky/rtree.h#1395</p> <p>Copy branches from the buffer into two nodes according to the partition.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#initparvars","title":"InitParVars <p>protected void InitParVars(PartitionVars * a_parVars, int a_maxRects, int a_minFill)</p> <p>Defined at src/rocky/rtree.h#1417</p> <p>Initialize a PartitionVars structure.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#pickseeds","title":"PickSeeds <p>protected void PickSeeds(PartitionVars * a_parVars)</p> <p>Defined at src/rocky/rtree.h#1433</p>","text":""},{"location":"api/GlobalNamespace/RTree/#classify","title":"Classify <p>protected void Classify(int a_index, int a_group, PartitionVars * a_parVars)</p> <p>Defined at src/rocky/rtree.h#1467</p> <p>Put a branch in one of the groups.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#removerect","title":"RemoveRect <p>protected _Bool RemoveRect(Rect * a_rect, const DATATYPE &amp; a_id, Node ** a_root)</p> <p>Defined at src/rocky/rtree.h#1496</p> <p>Delete a data rectangle from an index structure. Pass in a pointer to a Rect, the tid of the record, ptr to ptr to root node. Returns 1 if record not found, 0 if success. RemoveRect provides for eliminating the root.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#removerectrec","title":"RemoveRectRec <p>protected _Bool RemoveRectRec(Rect * a_rect, const DATATYPE &amp; a_id, Node * a_node, ListNode ** a_listNode)</p> <p>Defined at src/rocky/rtree.h#1550</p> <p>Delete a rectangle from non-root part of an index structure. Called by RemoveRect.  Descends tree recursively, merges branches on the way back up. Returns 1 if record not found, 0 if success.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#alloclistnode","title":"AllocListNode <p>protected ListNode * AllocListNode()</p> <p>Defined at src/rocky/rtree.h#912</p> <p>Allocate space for a node in the list used in DeletRect to store Nodes that are too empty.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#freelistnode","title":"FreeListNode <p>protected void FreeListNode(ListNode * a_listNode)</p> <p>Defined at src/rocky/rtree.h#923</p>","text":""},{"location":"api/GlobalNamespace/RTree/#overlap","title":"Overlap <p>protected _Bool Overlap(Rect * a_rectA, Rect * a_rectB)</p> <p>Defined at src/rocky/rtree.h#1597</p> <p>Decide whether two rectangles overlap.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#reinsert","title":"ReInsert <p>protected void ReInsert(Node * a_node, ListNode ** a_listNode)</p> <p>Defined at src/rocky/rtree.h#1616</p> <p>Add a node to the reinsertion list.  All its branches will later be reinserted into the index structure.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#search_1","title":"Search <p>protected _Bool Search(Node * a_node, Rect * a_rect, int &amp; a_foundCount, CALLBACK_TYPE &amp;&amp; callback)</p> <p>Defined at src/rocky/rtree.h#1629</p> <p>Search in an index tree or subtree for all data retangles that overlap the argument rectangle.</p>","text":""},{"location":"api/GlobalNamespace/RTree/#removeallrec","title":"RemoveAllRec <p>protected void RemoveAllRec(Node * a_node)</p> <p>Defined at src/rocky/rtree.h#866</p>","text":""},{"location":"api/GlobalNamespace/RTree/#reset","title":"Reset <p>protected void Reset()</p> <p>Defined at src/rocky/rtree.h#853</p>","text":""},{"location":"api/GlobalNamespace/RTree/#countrec","title":"CountRec <p>protected void CountRec(Node * a_node, int &amp; a_count)</p> <p>Defined at src/rocky/rtree.h#596</p>","text":""},{"location":"api/GlobalNamespace/RTree/#saverec","title":"SaveRec <p>protected _Bool SaveRec(Node * a_node, RTFileStream &amp; a_stream)</p> <p>Defined at src/rocky/rtree.h#807</p>","text":""},{"location":"api/GlobalNamespace/RTree/#loadrec","title":"LoadRec <p>protected _Bool LoadRec(Node * a_node, RTFileStream &amp; a_stream)</p> <p>Defined at src/rocky/rtree.h#681</p>","text":""},{"location":"api/GlobalNamespace/RTree/#copyrec","title":"CopyRec <p>protected void CopyRec(Node * current, Node * other)</p> <p>Defined at src/rocky/rtree.h#717</p>","text":""},{"location":"api/GlobalNamespace/RTree/#listtree","title":"ListTree <p>public int ListTree()</p> <p>Defined at src/rocky/rtree.h#1674</p> <p>return all the AABBs that form the RTree</p>","text":""},{"location":"api/GlobalNamespace/RTree/#enums","title":"Enums","text":"<p>| enum  |</p> <p>--</p> <p>| MAXNODES | | MINNODES |</p> <p>Defined at src/rocky/rtree.h#73</p> <p>These constant must be declared after Branch and before Node struct Stuck up here for MSVC 6 compiler.  NSVC .NET 2003 is much happier.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/","title":"class TiXmlAttribute","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#780</p> <p>An attribute is a name-value pair. Elements have an arbitrary  number of attributes, each with a unique name.</p> <p>note The attributes are not TiXmlNodes, since they are not        part of the tinyXML document object model. There are other          suggested ways to look at this problem.</p> <p>Inherits from TiXmlBase</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlAttribute/#tixmlattribute","title":"TiXmlAttribute","text":"<p>public void TiXmlAttribute()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#786</p> <p>Construct an empty attribute.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#tixmlattribute_1","title":"TiXmlAttribute","text":"<p>public void TiXmlAttribute(const int &amp; _name, const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#794</p> <p>std::string constructor.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#tixmlattribute_2","title":"TiXmlAttribute","text":"<p>public void TiXmlAttribute(const char * _name, const char * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#804</p> <p>Construct an attribute with a name and value.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#name","title":"Name","text":"<p>public const char * Name()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#812</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#value","title":"Value","text":"<p>public const char * Value()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#813</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#valuestr","title":"ValueStr","text":"<p>public const int &amp; ValueStr()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#815</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#intvalue","title":"IntValue","text":"<p>public int IntValue()</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#doublevalue","title":"DoubleValue","text":"<p>public double DoubleValue()</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#nametstr","title":"NameTStr","text":"<p>public const int &amp; NameTStr()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#821</p> <p>Get the tinyxml string representation</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#queryintvalue","title":"QueryIntValue","text":"<p>public int QueryIntValue(int * _value)</p> <p>QueryIntValue examines the value string. It is an alternative to the       IntValue() method with richer error checking.       If the value is an integer, it is stored in 'value' and         the call returns TIXML_SUCCESS. If it is not        an integer, it returns TIXML_WRONG_TYPE.</p> <pre><code>    A specialized but useful call. Note that for success it returns 0,      which is the opposite of almost all other TinyXml calls.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#querydoublevalue","title":"QueryDoubleValue","text":"<p>public int QueryDoubleValue(double * _value)</p> <p>QueryDoubleValue examines the value string. See QueryIntValue().</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#setname","title":"SetName","text":"<p>public void SetName(const char * _name)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#836</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#setvalue","title":"SetValue","text":"<p>public void SetValue(const char * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#837</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#setintvalue","title":"SetIntValue","text":"<p>public void SetIntValue(int _value)</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#setdoublevalue","title":"SetDoubleValue","text":"<p>public void SetDoubleValue(double _value)</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#setname_1","title":"SetName","text":"<p>public void SetName(const int &amp; _name)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#844</p> <p>STL std::string form.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#setvalue_1","title":"SetValue","text":"<p>public void SetValue(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#846</p> <p>STL std::string form.  </p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#next","title":"Next","text":"<p>public const TiXmlAttribute * Next()</p> <p>Get the next sibling attribute in the DOM. Returns null at end.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#next_1","title":"Next","text":"<p>public TiXmlAttribute * Next()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#851</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#previous","title":"Previous","text":"<p>public const TiXmlAttribute * Previous()</p> <p>Get the previous sibling attribute in the DOM. Returns null at beginning.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#previous_1","title":"Previous","text":"<p>public TiXmlAttribute * Previous()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#857</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#operator","title":"operator==","text":"<p>public _Bool operator==(const TiXmlAttribute &amp; rhs)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#861</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#operator_1","title":"operator&lt;","text":"<p>public _Bool operator&lt;(const TiXmlAttribute &amp; rhs)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#862</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#operator_2","title":"operator&gt;","text":"<p>public _Bool operator&gt;(const TiXmlAttribute &amp; rhs)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#863</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p> <pre><code>Attribute parsing starts: first letter of the name                       returns: the next char after the value end quote\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#print","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#871</p> <p>Prints this Attribute to a FILE stream.</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#print_1","title":"Print","text":"<p>public void Print(FILE * cfile, int depth, int * str)</p>"},{"location":"api/GlobalNamespace/TiXmlAttribute/#setdocument","title":"SetDocument","text":"<p>public void SetDocument(TiXmlDocument * doc)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#878</p> <p>[internal use] Set the document pointer so the attribute can report errors.</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/","title":"class TiXmlAttributeSet","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#904</p> <pre><code>A class used to manage a group of attributes.   It is only used internally, both by the ELEMENT and the DECLARATION.\n\nThe set can be changed transparent to the Element and Declaration   classes that use it, but NOT transparent to the Attribute   which has to implement a next() and previous() method. Which makes  it a bit problematic and prevents the use of STL.\n\nThis version is implemented with circular lists because:        - I like circular lists     - it demonstrates some independence from the (typical) doubly linked list.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#tixmlattributeset","title":"TiXmlAttributeSet","text":"<p>public void TiXmlAttributeSet()</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#tixmlattributeset_1","title":"~TiXmlAttributeSet","text":"<p>public void ~TiXmlAttributeSet()</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#add","title":"Add","text":"<p>public void Add(TiXmlAttribute * attribute)</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#remove","title":"Remove","text":"<p>public void Remove(TiXmlAttribute * attribute)</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#first","title":"First","text":"<p>public const TiXmlAttribute * First()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#913</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#first_1","title":"First","text":"<p>public TiXmlAttribute * First()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#914</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#last","title":"Last","text":"<p>public const TiXmlAttribute * Last()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#915</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#last_1","title":"Last","text":"<p>public TiXmlAttribute * Last()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#916</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#find","title":"Find","text":"<p>public TiXmlAttribute * Find(const char * _name)</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#findorcreate","title":"FindOrCreate","text":"<p>public TiXmlAttribute * FindOrCreate(const char * _name)</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#find_1","title":"Find","text":"<p>public TiXmlAttribute * Find(const int &amp; _name)</p>"},{"location":"api/GlobalNamespace/TiXmlAttributeSet/#findorcreate_1","title":"FindOrCreate","text":"<p>public TiXmlAttribute * FindOrCreate(const int &amp; _name)</p>"},{"location":"api/GlobalNamespace/TiXmlBase/","title":"class TiXmlBase","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#195</p> <p>TiXmlBase is a base class for every class in TinyXml.  It does little except to establish that TinyXml classes can be printed and provide some utility functions.</p> <pre><code>In XML, the document and elements can contain   other elements and other types of nodes.\n\n\n\nA Document can contain: Element (container or leaf)\n\n                        Comment (leaf)\n\n                        Unknown (leaf)\n\n                        Declaration( leaf )\n\n\n\nAn Element can contain: Element (container or leaf)\n\n                        Text    (leaf)\n\n                        Attributes (not on tree)\n\n                        Comment (leaf)\n\n                        Unknown (leaf)\n\n\n\nA Decleration contains: Attributes (not on tree)\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlBase/#members","title":"Members","text":"<p>protected TiXmlCursor location</p> <p>protected void * userData</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlBase/#tixmlbase","title":"TiXmlBase","text":"<p>public void TiXmlBase()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#202</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#tixmlbase_1","title":"~TiXmlBase","text":"<p>public void ~TiXmlBase()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#203</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#print","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <pre><code>All TinyXml classes can print themselves to a filestream        or the string class (TiXmlString in non-STL mode, std::string       in STL mode.) Either or both cfile and str can be null.\n\n    This is a formatted print, and will insert      tabs and newlines.\n\n    (For an unformatted stream, use the &lt;&lt; operator.)\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlBase/#setcondensewhitespace","title":"SetCondenseWhiteSpace","text":"<p>public void SetCondenseWhiteSpace(_Bool condense)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#222</p> <pre><code>The world does not agree on whether white space should be kept or       not. In order to make everyone happy, these global, static functions        are provided to set whether or not TinyXml will condense all white space        into a single space or not. The default is to condense. Note changing this      value is not thread safe.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlBase/#iswhitespacecondensed","title":"IsWhiteSpaceCondensed","text":"<p>public _Bool IsWhiteSpaceCondensed()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#225</p> <p>Return the current white space setting.</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#row","title":"Row","text":"<p>public int Row()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#245</p> <p>Return the position, in the original source file, of this node or attribute.       The row and column are 1-based. (That is the first row and first column is      1,1). If the returns values are 0 or less, then the parser does not have        a row and column value.</p> <pre><code>    Generally, the row and column value will be set when the TiXmlDocument::Load(),     TiXmlDocument::LoadFile(), or any TiXmlNode::Parse() is called. It will NOT be set      when the DOM was created from operator&gt;&gt;.\n\n    The values reflect the initial load. Once the DOM is modified programmatically      (by adding or changing nodes and attributes) the new values will NOT update to      reflect changes in the document.\n\n    There is a minor performance cost to computing the row and column. Computation      can be disabled if TiXmlDocument::SetTabSize() is called with 0 as the value.\n</code></pre> <p>sa TiXmlDocument::SetTabSize()</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#column","title":"Column","text":"<p>public int Column()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#246</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#setuserdata","title":"SetUserData","text":"<p>public void SetUserData(void * user)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#248</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#getuserdata","title":"GetUserData","text":"<p>public void * GetUserData()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#249</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#getuserdata_1","title":"GetUserData","text":"<p>public const void * GetUserData()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#250</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#encodestring","title":"EncodeString","text":"<p>public void EncodeString(const int &amp; str, int * out)</p> <p>Expands entities in a string. Note this should not contian the tag's '&lt;', '&gt;', etc,        or they will be transformed into entities!</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#skipwhitespace","title":"SkipWhiteSpace","text":"<p>protected const char * SkipWhiteSpace(const char * , TiXmlEncoding encoding)</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#iswhitespace","title":"IsWhiteSpace","text":"<p>protected _Bool IsWhiteSpace(char c)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#291</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#iswhitespace_1","title":"IsWhiteSpace","text":"<p>protected _Bool IsWhiteSpace(int c)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#295</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#streamwhitespace","title":"StreamWhiteSpace","text":"<p>protected _Bool StreamWhiteSpace(int * in, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#streamto","title":"StreamTo","text":"<p>protected _Bool StreamTo(int * in, int character, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#readname","title":"ReadName","text":"<p>protected const char * ReadName(const char * p, int * name, TiXmlEncoding encoding)</p> <pre><code>Reads an XML name into the string provided. Returns     a pointer just past the last character of the name,     or 0 if the function has an error.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlBase/#readtext","title":"ReadText","text":"<p>protected const char * ReadText(const char * in, int * text, _Bool ignoreWhiteSpace, const char * endTag, _Bool ignoreCase, TiXmlEncoding encoding)</p> <pre><code>Reads text. Returns a pointer past the given end tag.       Wickedly complex options, but it keeps the (sensitive) code in one place.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlBase/#getentity","title":"GetEntity","text":"<p>protected const char * GetEntity(const char * in, char * value, int * length, TiXmlEncoding encoding)</p> <p>If an entity has been found, transform it into a character.</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#getchar","title":"GetChar","text":"<p>protected const char * GetChar(const char * p, char * _value, int * length, TiXmlEncoding encoding)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#328</p> <p>Get a character, while interpreting entities. The length can be from 0 to 4 bytes.</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#stringequal","title":"StringEqual","text":"<p>protected _Bool StringEqual(const char * p, const char * endTag, _Bool ignoreCase, TiXmlEncoding encoding)</p> <p>Return true if the next characters in the stream are any of the endTag sequences. Ignore case only works for english, and should only be relied on when comparing to English words: StringEqual( p, \"version\", true ) is fine.</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#isalpha","title":"IsAlpha","text":"<p>protected int IsAlpha(unsigned char anyByte, TiXmlEncoding encoding)</p> <p>None of these methods are reliable for any language except English. Good for approximation, not great for accuracy.</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#isalphanum","title":"IsAlphaNum","text":"<p>protected int IsAlphaNum(unsigned char anyByte, TiXmlEncoding encoding)</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#tolower","title":"ToLower","text":"<p>protected int ToLower(int v, TiXmlEncoding encoding)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#383</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#convertutf32toutf8","title":"ConvertUTF32ToUTF8","text":"<p>protected void ConvertUTF32ToUTF8(unsigned long input, char * output, int * length)</p>"},{"location":"api/GlobalNamespace/TiXmlBase/#enums","title":"Enums","text":"<p>| enum  |</p> <p>--</p> <p>| TIXML_NoError | | TIXML_ERROR | | TIXML_ERROR_OPENING_FILE | | TIXML_ERROR_PARSING_ELEMENT | | TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME | | TIXML_ERROR_READING_ELEMENT_VALUE | | TIXML_ERROR_READING_ATTRIBUTES | | TIXML_ERROR_PARSING_EMPTY | | TIXML_ERROR_READING_END_TAG | | TIXML_ERROR_PARSING_UNKNOWN | | TIXML_ERROR_PARSING_COMMENT | | TIXML_ERROR_PARSING_DECLARATION | | TIXML_ERROR_DOCUMENT_EMPTY | | TIXML_ERROR_EMBEDDED_NULL | | TIXML_ERROR_PARSING_CDATA | | TIXML_ERROR_DOCUMENT_TOP_ONLY | | TIXML_ERROR_STRING_COUNT |</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#265</p>"},{"location":"api/GlobalNamespace/TiXmlComment/","title":"class TiXmlComment","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#1166</p> <pre><code>An XML comment.\n</code></pre> <p>Inherits from TiXmlNode</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlComment/#tixmlcomment","title":"TiXmlComment","text":"<p>public void TiXmlComment()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1170</p> <p>Constructs an empty comment.</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#tixmlcomment_1","title":"TiXmlComment","text":"<p>public void TiXmlComment(const char * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1172</p> <p>Construct a comment from text.</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#tixmlcomment_2","title":"TiXmlComment","text":"<p>public void TiXmlComment(const TiXmlComment &amp; )</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#operator","title":"operator=","text":"<p>public void operator=(const TiXmlComment &amp; base)</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#tixmlcomment_3","title":"~TiXmlComment","text":"<p>public void ~TiXmlComment()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1178</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#clone","title":"Clone","text":"<p>public TiXmlNode * Clone()</p> <p>Returns a copy of this Comment.</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#print","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <p>Write this Comment to a FILE stream.</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p> <pre><code>Attribtue parsing starts: at the ! of the !--                        returns: next char past '&gt;'\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlComment/#tocomment","title":"ToComment","text":"<p>public const TiXmlComment * ToComment()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1190</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#tocomment_1","title":"ToComment","text":"<p>public TiXmlComment * ToComment()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1191</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#accept","title":"Accept","text":"<p>public _Bool Accept(TiXmlVisitor * visitor)</p> <p>Walk the XML tree visiting this node and all of its children. </p>"},{"location":"api/GlobalNamespace/TiXmlComment/#copyto","title":"CopyTo","text":"<p>protected void CopyTo(TiXmlComment * target)</p>"},{"location":"api/GlobalNamespace/TiXmlComment/#streamin","title":"StreamIn","text":"<p>protected void StreamIn(int * in, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlCursor/","title":"struct TiXmlCursor","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#101</p> <pre><code>Internal structure for tracking location of items   in the XML file.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlCursor/#members","title":"Members","text":"<p>public int row</p> <p>public int col</p>"},{"location":"api/GlobalNamespace/TiXmlCursor/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlCursor/#tixmlcursor","title":"TiXmlCursor","text":"<p>public void TiXmlCursor()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#103</p>"},{"location":"api/GlobalNamespace/TiXmlCursor/#clear","title":"Clear","text":"<p>public void Clear()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#104</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/","title":"class TiXmlDeclaration","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#1289</p> <p>In correct XML the declaration is the first entry in the file.</p> <pre><code>    &lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;\n\nTinyXml will happily read or write files without a declaration, however. There are 3 possible attributes to the declaration:    version, encoding, and standalone.\n\nNote: In this version of the code, the attributes are   handled as special cases, not generic attributes, simply    because there can only be at most 3 and they are always the same.\n</code></pre> <p>Inherits from TiXmlNode</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlDeclaration/#tixmldeclaration","title":"TiXmlDeclaration","text":"<p>public void TiXmlDeclaration()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1293</p> <p>Construct an empty declaration.</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#tixmldeclaration_1","title":"TiXmlDeclaration","text":"<p>public void TiXmlDeclaration(const int &amp; _version, const int &amp; _encoding, const int &amp; _standalone)</p> <p>Constructor.</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#tixmldeclaration_2","title":"TiXmlDeclaration","text":"<p>public void TiXmlDeclaration(const char * _version, const char * _encoding, const char * _standalone)</p> <p>Construct.</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#tixmldeclaration_3","title":"TiXmlDeclaration","text":"<p>public void TiXmlDeclaration(const TiXmlDeclaration &amp; copy)</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#operator","title":"operator=","text":"<p>public void operator=(const TiXmlDeclaration &amp; copy)</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#tixmldeclaration_4","title":"~TiXmlDeclaration","text":"<p>public void ~TiXmlDeclaration()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1310</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#version","title":"Version","text":"<p>public const char * Version()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1313</p> <p>Version. Will return an empty string if none was found.</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#encoding","title":"Encoding","text":"<p>public const char * Encoding()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1315</p> <p>Encoding. Will return an empty string if none was found.</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#standalone","title":"Standalone","text":"<p>public const char * Standalone()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1317</p> <p>Is this a standalone document?</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#clone","title":"Clone","text":"<p>public TiXmlNode * Clone()</p> <p>Creates a copy of this Declaration and returns it.</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#print","title":"Print","text":"<p>public void Print(FILE * cfile, int depth, int * str)</p> <p>Print this declaration to a FILE stream.</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#print_1","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1323</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#todeclaration","title":"ToDeclaration","text":"<p>public const TiXmlDeclaration * ToDeclaration()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1329</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#todeclaration_1","title":"ToDeclaration","text":"<p>public TiXmlDeclaration * ToDeclaration()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1330</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#accept","title":"Accept","text":"<p>public _Bool Accept(TiXmlVisitor * visitor)</p> <p>Walk the XML tree visiting this node and all of its children. </p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#copyto","title":"CopyTo","text":"<p>protected void CopyTo(TiXmlDeclaration * target)</p>"},{"location":"api/GlobalNamespace/TiXmlDeclaration/#streamin","title":"StreamIn","text":"<p>protected void StreamIn(int * in, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/","title":"class TiXmlDocument","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#1397</p> <p>Always the top level node. A document binds together all the   XML pieces. It can be saved, loaded, and printed to the screen. The 'value' of a document node is the xml file name.</p> <p>Inherits from TiXmlNode</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlDocument/#tixmldocument","title":"TiXmlDocument","text":"<p>public void TiXmlDocument()</p> <p>Create an empty document, that has no name.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#tixmldocument_1","title":"TiXmlDocument","text":"<p>public void TiXmlDocument(const char * documentName)</p> <p>Create a document with a name. The name of the document is also the filename of the xml.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#tixmldocument_2","title":"TiXmlDocument","text":"<p>public void TiXmlDocument(const int &amp; documentName)</p> <p>Constructor.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#tixmldocument_3","title":"TiXmlDocument","text":"<p>public void TiXmlDocument(const TiXmlDocument &amp; copy)</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#operator","title":"operator=","text":"<p>public void operator=(const TiXmlDocument &amp; copy)</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#tixmldocument_4","title":"~TiXmlDocument","text":"<p>public void ~TiXmlDocument()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1413</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#loadfile","title":"LoadFile","text":"<p>public _Bool LoadFile(TiXmlEncoding encoding)</p> <p>Load a file using the current document value.      Returns true if successful. Will delete any existing        document data before loading.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#savefile","title":"SaveFile","text":"<p>public _Bool SaveFile()</p> <p>Save a file using the current document value. Returns true if successful.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#loadfile_1","title":"LoadFile","text":"<p>public _Bool LoadFile(const char * filename, TiXmlEncoding encoding)</p> <p>Load a file using the given filename. Returns true if successful.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#savefile_1","title":"SaveFile","text":"<p>public _Bool SaveFile(const char * filename)</p> <p>Save a file using the given filename. Returns true if successful.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#loadfile_2","title":"LoadFile","text":"<p>public _Bool LoadFile(FILE * , TiXmlEncoding encoding)</p> <p>Load a file using the given FILE. Returns true if successful. Note that this method       doesn't stream - the entire object pointed at by the FILE      will be interpreted as an XML file. TinyXML doesn't stream in XML from the current      file location. Streaming may be added in the future.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#savefile_2","title":"SaveFile","text":"<p>public _Bool SaveFile(FILE * )</p> <p>Save a file using the given FILE*. Returns true if successful.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#loadfile_3","title":"LoadFile","text":"<p>public _Bool LoadFile(const int &amp; filename, TiXmlEncoding encoding)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1436</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#savefile_3","title":"SaveFile","text":"<p>public _Bool SaveFile(const int &amp; filename)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1440</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p> <p>Parse the given null terminated block of xml data. Passing in an encoding to this      method (either TIXML_ENCODING_LEGACY or TIXML_ENCODING_UTF8 will force TinyXml      to use that encoding, regardless of what TinyXml might otherwise try to detect.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#rootelement","title":"RootElement","text":"<p>public const TiXmlElement * RootElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1456</p> <p>Get the root element -- the only top level element -- of the document.     In well formed XML, there should only be one. TinyXml is tolerant of        multiple elements at the document level.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#rootelement_1","title":"RootElement","text":"<p>public TiXmlElement * RootElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1457</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#error","title":"Error","text":"<p>public _Bool Error()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1464</p> <p>If an error occurs, Error will be set to true. Also,       - The ErrorId() will contain the integer identifier of the error (not generally useful)     - The ErrorDesc() method will return the name of the error. (very useful)       - The ErrorRow() and ErrorCol() will return the location of the error (if known)</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#errordesc","title":"ErrorDesc","text":"<p>public const char * ErrorDesc()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1467</p> <p>Contains a textual (english) description of the error if one occurs.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#errorid","title":"ErrorId","text":"<p>public int ErrorId()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1472</p> <p>Generally, you probably want the error string ( ErrorDesc() ). But if you      prefer the ErrorId, this function will fetch it.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#errorrow","title":"ErrorRow","text":"<p>public int ErrorRow()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1481</p> <p>Returns the location (if known) of the error. The first column is column 1,        and the first row is row 1. A value of 0 means the row and column wasn't applicable     (memory errors, for example, have no row/column) or the parser lost the error. (An      error in the error reporting, in that case.)</p> <p>sa SetTabSize, Row, Column</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#errorcol","title":"ErrorCol","text":"<p>public int ErrorCol()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1482</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#settabsize","title":"SetTabSize","text":"<p>public void SetTabSize(int _tabsize)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1508</p> <p>SetTabSize() allows the error reporting functions (ErrorRow() and ErrorCol())      to report the correct values for row and column. It does not change the output      or input in any way.</p> <pre><code>    By calling this method, with a tab size     greater than 0, the row and column of each node and attribute is stored     when the file is loaded. Very useful for tracking the DOM back in to        the source file.\n\n    The tab size is required for calculating the location of nodes. If not      set, the default of 4 is used. The tabsize is set per document. Setting     the tabsize to 0 disables row/column tracking.\n\n    Note that row and column tracking is not supported when using operator&gt;&gt;.\n\n    The tab size needs to be enabled before the parse or load. Correct usage:\n\n    TiXmlDocument doc;\n\n    doc.SetTabSize( 8 );\n\n    doc.Load( \"myfile.xml\" );\n</code></pre> <p>sa Row, Column</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#tabsize","title":"TabSize","text":"<p>public int TabSize()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1510</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#clearerror","title":"ClearError","text":"<p>public void ClearError()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1515</p> <p>If you have handled the error, it can be reset with this call. The error       state is automatically cleared if you Parse a new XML block.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#print","title":"Print","text":"<p>public void Print()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1523</p> <p>Write the document to standard out using formatted printing (\"pretty print\"). </p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#print_1","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <p>Print this Document to a FILE stream.</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#seterror","title":"SetError","text":"<p>public void SetError(int err, const char * errorLocation, TiXmlParsingData * prevData, TiXmlEncoding encoding)</p> <p>[internal use]</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#todocument","title":"ToDocument","text":"<p>public const TiXmlDocument * ToDocument()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1536</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#todocument_1","title":"ToDocument","text":"<p>public TiXmlDocument * ToDocument()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1537</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#accept","title":"Accept","text":"<p>public _Bool Accept(TiXmlVisitor * content)</p> <p>Walk the XML tree visiting this node and all of its children. </p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#clone","title":"Clone","text":"<p>protected TiXmlNode * Clone()</p> <p>[internal use]</p>"},{"location":"api/GlobalNamespace/TiXmlDocument/#streamin","title":"StreamIn","text":"<p>protected void StreamIn(int * in, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/","title":"class TiXmlElement","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#941</p> <p>The element is a container class. It has a value, the element name,    and can contain other elements, text, comments, and unknowns.   Elements also contain an arbitrary number of attributes.</p> <p>Inherits from TiXmlNode</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlElement/#tixmlelement","title":"TiXmlElement","text":"<p>public void TiXmlElement(const char * in_value)</p> <p>Construct an element.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#tixmlelement_1","title":"TiXmlElement","text":"<p>public void TiXmlElement(const int &amp; _value)</p> <p>std::string constructor.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#tixmlelement_2","title":"TiXmlElement","text":"<p>public void TiXmlElement(const TiXmlElement &amp; )</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#operator","title":"operator=","text":"<p>public void operator=(const TiXmlElement &amp; base)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#tixmlelement_3","title":"~TiXmlElement","text":"<p>public void ~TiXmlElement()</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#attribute","title":"Attribute","text":"<p>public const char * Attribute(const char * name)</p> <p>Given an attribute name, Attribute() returns the value     for the attribute of that name, or null if none exists.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#attribute_1","title":"Attribute","text":"<p>public const char * Attribute(const char * name, int * i)</p> <p>Given an attribute name, Attribute() returns the value     for the attribute of that name, or null if none exists.     If the attribute exists and can be converted to an integer,     the integer value will be put in the return 'i', if 'i'     is non-null.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#attribute_2","title":"Attribute","text":"<p>public const char * Attribute(const char * name, double * d)</p> <p>Given an attribute name, Attribute() returns the value     for the attribute of that name, or null if none exists.     If the attribute exists and can be converted to an double,      the double value will be put in the return 'd', if 'd'      is non-null.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#queryintattribute","title":"QueryIntAttribute","text":"<p>public int QueryIntAttribute(const char * name, int * _value)</p> <p>QueryIntAttribute examines the attribute - it is an alternative to the     Attribute() method with richer error checking.      If the attribute is an integer, it is stored in 'value' and         the call returns TIXML_SUCCESS. If it is not        an integer, it returns TIXML_WRONG_TYPE. If the attribute       does not exist, then TIXML_NO_ATTRIBUTE is returned.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#querydoubleattribute","title":"QueryDoubleAttribute","text":"<p>public int QueryDoubleAttribute(const char * name, double * _value)</p> <p>QueryDoubleAttribute examines the attribute - see QueryIntAttribute().</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#queryfloatattribute","title":"QueryFloatAttribute","text":"<p>public int QueryFloatAttribute(const char * name, float * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#990</p> <p>QueryFloatAttribute examines the attribute - see QueryIntAttribute().</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#queryunsignedattribute","title":"QueryUnsignedAttribute","text":"<p>public int QueryUnsignedAttribute(const char * name, unsigned int * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#999</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#querystringattribute","title":"QueryStringAttribute","text":"<p>public int QueryStringAttribute(const char * name, int * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1011</p> <p>QueryStringAttribute examines the attribute - see QueryIntAttribute().</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#queryvalueattribute","title":"QueryValueAttribute","text":"<p>public int QueryValueAttribute(const int &amp; name, T * outValue)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1028</p> <p>Template form of the attribute query which will try to read the        attribute into the specified type. Very easy, very powerful, but        be careful to make sure to call this with the correct type.</p> <pre><code>    NOTE: This method doesn't work correctly for 'string' types that contain spaces.\n</code></pre> <p>return TIXML_SUCCESS, TIXML_WRONG_TYPE, or TIXML_NO_ATTRIBUTE</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#queryvalueattribute_1","title":"QueryValueAttribute","text":"<p>public int QueryValueAttribute(const int &amp; name, int * outValue)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1041</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#setattribute","title":"SetAttribute","text":"<p>public void SetAttribute(const char * name, const char * _value)</p> <p>Sets an attribute of name to a given value. The attribute      will be created if it does not exist, or changed if it does.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#attribute_3","title":"Attribute","text":"<p>public const int * Attribute(const int &amp; name)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#attribute_4","title":"Attribute","text":"<p>public const int * Attribute(const int &amp; name, int * i)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#attribute_5","title":"Attribute","text":"<p>public const int * Attribute(const int &amp; name, double * d)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#queryintattribute_1","title":"QueryIntAttribute","text":"<p>public int QueryIntAttribute(const int &amp; name, int * _value)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#querydoubleattribute_1","title":"QueryDoubleAttribute","text":"<p>public int QueryDoubleAttribute(const int &amp; name, double * _value)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#setattribute_1","title":"SetAttribute","text":"<p>public void SetAttribute(const int &amp; name, const int &amp; _value)</p> <p>STL std::string form.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#setattribute_2","title":"SetAttribute","text":"<p>public void SetAttribute(const int &amp; name, int _value)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#setdoubleattribute","title":"SetDoubleAttribute","text":"<p>public void SetDoubleAttribute(const int &amp; name, double value)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#setattribute_3","title":"SetAttribute","text":"<p>public void SetAttribute(const char * name, int value)</p> <p>Sets an attribute of name to a given value. The attribute      will be created if it does not exist, or changed if it does.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#setdoubleattribute_1","title":"SetDoubleAttribute","text":"<p>public void SetDoubleAttribute(const char * name, double value)</p> <p>Sets an attribute of name to a given value. The attribute      will be created if it does not exist, or changed if it does.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#removeattribute","title":"RemoveAttribute","text":"<p>public void RemoveAttribute(const char * name)</p> <p>Deletes an attribute with the given name.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#removeattribute_1","title":"RemoveAttribute","text":"<p>public void RemoveAttribute(const int &amp; name)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1085</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#firstattribute","title":"FirstAttribute","text":"<p>public const TiXmlAttribute * FirstAttribute()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1088</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#firstattribute_1","title":"FirstAttribute","text":"<p>public TiXmlAttribute * FirstAttribute()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1089</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#lastattribute","title":"LastAttribute","text":"<p>public const TiXmlAttribute * LastAttribute()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1090</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#lastattribute_1","title":"LastAttribute","text":"<p>public TiXmlAttribute * LastAttribute()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1091</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#gettext","title":"GetText","text":"<p>public const char * GetText()</p> <p>Convenience function for easy access to the text inside an element. Although easy      and concise, GetText() is limited compared to getting the TiXmlText child       and accessing it directly.</p> <pre><code>    If the first child of 'this' is a TiXmlText, the GetText()      returns the character string of the Text node, else null is returned.\n\n    This is a convenient method for getting the text of simple contained text:\n\n    &lt;foo&gt;This is text&lt;/foo&gt;\n\n    const char* str = fooElement-&gt;GetText();\n\n    'str' will be a pointer to \"This is text\".\n\n    Note that this function can be misleading. If the element foo was created from      this XML:\n\n    &lt;foo&gt;&lt;b&gt;This is text&lt;/b&gt;&lt;/foo&gt;\n\n    then the value of str would be null. The first child node isn't a text node, it is      another element. From this XML:\n\n    &lt;foo&gt;This is &lt;b&gt;text&lt;/b&gt;&lt;/foo&gt;\n\n    GetText() will return \"This is \".\n\n    WARNING: GetText() accesses a child node - don't become confused with the                similarly named TiXmlHandle::Text() and TiXmlNode::ToText() which are               safe type casts on the referenced node.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlElement/#clone","title":"Clone","text":"<p>public TiXmlNode * Clone()</p> <p>Creates a new Element and returns it - the returned element is a copy.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#print","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <p>Print the Element to a FILE stream.</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p> <pre><code>Attribtue parsing starts: next char past '&lt;'                         returns: next char past '&gt;'\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlElement/#toelement","title":"ToElement","text":"<p>public const TiXmlElement * ToElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1137</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#toelement_1","title":"ToElement","text":"<p>public TiXmlElement * ToElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1138</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#accept","title":"Accept","text":"<p>public _Bool Accept(TiXmlVisitor * visitor)</p> <p>Walk the XML tree visiting this node and all of its children. </p>"},{"location":"api/GlobalNamespace/TiXmlElement/#copyto","title":"CopyTo","text":"<p>protected void CopyTo(TiXmlElement * target)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#clearthis","title":"ClearThis","text":"<p>protected void ClearThis()</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#streamin","title":"StreamIn","text":"<p>protected void StreamIn(int * in, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlElement/#readvalue","title":"ReadValue","text":"<p>protected const char * ReadValue(const char * in, TiXmlParsingData * prevData, TiXmlEncoding encoding)</p> <pre><code>[internal use]      Reads the \"value\" of the element -- another element, or text.       This should terminate with the current end tag.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlHandle/","title":"class TiXmlHandle","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#1642</p> <pre><code>A TiXmlHandle is a class that wraps a node pointer with null checks; this is    an incredibly useful thing. Note that TiXmlHandle is not part of the TinyXml    DOM structure. It is a separate utility class.\n\nTake an example:\n\n&lt;Document&gt;\n\n    &lt;Element attributeA = \"valueA\"&gt;\n\n        &lt;Child attributeB = \"value1\" /&gt;\n\n        &lt;Child attributeB = \"value2\" /&gt;\n\n    &lt;/Element&gt;\n\n&lt;Document&gt;\n\nAssuming you want the value of \"attributeB\" in the 2nd \"Child\" element, it's very   easy to write a *lot* of code that looks like:\n\n\n\nTiXmlElement* root = document.FirstChildElement( \"Document\" );\n\nif ( root )\n\n{\n\n    TiXmlElement* element = root-&gt;FirstChildElement( \"Element\" );\n\n    if ( element )\n\n    {\n\n        TiXmlElement* child = element-&gt;FirstChildElement( \"Child\" );\n\n        if ( child )\n\n        {\n\n            TiXmlElement* child2 = child-&gt;NextSiblingElement( \"Child\" );\n\n            if ( child2 )\n\n            {\n\n                // Finally do something useful.\n\nAnd that doesn't even cover \"else\" cases. TiXmlHandle addresses the verbosity   of such code. A TiXmlHandle checks for null pointers so it is perfectly safe    and correct to use:\n\n\n\nTiXmlHandle docHandle( &amp;document );\n\nTiXmlElement* child2 = docHandle.FirstChild( \"Document\" ).FirstChild( \"Element\" ).Child( \"Child\", 1 ).ToElement();\n\nif ( child2 )\n\n{\n\n    // do something useful\n\nWhich is MUCH more concise and useful.\n\nIt is also safe to copy handles - internally they are nothing more than node pointers.\n\nTiXmlHandle handleCopy = handle;\n\nWhat they should not be used for is iteration:\n\n\n\nint i=0;\n\nwhile ( true )\n\n{\n\n    TiXmlElement* child = docHandle.FirstChild( \"Document\" ).FirstChild( \"Element\" ).Child( \"Child\", i ).ToElement();\n\n    if ( !child )\n\n        break;\n\n    // do something\n\n    ++i;\n\n}\n\nIt seems reasonable, but it is in fact two embedded while loops. The Child method is    a linear walk to find the element, so this code would iterate much more than it needs   to. Instead, prefer:\n\n\n\nTiXmlElement* child = docHandle.FirstChild( \"Document\" ).FirstChild( \"Element\" ).FirstChild( \"Child\" ).ToElement();\n\n\n\nfor( child; child; child=child-&gt;NextSiblingElement() )\n\n{\n\n    // do something\n\n}\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlHandle/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlHandle/#tixmlhandle","title":"TiXmlHandle","text":"<p>public void TiXmlHandle(TiXmlNode * _node)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1646</p> <p>Create a handle from any node (at any depth of the tree.) This can be a null pointer.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#tixmlhandle_1","title":"TiXmlHandle","text":"<p>public void TiXmlHandle(const TiXmlHandle &amp; ref)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1648</p> <p>Copy constructor</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#operator","title":"operator=","text":"<p>public TiXmlHandle operator=(const TiXmlHandle &amp; ref)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1649</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#firstchild","title":"FirstChild","text":"<p>public TiXmlHandle FirstChild()</p> <p>Return a handle to the first child node.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#firstchild_1","title":"FirstChild","text":"<p>public TiXmlHandle FirstChild(const char * value)</p> <p>Return a handle to the first child node with the given name.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#firstchildelement","title":"FirstChildElement","text":"<p>public TiXmlHandle FirstChildElement()</p> <p>Return a handle to the first child element.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#firstchildelement_1","title":"FirstChildElement","text":"<p>public TiXmlHandle FirstChildElement(const char * value)</p> <p>Return a handle to the first child element with the given name.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#child","title":"Child","text":"<p>public TiXmlHandle Child(const char * value, int index)</p> <p>Return a handle to the \"index\" child with the given name.      The first child is 0, the second 1, etc.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#child_1","title":"Child","text":"<p>public TiXmlHandle Child(int index)</p> <p>Return a handle to the \"index\" child.      The first child is 0, the second 1, etc.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#childelement","title":"ChildElement","text":"<p>public TiXmlHandle ChildElement(const char * value, int index)</p> <p>Return a handle to the \"index\" child element with the given name.      The first child element is 0, the second 1, etc. Note that only TiXmlElements       are indexed: other types are not counted.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#childelement_1","title":"ChildElement","text":"<p>public TiXmlHandle ChildElement(int index)</p> <p>Return a handle to the \"index\" child element.      The first child element is 0, the second 1, etc. Note that only TiXmlElements       are indexed: other types are not counted.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#firstchild_2","title":"FirstChild","text":"<p>public TiXmlHandle FirstChild(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1680</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#firstchildelement_2","title":"FirstChildElement","text":"<p>public TiXmlHandle FirstChildElement(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1681</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#child_2","title":"Child","text":"<p>public TiXmlHandle Child(const int &amp; _value, int index)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1683</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#childelement_2","title":"ChildElement","text":"<p>public TiXmlHandle ChildElement(const int &amp; _value, int index)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1684</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#tonode","title":"ToNode","text":"<p>public TiXmlNode * ToNode()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1689</p> <p>Return the handle as a TiXmlNode. This may return null.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#toelement","title":"ToElement","text":"<p>public TiXmlElement * ToElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1692</p> <p>Return the handle as a TiXmlElement. This may return null.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#totext","title":"ToText","text":"<p>public TiXmlText * ToText()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1695</p> <pre><code>Return the handle as a TiXmlText. This may return null.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlHandle/#tounknown","title":"ToUnknown","text":"<p>public TiXmlUnknown * ToUnknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1698</p> <p>Return the handle as a TiXmlUnknown. This may return null.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#node","title":"Node","text":"<p>public TiXmlNode * Node()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1703</p> <p>deprecated use ToNode.      Return the handle as a TiXmlNode. This may return null.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#element","title":"Element","text":"<p>public TiXmlElement * Element()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1707</p> <p>deprecated use ToElement.       Return the handle as a TiXmlElement. This may return null.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#text","title":"Text","text":"<p>public TiXmlText * Text()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1711</p> <p>deprecated use ToText()     Return the handle as a TiXmlText. This may return null.</p>"},{"location":"api/GlobalNamespace/TiXmlHandle/#unknown","title":"Unknown","text":"<p>public TiXmlUnknown * Unknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1715</p> <p>deprecated use ToUnknown()      Return the handle as a TiXmlUnknown. This may return null.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/","title":"class TiXmlNode","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#424</p> <p>The parent class for everything in the Document Object Model.  (Except for attributes).    Nodes have siblings, a parent, and children. A node can be  in a document, or stand on its own. The type of a TiXmlNode can be queried, and it can be cast to its more defined type.</p> <p>Inherits from TiXmlBase</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#members","title":"Members","text":"<p>protected TiXmlNode * parent</p> <p>protected NodeType type</p> <p>protected TiXmlNode * firstChild</p> <p>protected TiXmlNode * lastChild</p> <p>protected int value</p> <p>protected TiXmlNode * prev</p> <p>protected TiXmlNode * next</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlNode/#tixmlnode","title":"~TiXmlNode","text":"<p>public void ~TiXmlNode()</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#value","title":"Value","text":"<p>public const char * Value()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#488</p> <p>The meaning of 'value' changes for the specific type of        TiXmlNode.</p> <pre><code>    Document:   filename of the xml file\n\n    Element:    name of the element\n\n    Comment:    the comment text\n\n    Unknown:    the tag contents\n\n    Text:       the text string\n\n    The subclasses will wrap this function.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlNode/#valuestr","title":"ValueStr","text":"<p>public const int &amp; ValueStr()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#495</p> <p>Return Value() as a std::string. If you only use STL,      this is more efficient than calling Value().        Only available in STL mode.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#valuetstr","title":"ValueTStr","text":"<p>public const int &amp; ValueTStr()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#498</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#setvalue","title":"SetValue","text":"<p>public void SetValue(const char * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#509</p> <p>Changes the value of the node. Defined as:</p> <pre><code>    Document:   filename of the xml file\n\n    Element:    name of the element\n\n    Comment:    the comment text\n\n    Unknown:    the tag contents\n\n    Text:       the text string\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlNode/#setvalue_1","title":"SetValue","text":"<p>public void SetValue(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#513</p> <p>STL std::string form.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#clear","title":"Clear","text":"<p>public void Clear()</p> <p>Delete all the children of this node. Does not affect 'this'.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#parent","title":"Parent","text":"<p>public TiXmlNode * Parent()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#520</p> <p>One step up the DOM.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#parent_1","title":"Parent","text":"<p>public const TiXmlNode * Parent()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#521</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchild","title":"FirstChild","text":"<p>public const TiXmlNode * FirstChild()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#523</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchild_1","title":"FirstChild","text":"<p>public TiXmlNode * FirstChild()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#524</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchild_2","title":"FirstChild","text":"<p>public const TiXmlNode * FirstChild(const char * value)</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchild_3","title":"FirstChild","text":"<p>public TiXmlNode * FirstChild(const char * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#527</p> <p>The first child of this node with the matching 'value'. Will be null if none found.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#lastchild","title":"LastChild","text":"<p>public const TiXmlNode * LastChild()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#532</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#lastchild_1","title":"LastChild","text":"<p>public TiXmlNode * LastChild()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#533</p> <p>The last child of this node. Will be null if there are no children.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#lastchild_2","title":"LastChild","text":"<p>public const TiXmlNode * LastChild(const char * value)</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#lastchild_3","title":"LastChild","text":"<p>public TiXmlNode * LastChild(const char * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#536</p> <p>The last child of this node matching 'value'. Will be null if there are no children.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchild_4","title":"FirstChild","text":"<p>public const TiXmlNode * FirstChild(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#541</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchild_5","title":"FirstChild","text":"<p>public TiXmlNode * FirstChild(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#542</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#lastchild_4","title":"LastChild","text":"<p>public const TiXmlNode * LastChild(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#543</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#lastchild_5","title":"LastChild","text":"<p>public TiXmlNode * LastChild(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#544</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#iteratechildren","title":"IterateChildren","text":"<p>public const TiXmlNode * IterateChildren(const TiXmlNode * previous)</p> <p>An alternate way to walk the children of a node.       One way to iterate over nodes is:</p> <pre><code>        for( child = parent-&gt;FirstChild(); child; child = child-&gt;NextSibling() )\n\n    IterateChildren does the same thing with the syntax:\n\n        child = 0;\n\n        while( child = parent-&gt;IterateChildren( child ) )\n\n    IterateChildren takes the previous child as input and finds     the next one. If the previous child is null, it returns the     first. IterateChildren will return null when done.\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlNode/#iteratechildren_1","title":"IterateChildren","text":"<p>public TiXmlNode * IterateChildren(const TiXmlNode * previous)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#564</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#iteratechildren_2","title":"IterateChildren","text":"<p>public const TiXmlNode * IterateChildren(const char * value, const TiXmlNode * previous)</p> <p>This flavor of IterateChildren searches for children with a particular 'value'</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#iteratechildren_3","title":"IterateChildren","text":"<p>public TiXmlNode * IterateChildren(const char * _value, const TiXmlNode * previous)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#570</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#iteratechildren_4","title":"IterateChildren","text":"<p>public const TiXmlNode * IterateChildren(const int &amp; _value, const TiXmlNode * previous)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#575</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#iteratechildren_5","title":"IterateChildren","text":"<p>public TiXmlNode * IterateChildren(const int &amp; _value, const TiXmlNode * previous)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#576</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#insertendchild","title":"InsertEndChild","text":"<p>public TiXmlNode * InsertEndChild(const TiXmlNode &amp; addThis)</p> <p>Add a new node related to this. Adds a child past the LastChild.       Returns a pointer to the new object or NULL if an error occured.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#linkendchild","title":"LinkEndChild","text":"<p>public TiXmlNode * LinkEndChild(TiXmlNode * addThis)</p> <p>Add a new node related to this. Adds a child past the LastChild.</p> <pre><code>    NOTE: the node to be added is passed by pointer, and will be        henceforth owned (and deleted) by tinyXml. This method is efficient     and avoids an extra copy, but should be used with care as it        uses a different memory model than the other insert functions.\n</code></pre> <p>sa InsertEndChild</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#insertbeforechild","title":"InsertBeforeChild","text":"<p>public TiXmlNode * InsertBeforeChild(TiXmlNode * beforeThis, const TiXmlNode &amp; addThis)</p> <p>Add a new node related to this. Adds a child before the specified child.       Returns a pointer to the new object or NULL if an error occured.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#insertafterchild","title":"InsertAfterChild","text":"<p>public TiXmlNode * InsertAfterChild(TiXmlNode * afterThis, const TiXmlNode &amp; addThis)</p> <p>Add a new node related to this. Adds a child after the specified child.        Returns a pointer to the new object or NULL if an error occured.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#replacechild","title":"ReplaceChild","text":"<p>public TiXmlNode * ReplaceChild(TiXmlNode * replaceThis, const TiXmlNode &amp; withThis)</p> <p>Replace a child of this node.      Returns a pointer to the new object or NULL if an error occured.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#removechild","title":"RemoveChild","text":"<p>public _Bool RemoveChild(TiXmlNode * removeThis)</p> <p>Delete a child of this node.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#previoussibling","title":"PreviousSibling","text":"<p>public const TiXmlNode * PreviousSibling()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#615</p> <p>Navigate to a sibling node.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#previoussibling_1","title":"PreviousSibling","text":"<p>public TiXmlNode * PreviousSibling()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#616</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#previoussibling_2","title":"PreviousSibling","text":"<p>public const TiXmlNode * PreviousSibling(const char * )</p> <p>Navigate to a sibling node.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#previoussibling_3","title":"PreviousSibling","text":"<p>public TiXmlNode * PreviousSibling(const char * _prev)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#620</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#previoussibling_4","title":"PreviousSibling","text":"<p>public const TiXmlNode * PreviousSibling(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#625</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#previoussibling_5","title":"PreviousSibling","text":"<p>public TiXmlNode * PreviousSibling(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#626</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsibling","title":"NextSibling","text":"<p>public const TiXmlNode * NextSibling(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#627</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsibling_1","title":"NextSibling","text":"<p>public TiXmlNode * NextSibling(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#628</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsibling_2","title":"NextSibling","text":"<p>public const TiXmlNode * NextSibling()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#632</p> <p>Navigate to a sibling node.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsibling_3","title":"NextSibling","text":"<p>public TiXmlNode * NextSibling()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#633</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsibling_4","title":"NextSibling","text":"<p>public const TiXmlNode * NextSibling(const char * )</p> <p>Navigate to a sibling node with the given 'value'.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsibling_5","title":"NextSibling","text":"<p>public TiXmlNode * NextSibling(const char * _next)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#637</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsiblingelement","title":"NextSiblingElement","text":"<p>public const TiXmlElement * NextSiblingElement()</p> <p>Convenience function to get through elements.      Calls NextSibling and ToElement. Will skip all non-Element      nodes. Returns 0 if there is not another element.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsiblingelement_1","title":"NextSiblingElement","text":"<p>public TiXmlElement * NextSiblingElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#646</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsiblingelement_2","title":"NextSiblingElement","text":"<p>public const TiXmlElement * NextSiblingElement(const char * )</p> <p>Convenience function to get through elements.      Calls NextSibling and ToElement. Will skip all non-Element      nodes. Returns 0 if there is not another element.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsiblingelement_3","title":"NextSiblingElement","text":"<p>public TiXmlElement * NextSiblingElement(const char * _next)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#655</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsiblingelement_4","title":"NextSiblingElement","text":"<p>public const TiXmlElement * NextSiblingElement(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#660</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nextsiblingelement_5","title":"NextSiblingElement","text":"<p>public TiXmlElement * NextSiblingElement(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#661</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchildelement","title":"FirstChildElement","text":"<p>public const TiXmlElement * FirstChildElement()</p> <p>Convenience function to get through elements.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchildelement_1","title":"FirstChildElement","text":"<p>public TiXmlElement * FirstChildElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#666</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchildelement_2","title":"FirstChildElement","text":"<p>public const TiXmlElement * FirstChildElement(const char * _value)</p> <p>Convenience function to get through elements.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchildelement_3","title":"FirstChildElement","text":"<p>public TiXmlElement * FirstChildElement(const char * _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#672</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchildelement_4","title":"FirstChildElement","text":"<p>public const TiXmlElement * FirstChildElement(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#677</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#firstchildelement_5","title":"FirstChildElement","text":"<p>public TiXmlElement * FirstChildElement(const int &amp; _value)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#678</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#type","title":"Type","text":"<p>public int Type()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#685</p> <p>Query the type (as an enumerated value, above) of this node.       The possible types are: DOCUMENT, ELEMENT, COMMENT,                             UNKNOWN, TEXT, and DECLARATION.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#getdocument","title":"GetDocument","text":"<p>public const TiXmlDocument * GetDocument()</p> <p>Return a pointer to the Document this node lives in.       Returns null if not in a document.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#getdocument_1","title":"GetDocument","text":"<p>public TiXmlDocument * GetDocument()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#691</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#nochildren","title":"NoChildren","text":"<p>public _Bool NoChildren()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#696</p> <p>Returns true if this node has no children.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#todocument","title":"ToDocument","text":"<p>public const TiXmlDocument * ToDocument()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#698</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#toelement","title":"ToElement","text":"<p>public const TiXmlElement * ToElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#699</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#tocomment","title":"ToComment","text":"<p>public const TiXmlComment * ToComment()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#700</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#tounknown","title":"ToUnknown","text":"<p>public const TiXmlUnknown * ToUnknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#701</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#totext","title":"ToText","text":"<p>public const TiXmlText * ToText()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#702</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#todeclaration","title":"ToDeclaration","text":"<p>public const TiXmlDeclaration * ToDeclaration()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#703</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#todocument_1","title":"ToDocument","text":"<p>public TiXmlDocument * ToDocument()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#705</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#toelement_1","title":"ToElement","text":"<p>public TiXmlElement * ToElement()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#706</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#tocomment_1","title":"ToComment","text":"<p>public TiXmlComment * ToComment()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#707</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#tounknown_1","title":"ToUnknown","text":"<p>public TiXmlUnknown * ToUnknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#708</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#totext_1","title":"ToText","text":"<p>public TiXmlText * ToText()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#709</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#todeclaration_1","title":"ToDeclaration","text":"<p>public TiXmlDeclaration * ToDeclaration()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#710</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#clone","title":"Clone","text":"<p>public TiXmlNode * Clone()</p> <p>Create an exact duplicate of this node and return it. The memory must be deleted       by the caller. </p>"},{"location":"api/GlobalNamespace/TiXmlNode/#accept","title":"Accept","text":"<p>public _Bool Accept(TiXmlVisitor * visitor)</p> <p>Accept a hierchical visit the nodes in the TinyXML DOM. Every node in the      XML tree will be conditionally visited and the host will be called back     via the TiXmlVisitor interface.</p> <pre><code>    This is essentially a SAX interface for TinyXML. (Note however it doesn't re-parse      the XML for the callbacks, so the performance of TinyXML is unchanged by using this     interface versus any other.)\n\n    The interface has been based on ideas from:\n\n    - http://www.saxproject.org/        - http://c2.com/cgi/wiki?HierarchicalVisitorPattern\n\n    Which are both good references for \"visiting\".\n\n    An example of using Accept():\n\n    TiXmlPrinter printer;\n\n    tinyxmlDoc.Accept( &amp;printer );\n\n    const char* xmlcstr = printer.CStr();\n</code></pre>"},{"location":"api/GlobalNamespace/TiXmlNode/#streamin","title":"StreamIn","text":"<p>public void StreamIn(int * in, int * tag)</p> <p>The real work of the input operator.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#tixmlnode_1","title":"TiXmlNode","text":"<p>protected void TiXmlNode(NodeType _type)</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#copyto","title":"CopyTo","text":"<p>protected void CopyTo(TiXmlNode * target)</p> <p>Copy to the allocated object. Shared functionality between Clone, Copy constructor, and the assignment operator.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#identify","title":"Identify","text":"<p>protected TiXmlNode * Identify(const char * start, TiXmlEncoding encoding)</p> <p>Figure out what is at *p, and parse it. Returns null if it is not an xml node.</p>"},{"location":"api/GlobalNamespace/TiXmlNode/#enums","title":"Enums","text":"<p>| enum NodeType |</p> <p>--</p> <p>| TINYXML_DOCUMENT | | TINYXML_ELEMENT | | TINYXML_COMMENT | | TINYXML_UNKNOWN | | TINYXML_TEXT | | TINYXML_DECLARATION | | TINYXML_TYPECOUNT |</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#463</p> <p>The types of XML nodes supported by TinyXml. (All the          unsupported types are picked up by UNKNOWN.)</p>"},{"location":"api/GlobalNamespace/TiXmlParsingData/","title":"class TiXmlParsingData","text":""},{"location":"api/GlobalNamespace/TiXmlPrinter/","title":"class TiXmlPrinter","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#1741</p> <p>Print to memory functionality. The TiXmlPrinter is useful when you need to:</p> <pre><code>-# Print to memory (especially in non-STL mode) -# Control formatting (line endings, etc.)\n\nWhen constructed, the TiXmlPrinter is in its default \"pretty printing\" mode.    Before calling Accept() you can call methods to control the printing    of the XML document. After TiXmlNode::Accept() is called, the printed document can  be accessed via the CStr(), Str(), and Size() methods.\n\nTiXmlPrinter uses the Visitor API.\n\nTiXmlPrinter printer;\n\nprinter.SetIndent( \"\\t\" );\n\n\n\ndoc.Accept( &amp;printer );\n\nfprintf( stdout, \"%s\", printer.CStr() );\n</code></pre> <p>Inherits from TiXmlVisitor</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlPrinter/#tixmlprinter","title":"TiXmlPrinter","text":"<p>public void TiXmlPrinter()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1744</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visitenter","title":"VisitEnter","text":"<p>public _Bool VisitEnter(const TiXmlDocument &amp; doc)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visitexit","title":"VisitExit","text":"<p>public _Bool VisitExit(const TiXmlDocument &amp; doc)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visitenter_1","title":"VisitEnter","text":"<p>public _Bool VisitEnter(const TiXmlElement &amp; element, const TiXmlAttribute * firstAttribute)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visitexit_1","title":"VisitExit","text":"<p>public _Bool VisitExit(const TiXmlElement &amp; element)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visit","title":"Visit","text":"<p>public _Bool Visit(const TiXmlDeclaration &amp; declaration)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visit_1","title":"Visit","text":"<p>public _Bool Visit(const TiXmlText &amp; text)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visit_2","title":"Visit","text":"<p>public _Bool Visit(const TiXmlComment &amp; comment)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#visit_3","title":"Visit","text":"<p>public _Bool Visit(const TiXmlUnknown &amp; unknown)</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#setindent","title":"SetIndent","text":"<p>public void SetIndent(const char * _indent)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1761</p> <p>Set the indent characters for printing. By default 4 spaces        but tab ( ) is also useful, or null/empty string for no indentation."},{"location":"api/GlobalNamespace/TiXmlPrinter/#indent","title":"Indent","text":"<p>public const char * Indent()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1763</p> <p>Query the indention string.</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#setlinebreak","title":"SetLineBreak","text":"<p>public void SetLineBreak(const char * _lineBreak)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1768</p> <p>Set the line breaking string. By default set to newline (n ).      Some operating systems prefer other characters, or can be       set to the null/empty string for no indenation.</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#linebreak","title":"LineBreak","text":"<p>public const char * LineBreak()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1770</p> <p>Query the current line breaking string.</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#setstreamprinting","title":"SetStreamPrinting","text":"<p>public void SetStreamPrinting()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1775</p> <p>Switch over to \"stream printing\" which is the most dense formatting without        linebreaks. Common when the XML is needed for network transmission.</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#cstr","title":"CStr","text":"<p>public const char * CStr()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1779</p> <p>Return the result.</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#size","title":"Size","text":"<p>public size_t Size()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1781</p> <p>Return the length of the result string.</p>"},{"location":"api/GlobalNamespace/TiXmlPrinter/#str","title":"Str","text":"<p>public const int &amp; Str()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1785</p> <p>Return the result.</p>"},{"location":"api/GlobalNamespace/TiXmlText/","title":"class TiXmlText","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#1216</p> <p>XML text. A text node can have 2 ways to output the next. \"normal\" output  and CDATA. It will default to the mode it was parsed from the XML file and  you generally want to leave it alone, but you can change the output mode with   SetCDATA() and query it with CDATA().</p> <p>Inherits from TiXmlNode</p>"},{"location":"api/GlobalNamespace/TiXmlText/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlText/#tixmltext","title":"TiXmlText","text":"<p>public void TiXmlText(const char * initValue)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1224</p> <p>Constructor for text element. By default, it is treated as         normal, encoded text. If you want it be output as a CDATA text      element, set the parameter _cdata to 'true'</p>"},{"location":"api/GlobalNamespace/TiXmlText/#tixmltext_1","title":"~TiXmlText","text":"<p>public void ~TiXmlText()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1229</p>"},{"location":"api/GlobalNamespace/TiXmlText/#tixmltext_2","title":"TiXmlText","text":"<p>public void TiXmlText(const int &amp; initValue)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1233</p> <p>Constructor.</p>"},{"location":"api/GlobalNamespace/TiXmlText/#tixmltext_3","title":"TiXmlText","text":"<p>public void TiXmlText(const TiXmlText &amp; copy)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1240</p>"},{"location":"api/GlobalNamespace/TiXmlText/#operator","title":"operator=","text":"<p>public void operator=(const TiXmlText &amp; base)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1241</p>"},{"location":"api/GlobalNamespace/TiXmlText/#print","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <p>Write this text object to a FILE stream.</p>"},{"location":"api/GlobalNamespace/TiXmlText/#cdata","title":"CDATA","text":"<p>public _Bool CDATA()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1247</p> <p>Queries whether this represents text using a CDATA section.</p>"},{"location":"api/GlobalNamespace/TiXmlText/#setcdata","title":"SetCDATA","text":"<p>public void SetCDATA(_Bool _cdata)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1249</p> <p>Turns on or off a CDATA representation of text.</p>"},{"location":"api/GlobalNamespace/TiXmlText/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p>"},{"location":"api/GlobalNamespace/TiXmlText/#totext","title":"ToText","text":"<p>public const TiXmlText * ToText()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1253</p>"},{"location":"api/GlobalNamespace/TiXmlText/#totext_1","title":"ToText","text":"<p>public TiXmlText * ToText()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1254</p>"},{"location":"api/GlobalNamespace/TiXmlText/#accept","title":"Accept","text":"<p>public _Bool Accept(TiXmlVisitor * content)</p> <p>Walk the XML tree visiting this node and all of its children. </p>"},{"location":"api/GlobalNamespace/TiXmlText/#clone","title":"Clone","text":"<p>protected TiXmlNode * Clone()</p> <p>[internal use] Creates a new Element and returns it.</p>"},{"location":"api/GlobalNamespace/TiXmlText/#copyto","title":"CopyTo","text":"<p>protected void CopyTo(TiXmlText * target)</p>"},{"location":"api/GlobalNamespace/TiXmlText/#blank","title":"Blank","text":"<p>protected _Bool Blank()</p>"},{"location":"api/GlobalNamespace/TiXmlText/#streamin","title":"StreamIn","text":"<p>protected void StreamIn(int * in, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/","title":"class TiXmlUnknown","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#1358</p> <p>Any tag that tinyXml doesn't recognize is saved as an  unknown. It is a tag of text, but should not be modified.   It will be written back to the XML, unchanged, when the file    is saved.</p> <pre><code>DTD tags get thrown into TiXmlUnknowns.\n</code></pre> <p>Inherits from TiXmlNode</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlUnknown/#tixmlunknown","title":"TiXmlUnknown","text":"<p>public void TiXmlUnknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1361</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#tixmlunknown_1","title":"~TiXmlUnknown","text":"<p>public void ~TiXmlUnknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1362</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#tixmlunknown_2","title":"TiXmlUnknown","text":"<p>public void TiXmlUnknown(const TiXmlUnknown &amp; copy)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1364</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#operator","title":"operator=","text":"<p>public void operator=(const TiXmlUnknown &amp; copy)</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1365</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#clone","title":"Clone","text":"<p>public TiXmlNode * Clone()</p> <p>Creates a copy of this Unknown and returns it.</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#print","title":"Print","text":"<p>public void Print(FILE * cfile, int depth)</p> <p>Print this Unknown to a FILE stream.</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#parse","title":"Parse","text":"<p>public const char * Parse(const char * p, TiXmlParsingData * data, TiXmlEncoding encoding)</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#tounknown","title":"ToUnknown","text":"<p>public const TiXmlUnknown * ToUnknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1374</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#tounknown_1","title":"ToUnknown","text":"<p>public TiXmlUnknown * ToUnknown()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#1375</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#accept","title":"Accept","text":"<p>public _Bool Accept(TiXmlVisitor * content)</p> <p>Walk the XML tree visiting this node and all of its children. </p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#copyto","title":"CopyTo","text":"<p>protected void CopyTo(TiXmlUnknown * target)</p>"},{"location":"api/GlobalNamespace/TiXmlUnknown/#streamin","title":"StreamIn","text":"<p>protected void StreamIn(int * in, int * tag)</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/","title":"class TiXmlVisitor","text":"<p>Defined at src/rocky/tinyxml/tinyxml.h#129</p> <pre><code>Implements the interface to the \"Visitor pattern\" (see the Accept() method.)    If you call the Accept() method, it requires being passed a TiXmlVisitor    class to handle callbacks. For nodes that contain other nodes (Document, Element)   you will get called with a VisitEnter/VisitExit pair. Nodes that are always leaves  are simply called with Visit().\n\nIf you return 'true' from a Visit method, recursive parsing will continue. If you return    false, &lt;b&gt;\n</code></pre> <p>no children of this node or its sibilings</p> <p>will be Visited.</p> <pre><code>All flavors of Visit methods have a default implementation that returns 'true' (continue    visiting). You need to only override methods that are interesting to you.\n\nGenerally Accept() is called on the TiXmlDocument, although all nodes suppert Visiting.\n\nYou should never change the document from a callback.\n</code></pre> <p>sa TiXmlNode::Accept()</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/TiXmlVisitor/#tixmlvisitor","title":"~TiXmlVisitor","text":"<p>public void ~TiXmlVisitor()</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#132</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visitenter","title":"VisitEnter","text":"<p>public _Bool VisitEnter(const TiXmlDocument &amp; )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#135</p> <p>Visit a document.</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visitexit","title":"VisitExit","text":"<p>public _Bool VisitExit(const TiXmlDocument &amp; )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#137</p> <p>Visit a document.</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visitenter_1","title":"VisitEnter","text":"<p>public _Bool VisitEnter(const TiXmlElement &amp; , const TiXmlAttribute * )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#140</p> <p>Visit an element.</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visitexit_1","title":"VisitExit","text":"<p>public _Bool VisitExit(const TiXmlElement &amp; )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#142</p> <p>Visit an element.</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visit","title":"Visit","text":"<p>public _Bool Visit(const TiXmlDeclaration &amp; )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#145</p> <p>Visit a declaration</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visit_1","title":"Visit","text":"<p>public _Bool Visit(const TiXmlText &amp; )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#147</p> <p>Visit a text node</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visit_2","title":"Visit","text":"<p>public _Bool Visit(const TiXmlComment &amp; )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#149</p> <p>Visit a comment node</p>"},{"location":"api/GlobalNamespace/TiXmlVisitor/#visit_3","title":"Visit","text":"<p>public _Bool Visit(const TiXmlUnknown &amp; )</p> <p>Defined at src/rocky/tinyxml/tinyxml.h#151</p> <p>Visit an unknow node</p>"},{"location":"api/GlobalNamespace/RTree/Branch/","title":"struct Branch","text":"<p>Defined at src/rocky/rtree.h#302</p> <p>May be data or may be another subtree The parents level determines this. If the parents level is 0, then this is data</p>"},{"location":"api/GlobalNamespace/RTree/Branch/#members","title":"Members","text":"<p>public Rect m_rect</p> <p>public Node * m_child</p> <p>public DATATYPE m_data</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/","title":"class Iterator","text":"<p>Defined at src/rocky/rtree.h#130</p> <p>Iterator is not remove safe.</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/RTree/Iterator/#iterator","title":"Iterator","text":"<p>public void Iterator()</p> <p>Defined at src/rocky/rtree.h#144</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#iterator_1","title":"~Iterator","text":"<p>public void ~Iterator()</p> <p>Defined at src/rocky/rtree.h#146</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#isnull","title":"IsNull","text":"<p>public _Bool IsNull()</p> <p>Defined at src/rocky/rtree.h#149</p> <p>Is iterator invalid</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#isnotnull","title":"IsNotNull","text":"<p>public _Bool IsNotNull()</p> <p>Defined at src/rocky/rtree.h#152</p> <p>Is iterator pointing to valid data</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#operator","title":"operator*","text":"<p>public DATATYPE &amp; operator()*</p> <p>Defined at src/rocky/rtree.h#155</p> <p>Access the current data element. Caller must be sure iterator is not NULL first.</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#operator_1","title":"operator*","text":"<p>public const DATATYPE &amp; operator()*</p> <p>Defined at src/rocky/rtree.h#163</p> <p>Access the current data element. Caller must be sure iterator is not NULL first.</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#operator_2","title":"operator++","text":"<p>public _Bool operator++()</p> <p>Defined at src/rocky/rtree.h#171</p> <p>Find the next data element</p>"},{"location":"api/GlobalNamespace/RTree/Iterator/#getbounds","title":"GetBounds","text":"<p>public void GetBounds(ELEMTYPE[NUMDIMS] a_min, ELEMTYPE[NUMDIMS] a_max)</p> <p>Defined at src/rocky/rtree.h#174</p> <p>Get the bounds for this node</p>"},{"location":"api/GlobalNamespace/RTree/ListNode/","title":"struct ListNode","text":"<p>Defined at src/rocky/rtree.h#321</p> <p>A link list of nodes for reinsertion after a delete operation</p>"},{"location":"api/GlobalNamespace/RTree/ListNode/#members","title":"Members","text":"<p>public ListNode * m_next</p> <p>public Node * m_node</p>"},{"location":"api/GlobalNamespace/RTree/Node/","title":"struct Node","text":"<p>Defined at src/rocky/rtree.h#310</p> <p>Node for each branch level</p>"},{"location":"api/GlobalNamespace/RTree/Node/#members","title":"Members","text":"<p>public int m_count</p> <p>public int m_level</p> <p>public Branch[MAXNODES] m_branch</p>"},{"location":"api/GlobalNamespace/RTree/Node/#functions","title":"Functions","text":""},{"location":"api/GlobalNamespace/RTree/Node/#isinternalnode","title":"IsInternalNode","text":"<p>public _Bool IsInternalNode()</p> <p>Defined at src/rocky/rtree.h#312</p>"},{"location":"api/GlobalNamespace/RTree/Node/#isleaf","title":"IsLeaf","text":"<p>public _Bool IsLeaf()</p> <p>Defined at src/rocky/rtree.h#313</p>"},{"location":"api/GlobalNamespace/RTree/PartitionVars/","title":"struct PartitionVars","text":"<p>Defined at src/rocky/rtree.h#328</p> <p>Variables for finding a split partition</p>"},{"location":"api/GlobalNamespace/RTree/PartitionVars/#members","title":"Members","text":"<p>public int[MAXNODES + 1] m_partition</p> <p>public int m_total</p> <p>public int m_minFill</p> <p>public int[2] m_count</p> <p>public Rect[2] m_cover</p> <p>public ELEMTYPEREAL[2] m_area</p> <p>public Branch[MAXNODES + 1] m_branchBuf</p> <p>public int m_branchCount</p> <p>public Rect m_coverSplit</p> <p>public ELEMTYPEREAL m_coverSplitArea</p>"},{"location":"api/GlobalNamespace/RTree/PartitionVars/#enums","title":"Enums","text":"<p>| enum  |</p> <p>--</p> <p>| NOT_TAKEN |</p> <p>Defined at src/rocky/rtree.h#330</p>"},{"location":"api/GlobalNamespace/RTree/Rect/","title":"struct Rect","text":"<p>Defined at src/rocky/rtree.h#293</p> <p>Minimal bounding rectangle (n-dimensional)</p>"},{"location":"api/GlobalNamespace/RTree/Rect/#members","title":"Members","text":"<p>public ELEMTYPE[NUMDIMS] m_min</p> <p>public ELEMTYPE[NUMDIMS] m_max</p>"},{"location":"api/ROCKY_NAMESPACE/","title":"namespace ROCKY_NAMESPACE","text":"<p>A collection of types used by the various I/O systems.</p> <p>Classes here are extensions of the vsgImGui classes to support multi-context ImGui rendering. This is neccessary when crossing DLL boundaries and the like.</p>"},{"location":"api/ROCKY_NAMESPACE/#namespaces","title":"Namespaces","text":"<ul> <li>util</li> <li>TMS</li> <li>detail</li> </ul>"},{"location":"api/ROCKY_NAMESPACE/#records","title":"Records","text":"<ul> <li>Image</li> <li>GeoPoint</li> <li>ROCKY_EXPORT</li> <li>ElevationLayerVector</li> <li>Map</li> <li>ImageLayer</li> <li>ElevationLayer</li> <li>IOOptions</li> <li>GeoExtent</li> <li>Mosaic</li> <li>CallbackSubs</li> <li>Callback</li> <li>TileKey</li> <li>Feature</li> <li>option</li> <li>Declutter</li> <li>Motion</li> <li>MotionGreatCircle</li> <li>MeshStyle</li> <li>Triangle_t</li> <li>Mesh</li> <li>LineStyle</li> <li>BaseComponent</li> <li>Transform</li> <li>LabelStyle</li> <li>Label</li> <li>Registry</li> <li>IconStyle</li> <li>Icon</li> <li>ActiveState</li> <li>Visibility</li> <li>Distance</li> <li>Angle</li> <li>Duration</li> <li>Speed</li> <li>ScreenSize</li> <li>ElevationSession</li> <li>Heightfield</li> <li>Layer</li> <li>TerrainTileModel</li> <li>Failure</li> <li>Result</li> <li>Status</li> <li>ContextImpl</li> <li>Content</li> <li>URIResponse</li> <li>Hyperlink</li> <li>GeoImage</li> <li>ContextFactory</li> <li>Application</li> <li>ImGuiContextGroup</li> <li>DisplayGeoPoint</li> <li>PipelineUtils</li> <li>TransformViewDetail</li> <li>TransformDetail</li> <li>Runtime</li> <li>Texture</li> <li>MotionSystem</li> <li>NodeGraph</li> <li>EntityNode</li> <li>StyleSheet</li> <li>IconInstanceGPU</li> <li>MapNode</li> <li>VSGContextFactory</li> <li>RenderImGuiContext</li> <li>SendEventsToImGui</li> <li>DisplayManager</li> <li>TerrainEngine</li> <li>TerrainNode</li> <li>TerrainSettings</li> <li>TerrainTilePager</li> <li>TerrainTileNode</li> <li>TerrainTileRenderModel</li> <li>TerrainDescriptors</li> <li>ROCKY_VSG_INTERNAL</li> <li>CreateTileManifest</li> <li>SurfaceNode</li> <li>TextureData</li> <li>TerrainTileDescriptors</li> <li>TerrainTileHost</li> <li>MeshEditor</li> <li>SharedGeometry</li> <li>GeometryKey</li> <li>Profile</li> <li>GeometryPool</li> <li>Cache</li> <li>SRSOperation</li> <li>DateTime</li> <li>CelestialBody</li> </ul>"},{"location":"api/ROCKY_NAMESPACE/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/#visible","title":"visible","text":"<p>_Bool visible(const Visibility &amp; vis, int &amp; rs)</p> <p>Defined at src/rocky/ecs/Visibility.h#45</p>"},{"location":"api/ROCKY_NAMESPACE/#setvisible","title":"setVisible","text":"<p>void setVisible(int &amp; registry, int e, _Bool value, int view_index)</p> <p>Defined at src/rocky/ecs/Visibility.h#56</p> <p>Toggle the visibility of an entity in the given view</p> <p>r Entity registry</p> <p>e Entity id</p> <p>value New visibility state</p> <p>view_index Index of view to set visibility</p>"},{"location":"api/ROCKY_NAMESPACE/#setvisible_1","title":"setVisible","text":"<p>void setVisible(int &amp; registry, ITER begin, ITER end, _Bool value, int view_index)</p> <p>Defined at src/rocky/ecs/Visibility.h#69</p>"},{"location":"api/ROCKY_NAMESPACE/#visible_1","title":"visible","text":"<p>_Bool visible(int &amp; registry, int e, int view_index)</p> <p>Defined at src/rocky/ecs/Visibility.h#82</p> <p>Whether an entity is active and visible in the given view</p> <p>r Entity registry</p> <p>e Entity id</p> <p>view_index Index of view to check visibility</p> <p>return True if visible in that view</p>"},{"location":"api/ROCKY_NAMESPACE/#empty","title":"empty","text":"<p>_Bool empty()</p> <p>Defined at src/rocky/TerrainTileModel.h#56</p> <p>True if this model contains no data.</p>"},{"location":"api/ROCKY_NAMESPACE/#operator","title":"operator*","text":"<p>int operator(const int &amp; a, const int &amp; b)*</p> <p>Defined at src/rocky/Math.h#30</p> <p>Convenience function to transform a 3D vector using a 4D matrix</p> <p>mult a vec3 x mat4</p>"},{"location":"api/ROCKY_NAMESPACE/#expandby","title":"expandBy","text":"<p>SPHERE &amp; expandBy(SPHERE &amp; s, typename SPHERE::vec_type p)</p> <p>Defined at src/rocky/Math.h#50</p>"},{"location":"api/ROCKY_NAMESPACE/#to_glm","title":"to_glm","text":"<p>const int &amp; to_glm(const int &amp; a)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#53</p> <p>vsg-glm conversions. These work because GLM and VSG classes are binary compatible. C++ does not permit conversion operator overload outside of a class.</p>"},{"location":"api/ROCKY_NAMESPACE/#to_vsg","title":"to_vsg","text":"<p>const int &amp; to_vsg(const int &amp; a)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#78</p>"},{"location":"api/ROCKY_NAMESPACE/#distanceto","title":"distanceTo","text":"<p>float distanceTo(const int &amp; p, int * state)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#116</p> <p>Distance in scene units (meters) from a point to the camera.</p>"},{"location":"api/ROCKY_NAMESPACE/#expandby_1","title":"expandBy","text":"<p>void expandBy(int &amp; bs, const vec_type &amp; v)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#123</p> <p>Expands an existing sphere to include a point.</p>"},{"location":"api/ROCKY_NAMESPACE/#enums","title":"Enums","text":"<p>| enum class Interpolation |</p> <p>--</p> <p>| Nearest | | Average | | Bilinear | | Triangulate | | Cubic | | CubicSpline |</p> <p>Defined at src/rocky/Math.h#19</p> <p>Raster interpolation methods</p> <p>| enum class GeodeticInterpolation |</p> <p>--</p> <p>| RhumbLine | | GreatCircle |</p> <p>Defined at src/rocky/Feature.h#145</p> <p>How to interpolate points along a line segment on a geodetic map</p> <p>| enum TextureType |</p> <p>--</p> <p>| COLOR | | COLOR_PARENT | | ELEVATION | | NORMAL | | NUM_TEXTURE_TYPES |</p> <p>Defined at src/rocky/vsg/terrain/TerrainTileNode.h#38</p>"},{"location":"api/ROCKY_NAMESPACE/ActiveState/","title":"struct ActiveState","text":"<p>Defined at src/rocky/ecs/Visibility.h#17</p> <p>Component whose precense indicates that an entity is active.</p>"},{"location":"api/ROCKY_NAMESPACE/ActiveState/#members","title":"Members","text":"<p>public _Bool active</p>"},{"location":"api/ROCKY_NAMESPACE/Angle/","title":"class Angle","text":"<p>Defined at src/rocky/Units.h#277</p>"},{"location":"api/ROCKY_NAMESPACE/Angle/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Angle/#angle","title":"Angle","text":"<p>public void Angle()</p> <p>Defined at src/rocky/Units.h#279</p>"},{"location":"api/ROCKY_NAMESPACE/Angle/#angle_1","title":"Angle","text":"<p>public void Angle(double value, const int &amp; units)</p> <p>Defined at src/rocky/Units.h#280</p>"},{"location":"api/ROCKY_NAMESPACE/Angle/#angle_2","title":"Angle","text":"<p>public void Angle(const int &amp; str, const int &amp; defaultUnits)</p> <p>Defined at src/rocky/Units.h#281</p>"},{"location":"api/ROCKY_NAMESPACE/Angle/#asparseablestring","title":"asParseableString","text":"<p>public int asParseableString()</p> <p>Defined at src/rocky/Units.h#282</p>"},{"location":"api/ROCKY_NAMESPACE/Application/","title":"class Application","text":""},{"location":"api/ROCKY_NAMESPACE/BaseComponent/","title":"struct BaseComponent","text":"<p>Defined at src/rocky/ecs/Component.h#16</p> <p>Superclass for ECS components that support revisionings and an attach point. The attach point is for internal usage.</p>"},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#members","title":"Members","text":"<p>public int revision</p> <p>public int attach_point</p>"},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#dirty","title":"dirty","text":"<p>public void dirty()</p> <p>Defined at src/rocky/ecs/Component.h#25</p> <p>bump the revision.</p>"},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#basecomponent","title":"BaseComponent","text":"<p>public void BaseComponent()</p> <p>Defined at src/rocky/ecs/Component.h#30</p>"},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#basecomponent_1","title":"BaseComponent","text":"<p>public void BaseComponent(const BaseComponent &amp; )</p> <p>Defined at src/rocky/ecs/Component.h#32</p>"},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#operator","title":"operator=","text":"<p>public BaseComponent &amp; operator=(const BaseComponent &amp; )</p> <p>Defined at src/rocky/ecs/Component.h#34</p>"},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#basecomponent_2","title":"BaseComponent","text":"<p>public void BaseComponent(BaseComponent &amp;&amp; rhs)</p> <p>Defined at src/rocky/ecs/Component.h#36</p>"},{"location":"api/ROCKY_NAMESPACE/BaseComponent/#operator_1","title":"operator=","text":"<p>public BaseComponent &amp; operator=(BaseComponent &amp;&amp; rhs)</p> <p>Defined at src/rocky/ecs/Component.h#41</p>"},{"location":"api/ROCKY_NAMESPACE/Cache/","title":"class Cache","text":"<p>Defined at src/rocky/Cache.h#19</p>"},{"location":"api/ROCKY_NAMESPACE/Cache/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Cache/#get","title":"get","text":"<p>public int get(const K &amp; k)</p>"},{"location":"api/ROCKY_NAMESPACE/Cache/#put","title":"put","text":"<p>public void put(const K &amp; k, const V &amp; v)</p>"},{"location":"api/ROCKY_NAMESPACE/Cache/#capacity","title":"capacity","text":"<p>public int capacity()</p>"},{"location":"api/ROCKY_NAMESPACE/Cache/#size","title":"size","text":"<p>public int size()</p>"},{"location":"api/ROCKY_NAMESPACE/Cache/#hits","title":"hits","text":"<p>public int hits()</p>"},{"location":"api/ROCKY_NAMESPACE/Cache/#misses","title":"misses","text":"<p>public int misses()</p>"},{"location":"api/ROCKY_NAMESPACE/Callback/","title":"class Callback","text":"<p>Defined at src/rocky/Callbacks.h#29</p>"},{"location":"api/ROCKY_NAMESPACE/Callback/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Callback/#operator","title":"operator()","text":"<p>public int operator()(int &amp;&amp; func)</p> <p>Defined at src/rocky/Callbacks.h#42</p> <p>Adds a callback function, and returns a subscription object. When the subscription object is destroyed the callback is deactivated.</p>"},{"location":"api/ROCKY_NAMESPACE/Callback/#remove","title":"remove","text":"<p>public void remove(int sub)</p> <p>Defined at src/rocky/Callbacks.h#51</p> <p>Remove a callback function associated with a subscription  returned from operator().</p>"},{"location":"api/ROCKY_NAMESPACE/Callback/#fire","title":"fire","text":"<p>public void fire(Args &amp;&amp;... args)</p> <p>Defined at src/rocky/Callbacks.h#63</p> <p>Executes all callback functions with the provided args</p>"},{"location":"api/ROCKY_NAMESPACE/Callback/#operator-bool","title":"operator bool","text":"<p>public _Bool operator bool()</p> <p>Defined at src/rocky/Callbacks.h#75</p> <p>True if there is at least one registered callback to fire</p>"},{"location":"api/ROCKY_NAMESPACE/CallbackSubs/","title":"struct CallbackSubs","text":"<p>Defined at src/rocky/Callbacks.h#22</p> <p>Collection of callback subscriptions.</p>"},{"location":"api/ROCKY_NAMESPACE/CallbackSubs/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/CallbackSubs/#operator","title":"operator+=","text":"<p>public CallbackSubs &amp; operator+=(int sub)</p> <p>Defined at src/rocky/Callbacks.h#23</p>"},{"location":"api/ROCKY_NAMESPACE/CelestialBody/","title":"struct CelestialBody","text":"<p>Defined at src/rocky/Ephemeris.h#18</p> <p>Location of a celestial body relative to the Earth.</p>"},{"location":"api/ROCKY_NAMESPACE/CelestialBody/#members","title":"Members","text":"<p>public int rightAscension</p> <p>public int declination</p> <p>public int latitude</p> <p>public int longitude</p> <p>public int altitude</p> <p>public int geocentric</p> <p>public int eci</p>"},{"location":"api/ROCKY_NAMESPACE/Content/","title":"struct Content","text":"<p>Defined at src/rocky/IOTypes.h#43</p> <p>Holds a generic content buffer and its type.</p>"},{"location":"api/ROCKY_NAMESPACE/Content/#members","title":"Members","text":"<p>public int type</p> <p>public int data</p> <p>public int timestamp</p>"},{"location":"api/ROCKY_NAMESPACE/ContextFactory/","title":"class ContextFactory","text":"<p>Defined at src/rocky/Context.h#63</p>"},{"location":"api/ROCKY_NAMESPACE/ContextFactory/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/ContextFactory/#create","title":"create","text":"<p>public int create(Args &amp;&amp;... args)</p> <p>Defined at src/rocky/Context.h#67</p>"},{"location":"api/ROCKY_NAMESPACE/ContextImpl/","title":"class ContextImpl","text":""},{"location":"api/ROCKY_NAMESPACE/CreateTileManifest/","title":"class CreateTileManifest","text":""},{"location":"api/ROCKY_NAMESPACE/DateTime/","title":"class DateTime","text":""},{"location":"api/ROCKY_NAMESPACE/Declutter/","title":"struct Declutter","text":"<p>Defined at src/rocky/ecs/Declutter.h#16</p> <p>ECS component whose precense on an entity indicates that the entity should particpate in decluttering.</p>"},{"location":"api/ROCKY_NAMESPACE/Declutter/#members","title":"Members","text":"<p>public float priority</p> <p>public int rect</p>"},{"location":"api/ROCKY_NAMESPACE/DisplayGeoPoint/","title":"struct DisplayGeoPoint","text":"<p>Defined at src/rocky/vsg/DisplayManager.h#20</p> <p>Return value for pointAtWindowCoords(viewer) method</p>"},{"location":"api/ROCKY_NAMESPACE/DisplayGeoPoint/#members","title":"Members","text":"<p>public int window</p> <p>public int view</p> <p>public int point</p>"},{"location":"api/ROCKY_NAMESPACE/DisplayManager/","title":"class DisplayManager","text":""},{"location":"api/ROCKY_NAMESPACE/Distance/","title":"class Distance","text":"<p>Defined at src/rocky/Units.h#270</p>"},{"location":"api/ROCKY_NAMESPACE/Distance/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Distance/#distance","title":"Distance","text":"<p>public void Distance()</p> <p>Defined at src/rocky/Units.h#272</p>"},{"location":"api/ROCKY_NAMESPACE/Distance/#distance_1","title":"Distance","text":"<p>public void Distance(double value, const int &amp; units)</p> <p>Defined at src/rocky/Units.h#273</p>"},{"location":"api/ROCKY_NAMESPACE/Distance/#distance_2","title":"Distance","text":"<p>public void Distance(const int &amp; str, const int &amp; defaultUnits)</p> <p>Defined at src/rocky/Units.h#274</p>"},{"location":"api/ROCKY_NAMESPACE/Duration/","title":"class Duration","text":"<p>Defined at src/rocky/Units.h#288</p>"},{"location":"api/ROCKY_NAMESPACE/Duration/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Duration/#duration","title":"Duration","text":"<p>public void Duration()</p> <p>Defined at src/rocky/Units.h#290</p>"},{"location":"api/ROCKY_NAMESPACE/Duration/#duration_1","title":"Duration","text":"<p>public void Duration(double value, const int &amp; units)</p> <p>Defined at src/rocky/Units.h#291</p>"},{"location":"api/ROCKY_NAMESPACE/Duration/#duration_2","title":"Duration","text":"<p>public void Duration(const int &amp; str, const int &amp; defaultUnits)</p> <p>Defined at src/rocky/Units.h#292</p>"},{"location":"api/ROCKY_NAMESPACE/ElevationLayer/","title":"class ElevationLayer","text":""},{"location":"api/ROCKY_NAMESPACE/ElevationLayerVector/","title":"class ElevationLayerVector","text":""},{"location":"api/ROCKY_NAMESPACE/ElevationSession/","title":"class ElevationSession","text":""},{"location":"api/ROCKY_NAMESPACE/EntityNode/","title":"class EntityNode","text":"<p>Defined at src/rocky/vsg/ecs/EntityNode.h#22</p>"},{"location":"api/ROCKY_NAMESPACE/EntityNode/#members","title":"Members","text":"<p>public int entities</p> <p>public _Bool autoDestroy</p> <p>public int registry</p>"},{"location":"api/ROCKY_NAMESPACE/EntityNode/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/EntityNode/#entitynode","title":"EntityNode","text":"<p>public void EntityNode(int &amp; reg)</p> <p>Defined at src/rocky/vsg/ecs/EntityNode.h#35</p> <p>Construct a new entity node (with EntityNode::create)</p> <p>reg The ECS registry to use when updating or destorying     the entities this node manages</p>"},{"location":"api/ROCKY_NAMESPACE/EntityNode/#entitynode_1","title":"~EntityNode","text":"<p>public void ~EntityNode()</p> <p>Defined at src/rocky/vsg/ecs/EntityNode.h#42</p> <p>Destruct the node and optionally destroy all entities</p>"},{"location":"api/ROCKY_NAMESPACE/EntityNode/#traverse","title":"traverse","text":"<p>public void traverse(int &amp; record)</p> <p>Defined at src/rocky/vsg/ecs/EntityNode.h#51</p> <p>Record traversal - update all entities with the frame count</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/","title":"struct Failure","text":"<p>Defined at src/rocky/Result.h#18</p> <p>General purpose failure object that can be used to report errors</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#members","title":"Members","text":"<p>public Type type</p> <p>public int message</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Failure/#failure","title":"Failure","text":"<p>public void Failure()</p> <p>Defined at src/rocky/Result.h#32</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#failure_1","title":"Failure","text":"<p>public void Failure(const Failure &amp; rhs)</p> <p>Defined at src/rocky/Result.h#33</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#failure_2","title":"Failure","text":"<p>public void Failure(Failure &amp;&amp; rhs)</p> <p>Defined at src/rocky/Result.h#34</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#operator","title":"operator=","text":"<p>public Failure &amp; operator=(const Failure &amp; rhs)</p> <p>Defined at src/rocky/Result.h#35</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#failure_3","title":"Failure","text":"<p>public void Failure(Type t)</p> <p>Defined at src/rocky/Result.h#37</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#failure_4","title":"Failure","text":"<p>public void Failure(int m)</p> <p>Defined at src/rocky/Result.h#38</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#failure_5","title":"Failure","text":"<p>public void Failure(Type t, int m)</p> <p>Defined at src/rocky/Result.h#39</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#string","title":"string","text":"<p>public int string()</p> <p>Defined at src/rocky/Result.h#41</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#operator_1","title":"operator()","text":"<p>public Failure &amp; operator()(int m)</p> <p>Defined at src/rocky/Result.h#55</p>"},{"location":"api/ROCKY_NAMESPACE/Failure/#enums","title":"Enums","text":"<p>| enum Type |</p> <p>--</p> <p>| ResourceUnavailable | | ServiceUnavailable | | ConfigurationError | | AssertionFailure | | OperationCanceled | | GeneralError |</p> <p>Defined at src/rocky/Result.h#20</p>"},{"location":"api/ROCKY_NAMESPACE/Feature/","title":"class Feature","text":""},{"location":"api/ROCKY_NAMESPACE/GeoExtent/","title":"class GeoExtent","text":""},{"location":"api/ROCKY_NAMESPACE/GeoImage/","title":"class GeoImage","text":""},{"location":"api/ROCKY_NAMESPACE/GeoPoint/","title":"class GeoPoint","text":""},{"location":"api/ROCKY_NAMESPACE/GeometryKey/","title":"struct GeometryKey","text":"<p>Defined at src/rocky/vsg/terrain/GeometryPool.h#41</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryKey/#members","title":"Members","text":"<p>public int lod</p> <p>public int tileY</p> <p>public _Bool patch</p> <p>public unsigned int size</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryKey/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/GeometryKey/#geometrykey","title":"GeometryKey","text":"<p>public void GeometryKey()</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#43</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryKey/#geometrykey_1","title":"GeometryKey","text":"<p>public void GeometryKey(const GeometryKey &amp; rhs)</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#52</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryKey/#operator","title":"operator&lt;","text":"<p>public _Bool operator&lt;(const GeometryKey &amp; rhs)</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#61</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryKey/#operator_1","title":"operator==","text":"<p>public _Bool operator==(const GeometryKey &amp; rhs)</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#73</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryKey/#operator_2","title":"operator!=","text":"<p>public _Bool operator!=(const GeometryKey &amp; rhs)</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#82</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/","title":"class GeometryPool","text":"<p>Defined at src/rocky/vsg/terrain/GeometryPool.h#116</p> <p>Pool of terrain tile geometries.</p> <p>In a geocentric map, every tile at a particular LOD and a particular latitudinal (north-south) extent shares exactly the same geometry; each tile is just shifted and rotated differently. Therefore we can use the same Geometry for all tiles that share the same LOD and same min/max latitude in a geocentric map. In a projected map, all tiles at a given LOD share the same geometry regardless of extent, so even more sharing is possible.</p> <p>This object creates and returns geometries based on TileKeys, sharing instances whenever possible.</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#members","title":"Members","text":"<p>public _Bool enabled</p> <p>public _Bool debug</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#records","title":"Records","text":"<p>Settings</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#geometrypool","title":"GeometryPool","text":"<p>public void GeometryPool(const int &amp; renderingSRS)</p> <p>Construct the geometry pool</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#getpooledgeometry","title":"getPooledGeometry","text":"<p>public int getPooledGeometry(const int &amp; tileKey, const Settings &amp; settings, int * state)</p> <p>Gets the Geometry associated with a tile key, creating a new one if necessary and storing it in the pool.</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#getnumskirtelements","title":"getNumSkirtElements","text":"<p>public int getNumSkirtElements(const Settings &amp; settings)</p> <p>The number of elements (incides) in the terrain skirt if applicable</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#clear","title":"clear","text":"<p>public void clear()</p> <p>Clear and reset the pool</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#sweep","title":"sweep","text":"<p>public void sweep(int &amp; context)</p> <p>Remove unused entries from the pool</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/#size","title":"size","text":"<p>public int size()</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#179</p> <p>Number of geometries in the pool</p> <p>inlines</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/","title":"class Heightfield","text":"<p>Defined at src/rocky/Heightfield.h#21</p> <p>Wrapper around an Image that provides heightfield functions.</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#members","title":"Members","text":"<p>public int image</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Heightfield/#create","title":"create","text":"<p>public Heightfield create(unsigned int cols, unsigned int rows)</p> <p>Defined at src/rocky/Heightfield.h#25</p> <p>Construct a new Image wrapped in a Heightfield API.</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#heightfield","title":"Heightfield","text":"<p>public void Heightfield(int in_image)</p> <p>Defined at src/rocky/Heightfield.h#30</p> <p>Wrap a Heightfield API around an existing image.</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#heightfield_1","title":"Heightfield","text":"<p>public void Heightfield(unsigned int cols, unsigned int rows)</p> <p>Defined at src/rocky/Heightfield.h#37</p> <p>Construct a new heightfield with given dimensions.</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#heightat","title":"heightAt","text":"<p>public float &amp; heightAt(unsigned int col, unsigned int row)</p> <p>Defined at src/rocky/Heightfield.h#79</p> <p>Mutable reference to the height value at col, row</p> <p>inline functions</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#heightat_1","title":"heightAt","text":"<p>public float heightAt(unsigned int col, unsigned int row)</p> <p>Defined at src/rocky/Heightfield.h#84</p> <p>Height value at col, row</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#heightatuv","title":"heightAtUV","text":"<p>public float heightAtUV(float u, float v)</p> <p>Defined at src/rocky/Heightfield.h#89</p> <p>Height value at normalized UV coordinates (0..1, 0..1)</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#foreachheight","title":"forEachHeight","text":"<p>public void forEachHeight(CALLABLE &amp;&amp; func)</p> <p>Defined at src/rocky/Heightfield.h#95</p> <p>Visits each height in the field with a user-provided function that takes \"float\" or \"float&amp;\" as an argument.</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#foreachheight_1","title":"forEachHeight","text":"<p>public void forEachHeight(CALLABLE &amp;&amp; func)</p> <p>Defined at src/rocky/Heightfield.h#103</p> <p>Visits each height in the field with a user-provided function that takes \"float\" as an argument.</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#fill","title":"fill","text":"<p>public void fill(float value)</p> <p>Defined at src/rocky/Heightfield.h#111</p> <p>Fill with a single height value</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#width","title":"width","text":"<p>public unsigned int width()</p> <p>Defined at src/rocky/Heightfield.h#68</p> <p>Width of the underlying image (in pixels)</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#height","title":"height","text":"<p>public unsigned int height()</p> <p>Defined at src/rocky/Heightfield.h#71</p> <p>Height of the underlying image (in pixels)</p>"},{"location":"api/ROCKY_NAMESPACE/Heightfield/#nodatavalue","title":"noDataValue","text":"<p>public float noDataValue()</p> <p>Defined at src/rocky/Heightfield.h#74</p> <p>No-data value of the underlying image</p>"},{"location":"api/ROCKY_NAMESPACE/Hyperlink/","title":"struct Hyperlink","text":"<p>Defined at src/rocky/URI.h#166</p> <p>A hyperlink is a text string with an associated URI.</p>"},{"location":"api/ROCKY_NAMESPACE/Hyperlink/#members","title":"Members","text":"<p>public int text</p> <p>public int href</p>"},{"location":"api/ROCKY_NAMESPACE/IOOptions/","title":"class IOOptions","text":""},{"location":"api/ROCKY_NAMESPACE/Icon/","title":"struct Icon","text":"<p>Defined at src/rocky/ecs/Icon.h#27</p> <p>Icon Component - an icon is a 2D billboard with a texture</p>"},{"location":"api/ROCKY_NAMESPACE/Icon/#members","title":"Members","text":"<p>public IconStyle style</p> <p>public int image</p>"},{"location":"api/ROCKY_NAMESPACE/IconInstanceGPU/","title":"struct IconInstanceGPU","text":"<p>Defined at src/rocky/vsg/ecs/IconSystem2.h#14</p> <p>Instance buffer as mirrored in the culling compute shader</p>"},{"location":"api/ROCKY_NAMESPACE/IconInstanceGPU/#members","title":"Members","text":"<p>public int proj</p> <p>public int modelview</p> <p>public int viewport</p> <p>public float rotation</p> <p>public float size</p> <p>public int texture_index</p> <p>public float[1] padding</p>"},{"location":"api/ROCKY_NAMESPACE/IconStyle/","title":"struct IconStyle","text":"<p>Defined at src/rocky/ecs/Icon.h#15</p> <p>Dynamic render settings for an icon.</p>"},{"location":"api/ROCKY_NAMESPACE/IconStyle/#members","title":"Members","text":"<p>public float size_pixels</p> <p>public float rotation_radians</p> <p>public float[2] padding</p>"},{"location":"api/ROCKY_NAMESPACE/ImGuiContextGroup/","title":"class ImGuiContextGroup","text":""},{"location":"api/ROCKY_NAMESPACE/Image/","title":"class Image","text":""},{"location":"api/ROCKY_NAMESPACE/ImageLayer/","title":"class ImageLayer","text":""},{"location":"api/ROCKY_NAMESPACE/Label/","title":"struct Label","text":"<p>Defined at src/rocky/ecs/Label.h#33</p> <p>Text label component</p>"},{"location":"api/ROCKY_NAMESPACE/Label/#members","title":"Members","text":"<p>public int text</p> <p>public LabelStyle style</p>"},{"location":"api/ROCKY_NAMESPACE/LabelStyle/","title":"struct LabelStyle","text":"<p>Defined at src/rocky/ecs/Label.h#13</p>"},{"location":"api/ROCKY_NAMESPACE/LabelStyle/#members","title":"Members","text":"<p>public int font</p> <p>public Align horizontalAlignment</p> <p>public Align verticalAlignment</p> <p>public float pointSize</p> <p>public float outlineSize</p> <p>public int pixelOffset</p>"},{"location":"api/ROCKY_NAMESPACE/LabelStyle/#enums","title":"Enums","text":"<p>| enum class Align |</p> <p>--</p> <p>| Left | | Center | | Right |</p> <p>Defined at src/rocky/ecs/Label.h#15</p>"},{"location":"api/ROCKY_NAMESPACE/Layer/","title":"class Layer","text":""},{"location":"api/ROCKY_NAMESPACE/LineStyle/","title":"struct LineStyle","text":"<p>Defined at src/rocky/ecs/Line.h#16</p> <p>Settings when constructing a similar set of line drawables Note, this structure is mirrored on the GPU so alignment rules apply!</p>"},{"location":"api/ROCKY_NAMESPACE/LineStyle/#members","title":"Members","text":"<p>public int color</p> <p>public float width</p> <p>public int stipple_pattern</p> <p>public int stipple_factor</p> <p>public float resolution</p> <p>public float depth_offset</p>"},{"location":"api/ROCKY_NAMESPACE/Map/","title":"class Map","text":""},{"location":"api/ROCKY_NAMESPACE/MapNode/","title":"class MapNode","text":""},{"location":"api/ROCKY_NAMESPACE/Mesh/","title":"struct Mesh","text":"<p>Defined at src/rocky/ecs/Mesh.h#42</p> <p>Triangle mesh component</p>"},{"location":"api/ROCKY_NAMESPACE/Mesh/#members","title":"Members","text":"<p>public _Bool writeDepth</p> <p>public _Bool cullBackfaces</p> <p>public int style</p> <p>public int triangles</p> <p>public int srs</p> <p>public int texture</p>"},{"location":"api/ROCKY_NAMESPACE/MeshEditor/","title":"class MeshEditor","text":""},{"location":"api/ROCKY_NAMESPACE/MeshStyle/","title":"struct MeshStyle","text":"<p>Defined at src/rocky/ecs/Mesh.h#17</p> <p>Render settings for a mesh.</p>"},{"location":"api/ROCKY_NAMESPACE/MeshStyle/#members","title":"Members","text":"<p>public int color</p> <p>public float depth_offset</p>"},{"location":"api/ROCKY_NAMESPACE/Mosaic/","title":"class Mosaic","text":"<p>Defined at src/rocky/Image.h#396</p> <p>Image subclass that keeps a list of the images used to assemble it. This in combination with the resident image cache speeds up assemble operations.</p>"},{"location":"api/ROCKY_NAMESPACE/Mosaic/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Mosaic/#mosaic","title":"Mosaic","text":"<p>public void Mosaic(int )</p> <p>Defined at src/rocky/Image.h#400</p> <p>Construct a new mosaic</p>"},{"location":"api/ROCKY_NAMESPACE/Mosaic/#mosaic_1","title":"Mosaic","text":"<p>public void Mosaic(const Mosaic &amp; rhs)</p> <p>Defined at src/rocky/Image.h#405</p> <p>Copy constructor</p>"},{"location":"api/ROCKY_NAMESPACE/Mosaic/#clone","title":"clone","text":"<p>public int clone()</p> <p>Defined at src/rocky/Image.h#408</p> <p>Clone this object</p>"},{"location":"api/ROCKY_NAMESPACE/Motion/","title":"struct Motion","text":"<p>Defined at src/rocky/ecs/Motion.h#15</p> <p>ECS Component applying motion in a cartesian space</p>"},{"location":"api/ROCKY_NAMESPACE/Motion/#members","title":"Members","text":"<p>public int velocity</p> <p>public int acceleration</p>"},{"location":"api/ROCKY_NAMESPACE/MotionGreatCircle/","title":"struct MotionGreatCircle","text":"<p>Defined at src/rocky/ecs/Motion.h#24</p> <p>ECS Component applying motion along a great circle</p> <p>Inherits from Motion</p>"},{"location":"api/ROCKY_NAMESPACE/MotionGreatCircle/#members","title":"Members","text":"<p>public int normalAxis</p>"},{"location":"api/ROCKY_NAMESPACE/MotionSystem/","title":"class MotionSystem","text":"<p>Defined at src/rocky/vsg/ecs/MotionSystem.h#17</p> <p>ECS System to process Motion components</p>"},{"location":"api/ROCKY_NAMESPACE/MotionSystem/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/MotionSystem/#motionsystem","title":"MotionSystem","text":"<p>public void MotionSystem(int &amp; r)</p> <p>Defined at src/rocky/vsg/ecs/MotionSystem.h#20</p>"},{"location":"api/ROCKY_NAMESPACE/MotionSystem/#create","title":"create","text":"<p>public int create(int &amp; r)</p> <p>Defined at src/rocky/vsg/ecs/MotionSystem.h#22</p>"},{"location":"api/ROCKY_NAMESPACE/MotionSystem/#update","title":"update","text":"<p>public void update(int &amp; context)</p> <p>Defined at src/rocky/vsg/ecs/MotionSystem.h#26</p> <p>Called periodically to update the transforms</p>"},{"location":"api/ROCKY_NAMESPACE/NodeGraph/","title":"struct NodeGraph","text":"<p>Defined at src/rocky/vsg/ecs/NodeGraph.h#13</p> <p>ECS component that holds a VSG node </p>"},{"location":"api/ROCKY_NAMESPACE/NodeGraph/#members","title":"Members","text":"<p>public int node</p>"},{"location":"api/ROCKY_NAMESPACE/PipelineUtils/","title":"struct PipelineUtils","text":"<p>Defined at src/rocky/vsg/PipelineState.h#20</p> <p>Utilities for helping to set up a graphics pipeline.</p>"},{"location":"api/ROCKY_NAMESPACE/PipelineUtils/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/PipelineUtils/#addviewdependentdata","title":"addViewDependentData","text":"<p>public void addViewDependentData(int shaderSet, int stageFlags)</p> <p>Defined at src/rocky/vsg/PipelineState.h#22</p>"},{"location":"api/ROCKY_NAMESPACE/PipelineUtils/#getviewdependentdescriptorsetlayout","title":"getViewDependentDescriptorSetLayout","text":"<p>public int getViewDependentDescriptorSetLayout()</p> <p>Defined at src/rocky/vsg/PipelineState.h#48</p>"},{"location":"api/ROCKY_NAMESPACE/PipelineUtils/#enableviewdependentdata","title":"enableViewDependentData","text":"<p>public void enableViewDependentData(int pipelineConfig)</p> <p>Defined at src/rocky/vsg/PipelineState.h#58</p>"},{"location":"api/ROCKY_NAMESPACE/Profile/","title":"class Profile","text":""},{"location":"api/ROCKY_NAMESPACE/ROCKY_EXPORT/","title":"class ROCKY_EXPORT","text":""},{"location":"api/ROCKY_NAMESPACE/ROCKY_VSG_INTERNAL/","title":"class ROCKY_VSG_INTERNAL","text":""},{"location":"api/ROCKY_NAMESPACE/Registry/","title":"class Registry","text":"<p>Defined at src/rocky/ecs/Registry.h#31</p> <p>Wraps the ECS registry with a read-write lock for thread safety.</p> <p>Take an exclusive (write) lock when calling entt::registry methods that alter the database, like:   - create, destroy, emplace, remove</p> <p>Take a shared (read) lock when calling entt::registry methods like:   - get, view   - and when updating components in place</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#records","title":"Records","text":"<p>Read</p> <p>Write</p> <p>Impl</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Registry/#read","title":"read","text":"<p>public Read read()</p> <p>Defined at src/rocky/ecs/Registry.h#57</p> <p>Returns a reference to a read-locked EnTT registry.</p> <p>A read-lock is appropriate for get(), view(), and in-place updates to existing components. The read-lock is scoped and will automatically release at the  closing of the usage scope.</p> <p>usage:   auto [lock, registry] = ecs_registry.read();</p> <p>return A tuple including a scoped shared lock and a reference to the underlying registry</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#write","title":"write","text":"<p>public Write write()</p> <p>Defined at src/rocky/ecs/Registry.h#70</p> <p>Returns a reference to a write-locked EnTT registry.</p> <p>A write-lock is appropritae for calls to create(), destroy(), clear(), emplace(). Note: you do not need a write lock for in-place component changes.</p> <p>usage:   auto [lock, registry] = ecs_registry.write();</p> <p>return A tuple including a scoped unique lock and a reference to the underlying registry</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#read_1","title":"read","text":"<p>public void read(CALLABLE &amp;&amp; func)</p> <p>Defined at src/rocky/ecs/Registry.h#77</p> <p>Convenience function to invoke a lambda with a read-locked registry reference. The signature of CALLABLE must match void(entt::registry&amp;).</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#write_1","title":"write","text":"<p>public void write(CALLABLE &amp;&amp; func)</p> <p>Defined at src/rocky/ecs/Registry.h#86</p> <p>Convenience function to invoke a lambda with a write-locked registry reference. The signature of CALLABLE must match void(entt::registry&amp;).</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#registry","title":"Registry","text":"<p>public void Registry()</p> <p>Defined at src/rocky/ecs/Registry.h#93</p> <p>Default constructor - empty registry</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#registry_1","title":"Registry","text":"<p>public void Registry(const Registry &amp; rhs)</p> <p>Defined at src/rocky/ecs/Registry.h#96</p> <p>Copy constructor</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/#create","title":"create","text":"<p>public Registry create()</p> <p>Defined at src/rocky/ecs/Registry.h#99</p> <p>Creator</p>"},{"location":"api/ROCKY_NAMESPACE/RenderImGuiContext/","title":"class RenderImGuiContext","text":""},{"location":"api/ROCKY_NAMESPACE/Result/","title":"class Result","text":"<p>Defined at src/rocky/Result.h#75</p> <p>Result union that can hold either a success value object or a failure object. Result has NO default constructor. If you want to hold onto a Failure state, Use the Status object instead.</p>"},{"location":"api/ROCKY_NAMESPACE/Result/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#result","title":"Result <p>public void Result(const Result &amp; rhs) <p>Defined at src/rocky/Result.h#79</p> <p>Copy construct</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#result_1","title":"Result <p>public void Result(const T &amp; good) <p>Defined at src/rocky/Result.h#82</p> <p>New successful result</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#result_2","title":"Result <p>public void Result(T &amp;&amp; good) <p>Defined at src/rocky/Result.h#86</p> <p>New successful result (moved)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#result_3","title":"Result <p>public void Result(const E &amp; bad) <p>Defined at src/rocky/Result.h#90</p> <p>New failure result</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#result_4","title":"Result <p>public void Result(E &amp;&amp; bad) <p>Defined at src/rocky/Result.h#94</p> <p>New failure result (moved)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#operator","title":"operator= <p>public Result &amp; operator=(const Result &amp; rhs) <p>Defined at src/rocky/Result.h#98</p> <p>Assignment operator (copy)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#operator_1","title":"operator= <p>public Result &amp; operator=(const E &amp; bad) <p>Defined at src/rocky/Result.h#109</p> <p>Assignment operator (failure)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#operator_2","title":"operator= <p>public Result &amp; operator=(const T &amp; good) <p>Defined at src/rocky/Result.h#114</p> <p>Assignment operator (success)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#ok","title":"ok <p>public _Bool ok()</p> <p>Defined at src/rocky/Result.h#120</p> <p>Did the result succeed?</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#failed","title":"failed <p>public _Bool failed()</p> <p>Defined at src/rocky/Result.h#124</p> <p>Did the result fail?</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#operator-bool","title":"operator bool <p>public _Bool operator bool()</p> <p>Defined at src/rocky/Result.h#128</p> <p>Did the result succeed?</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#operator-","title":"operator-&gt; <p>public T * operator-&gt;()</p> <p>Defined at src/rocky/Result.h#132</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#operator-_1","title":"operator-&gt; <p>public const T * operator-&gt;()</p> <p>Defined at src/rocky/Result.h#136</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#value","title":"value <p>public T &amp; value()</p> <p>Defined at src/rocky/Result.h#140</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#release","title":"release <p>public T release()</p> <p>Defined at src/rocky/Result.h#144</p> <p>Release ownership of the good result, leaving this object in an undefined state.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#value_1","title":"value <p>public const T &amp; value()</p> <p>Defined at src/rocky/Result.h#148</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Result/#error","title":"error <p>public const E &amp; error()</p> <p>Defined at src/rocky/Result.h#152</p> <p>Access the failure result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/Runtime/","title":"class Runtime","text":""},{"location":"api/ROCKY_NAMESPACE/SRSOperation/","title":"class SRSOperation","text":""},{"location":"api/ROCKY_NAMESPACE/ScreenSize/","title":"class ScreenSize","text":"<p>Defined at src/rocky/Units.h#302</p>"},{"location":"api/ROCKY_NAMESPACE/ScreenSize/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/ScreenSize/#screensize","title":"ScreenSize","text":"<p>public void ScreenSize()</p> <p>Defined at src/rocky/Units.h#304</p>"},{"location":"api/ROCKY_NAMESPACE/ScreenSize/#screensize_1","title":"ScreenSize","text":"<p>public void ScreenSize(double value, const int &amp; units)</p> <p>Defined at src/rocky/Units.h#305</p>"},{"location":"api/ROCKY_NAMESPACE/ScreenSize/#screensize_2","title":"ScreenSize","text":"<p>public void ScreenSize(const int &amp; str, const int &amp; defaultUnits)</p> <p>Defined at src/rocky/Units.h#306</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/","title":"class SendEventsToImGui","text":"<p>Defined at src/rocky/vsg/imgui/SendEventsToImGui.h#34</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#members","title":"Members","text":"<p>protected int t0</p> <p>protected _Bool _dragging</p> <p>protected int _vsg2imgui</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#sendeventstoimgui","title":"SendEventsToImGui","text":"<p>public void SendEventsToImGui()</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#apply","title":"apply","text":"<p>public void apply(int &amp; buttonPress)</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#sendeventstoimgui_1","title":"~SendEventsToImGui","text":"<p>protected void ~SendEventsToImGui()</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#_convertbutton","title":"_convertButton","text":"<p>protected int _convertButton(int button)</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#_initkeymap","title":"_initKeymap","text":"<p>protected void _initKeymap()</p>"},{"location":"api/ROCKY_NAMESPACE/SendEventsToImGui/#_updatemodifier","title":"_updateModifier","text":"<p>protected void _updateModifier(int &amp; io, int &amp; modifier, _Bool pressed)</p>"},{"location":"api/ROCKY_NAMESPACE/SharedGeometry/","title":"class SharedGeometry","text":"<p>Defined at src/rocky/vsg/terrain/GeometryPool.h#26</p>"},{"location":"api/ROCKY_NAMESPACE/SharedGeometry/#members","title":"Members","text":"<p>public _Bool hasConstraints</p> <p>public int verts</p> <p>public int normals</p> <p>public int uvs</p> <p>public int indexArray</p>"},{"location":"api/ROCKY_NAMESPACE/SharedGeometry/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/SharedGeometry/#sharedgeometry","title":"SharedGeometry","text":"<p>public void SharedGeometry()</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#29</p>"},{"location":"api/ROCKY_NAMESPACE/SharedGeometry/#empty","title":"empty","text":"<p>public _Bool empty()</p> <p>Defined at src/rocky/vsg/terrain/GeometryPool.h#31</p>"},{"location":"api/ROCKY_NAMESPACE/Speed/","title":"class Speed","text":"<p>Defined at src/rocky/Units.h#295</p>"},{"location":"api/ROCKY_NAMESPACE/Speed/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Speed/#speed","title":"Speed","text":"<p>public void Speed()</p> <p>Defined at src/rocky/Units.h#297</p>"},{"location":"api/ROCKY_NAMESPACE/Speed/#speed_1","title":"Speed","text":"<p>public void Speed(double value, const int &amp; units)</p> <p>Defined at src/rocky/Units.h#298</p>"},{"location":"api/ROCKY_NAMESPACE/Speed/#speed_2","title":"Speed","text":"<p>public void Speed(const int &amp; str, const int &amp; defaultUnits)</p> <p>Defined at src/rocky/Units.h#299</p>"},{"location":"api/ROCKY_NAMESPACE/Status/","title":"class Status","text":"<p>Defined at src/rocky/Result.h#170</p> <p>Status object that holds a potential Failure state. The default constructed Status represents a good state.</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Status/#status","title":"Status","text":"<p>public void Status()</p> <p>Defined at src/rocky/Result.h#174</p> <p>Construct a status indicating all is well</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#status_1","title":"Status","text":"<p>public void Status(const Failure &amp; f)</p> <p>Defined at src/rocky/Result.h#177</p> <p>Construct a status indicating failure</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#operator","title":"operator=","text":"<p>public Status &amp; operator=(const Failure &amp; f)</p> <p>Defined at src/rocky/Result.h#180</p> <p>Assign</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#operator_1","title":"operator=","text":"<p>public Status &amp; operator=(const Status &amp; rhs)</p> <p>Defined at src/rocky/Result.h#186</p> <p>Assign</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#error","title":"error","text":"<p>public const Failure &amp; error()</p> <p>Defined at src/rocky/Result.h#193</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#ok","title":"ok","text":"<p>public _Bool ok()</p> <p>Defined at src/rocky/Result.h#196</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#failed","title":"failed","text":"<p>public _Bool failed()</p> <p>Defined at src/rocky/Result.h#199</p>"},{"location":"api/ROCKY_NAMESPACE/Status/#clear","title":"clear","text":"<p>public void clear()</p> <p>Defined at src/rocky/Result.h#202</p>"},{"location":"api/ROCKY_NAMESPACE/StyleSheet/","title":"struct StyleSheet","text":"<p>Defined at src/rocky/vsg/ecs/FeatureView.h#21</p> <p>Style information for compiling and displaying Features</p>"},{"location":"api/ROCKY_NAMESPACE/StyleSheet/#members","title":"Members","text":"<p>public int line</p> <p>public int mesh</p> <p>public int mesh_function</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/","title":"class SurfaceNode","text":"<p>Defined at src/rocky/vsg/terrain/SurfaceNode.h#21</p> <p>SurfaceNode holds the geometry and transform information for one terrain tile surface.</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#members","title":"Members","text":"<p>public int worldBoundingSphere</p> <p>public int localbbox</p> <p>protected int _tilekey</p> <p>protected int _lastFramePassedCull</p> <p>protected int _elevationRaster</p> <p>protected int _elevationMatrix</p> <p>protected int _worldPoints</p> <p>protected _Bool _boundsDirty</p> <p>protected int _horizonCullingPoint</p> <p>protected _Bool _horizonCullingPoint_valid</p> <p>protected int _proxyGeom</p> <p>protected int _proxyVerts</p> <p>protected int _viewlocal</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#records","title":"Records","text":"<p>ViewLocalData</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#surfacenode","title":"SurfaceNode","text":"<p>public void SurfaceNode(const int &amp; tilekey, const int &amp; worldSRS)</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#setelevation","title":"setElevation","text":"<p>public void setElevation(int raster, const int &amp; scaleBias)</p> <p>Update the elevation raster associated with this tile</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#getelevationraster","title":"getElevationRaster","text":"<p>public int getElevationRaster()</p> <p>Defined at src/rocky/vsg/terrain/SurfaceNode.h#30</p> <p>Elevation raster representing this surface</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#getelevationmatrix","title":"getElevationMatrix","text":"<p>public const int &amp; getElevationMatrix()</p> <p>Defined at src/rocky/vsg/terrain/SurfaceNode.h#35</p> <p>Elevation matrix representing to this surface</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#isvisible","title":"isVisible","text":"<p>public _Bool isVisible(int &amp; rv)</p> <p>Defined at src/rocky/vsg/terrain/SurfaceNode.h#84</p> <p>World-space visibility check (includes bounding box and horizon checks)</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#recomputebound","title":"recomputeBound","text":"<p>public const int &amp; recomputeBound()</p> <p>Force a recompute of the bounding box and culling information</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/#traverse","title":"traverse","text":"<p>public void traverse(int &amp; v)</p> <p>Defined at src/rocky/vsg/terrain/SurfaceNode.h#51</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainDescriptors/","title":"struct TerrainDescriptors","text":"<p>Defined at src/rocky/vsg/terrain/TerrainState.h#19</p> <p>Holds any terrain-wide textures and uniforms.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainDescriptors/#members","title":"Members","text":"<p>public int data</p> <p>public int ubo</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainDescriptors/#records","title":"Records","text":"<p>Uniforms</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainEngine/","title":"class TerrainEngine","text":"<p>Defined at src/rocky/vsg/terrain/TerrainEngine.h#22</p> <p>Access to all terrain-specific logic, data, and settings associated with a Map.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainEngine/#members","title":"Members","text":"<p>public const int &amp; settings</p> <p>public int context</p> <p>public int map</p> <p>public int profile</p> <p>public int renderingSRS</p> <p>public int geometryPool</p> <p>public int &amp; stateFactory</p> <p>public int * host</p> <p>public int loadSchedulerName</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainEngine/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/TerrainEngine/#terrainengine","title":"TerrainEngine","text":"<p>public void TerrainEngine(int map, const int &amp; profile, const int &amp; renderingSRS, int &amp; stateFactory, int context, const int &amp; settings, int * host)</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainEngine/#createtile","title":"createTile","text":"<p>public int createTile(const int &amp; key, int parent)</p> <p>Create a single terrain tile.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainEngine/#update","title":"update","text":"<p>public _Bool update(int context)</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainNode/","title":"class TerrainNode","text":""},{"location":"api/ROCKY_NAMESPACE/TerrainSettings/","title":"class TerrainSettings","text":"<p>Defined at src/rocky/vsg/terrain/TerrainSettings.h#17</p> <p>Settings controlling the terrain surface rendering and paging.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainSettings/#members","title":"Members","text":"<p>public int tileSize</p> <p>public int minTileRangeFactor</p> <p>public int pixelError</p> <p>public int maxLevel</p> <p>public int minLevel</p> <p>public int tilePixelSize</p> <p>public int skirtRatio</p> <p>public int color</p> <p>public int concurrency</p> <p>public int wireOverlay</p> <p>public _Bool supportMultiThreadedRecord</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainSettings/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/TerrainSettings/#terrainsettings","title":"TerrainSettings","text":"<p>public void TerrainSettings()</p> <p>Defined at src/rocky/vsg/terrain/TerrainSettings.h#20</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainSettings/#from_json","title":"from_json","text":"<p>public int from_json(int JSON)</p> <p>deserialize from JSON</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainSettings/#to_json","title":"to_json","text":"<p>public int to_json()</p> <p>serialize to JSON</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileDescriptors/","title":"struct TerrainTileDescriptors","text":"<p>Defined at src/rocky/vsg/terrain/TerrainTileNode.h#47</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileDescriptors/#members","title":"Members","text":"<p>public int color</p> <p>public int elevation</p> <p>public int uniforms</p> <p>public int bind</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileDescriptors/#records","title":"Records","text":"<p>Uniforms</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileHost/","title":"class TerrainTileHost","text":"<p>Defined at src/rocky/vsg/terrain/TerrainTileHost.h#19</p> <p>Interface for terrain tiles to notify their host of their active state.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileHost/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/TerrainTileHost/#ping","title":"ping","text":"<p>public void ping(TerrainTileNode * tile, const TerrainTileNode * parent, int &amp; t)</p> <p>Tell the host that a tile is alive!</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileHost/#settings","title":"settings","text":"<p>public const TerrainSettings &amp; settings()</p> <p>Access terrain settings.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileHost/#tiles","title":"tiles","text":"<p>public TerrainTilePager &amp; tiles()</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileModel/","title":"struct TerrainTileModel","text":"<p>Defined at src/rocky/TerrainTileModel.h#23</p> <p>Data model backing an individual terrain tile.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileModel/#members","title":"Members","text":"<p>public struct ROCKY_EXPORT Tile</p> <p>public int revision</p> <p>public int matrix</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileNode/","title":"class TerrainTileNode","text":""},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/","title":"class TerrainTilePager","text":"<p>Defined at src/rocky/vsg/terrain/TerrainTilePager.h#22</p> <p>Keeps track of all the tiles resident in the terrain engine.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#members","title":"Members","text":"<p>public int _tiles</p> <p>public int _tracker</p> <p>public int _lastUpdate</p> <p>public int _mutex</p> <p>public int * _host</p> <p>public const TerrainSettings &amp; _settings</p> <p>public int _createChildren</p> <p>public int _loadData</p> <p>public int _mergeData</p> <p>public int _updateData</p> <p>public unsigned int _firstLOD</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#records","title":"Records","text":"<p>TileInfo</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#terraintilepager","title":"TerrainTilePager","text":"<p>public void TerrainTilePager(const TerrainSettings &amp; settings, int * host)</p> <p>Consturct the tile manager.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#terraintilepager_1","title":"~TerrainTilePager","text":"<p>public void ~TerrainTilePager()</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#ping","title":"ping","text":"<p>public void ping(int * tile, const int * parent, int &amp; )</p> <p>TerrainTileNode will call this to let us know that it's alive and that it may need something. ONLY call during record.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#size","title":"size","text":"<p>public int size()</p> <p>Defined at src/rocky/vsg/terrain/TerrainTilePager.h#59</p> <p>Number of tiles in the registry.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#releaseall","title":"releaseAll","text":"<p>public void releaseAll()</p> <p>Empty the registry, releasing all tiles.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#update","title":"update","text":"<p>public _Bool update(const int * fs, const int &amp; io, int engine)</p> <p>Update traversal.</p> <p>return true if any changes occurred.</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/#gettile","title":"getTile","text":"<p>public int getTile(const int &amp; key)</p> <p>Fetches a tile by its key.</p> <p>key TileKey for which to fetch a tile</p> <p>return The tile, if it exists</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileRenderModel/","title":"struct TerrainTileRenderModel","text":"<p>Defined at src/rocky/vsg/terrain/TerrainTileNode.h#61</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileRenderModel/#members","title":"Members","text":"<p>public int modelMatrix</p> <p>public TextureData color</p> <p>public TextureData elevation</p> <p>public TerrainTileDescriptors descriptors</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileRenderModel/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/TerrainTileRenderModel/#applyscalebias","title":"applyScaleBias","text":"<p>public void applyScaleBias(const int &amp; sb)</p> <p>Defined at src/rocky/vsg/terrain/TerrainTileNode.h#69</p>"},{"location":"api/ROCKY_NAMESPACE/Texture/","title":"struct Texture","text":"<p>Defined at src/rocky/vsg/ecs/MeshSystem.h#16</p> <p>Texture ECS component.</p>"},{"location":"api/ROCKY_NAMESPACE/Texture/#members","title":"Members","text":"<p>public int imageInfo</p>"},{"location":"api/ROCKY_NAMESPACE/TextureData/","title":"struct TextureData","text":"<p>Defined at src/rocky/vsg/terrain/TerrainTileNode.h#31</p>"},{"location":"api/ROCKY_NAMESPACE/TextureData/#members","title":"Members","text":"<p>public int name</p> <p>public int image</p> <p>public int matrix</p>"},{"location":"api/ROCKY_NAMESPACE/TileKey/","title":"class TileKey","text":""},{"location":"api/ROCKY_NAMESPACE/Transform/","title":"struct Transform","text":"<p>Defined at src/rocky/ecs/Transform.h#19</p> <p>Spatial transformation component. Create with   auto&amp; transform = registry.emplace(entity); <p>A Transform may be safely updated asynchronously.</p>"},{"location":"api/ROCKY_NAMESPACE/Transform/#members","title":"Members","text":"<p>public int position</p> <p>public int localMatrix</p> <p>public double radius</p> <p>public _Bool topocentric</p> <p>public _Bool horizonCulled</p> <p>public _Bool frustumCulled</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/","title":"struct TransformDetail","text":"<p>Defined at src/rocky/vsg/ecs/TransformDetail.h#31</p> <p>Per-VSG-view TransformViewData. This is an ECS component that the TransformSystem will automatically  attach to each entity that has a Transform component.</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#members","title":"Members","text":"<p>public int sync</p> <p>public int views</p> <p>public Cached cached</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#records","title":"Records","text":"<p>Cached</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#transformdetail","title":"TransformDetail","text":"<p>public void TransformDetail()</p> <p>Defined at src/rocky/vsg/ecs/TransformDetail.h#34</p> <p>Construct the object, and force the sychronization Transform to be dirty.</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#update","title":"update","text":"<p>public _Bool update(int &amp; )</p> <p>Updates the per-view data for the given record traversal. Return true if any updates were made due to a dirty Transform.</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#push","title":"push","text":"<p>public void push(int &amp; )</p> <p>Push the matrix associated with this transform onto the record stack</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#pop","title":"pop","text":"<p>public void pop(int &amp; )</p> <p>Pop a matrix recorded with push(...)</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/#visible","title":"visible","text":"<p>public _Bool visible(int &amp; )</p> <p>Defined at src/rocky/vsg/ecs/TransformDetail.h#72</p> <p>True if this transform is visible in the provided view state</p> <p>inline functions</p>"},{"location":"api/ROCKY_NAMESPACE/TransformViewDetail/","title":"struct TransformViewDetail","text":"<p>Defined at src/rocky/vsg/ecs/TransformDetail.h#17</p> <p>Internal data calculated from a Transform instance in the context of a specific camera.</p>"},{"location":"api/ROCKY_NAMESPACE/TransformViewDetail/#members","title":"Members","text":"<p>public int revision</p> <p>public int model</p> <p>public int proj</p> <p>public int modelview</p> <p>public int mvp</p> <p>public int viewport</p> <p>public _Bool passesCull</p>"},{"location":"api/ROCKY_NAMESPACE/Triangle_t/","title":"struct Triangle_t","text":"<p>Defined at src/rocky/ecs/Mesh.h#29</p> <p>A mesh triangle</p>"},{"location":"api/ROCKY_NAMESPACE/Triangle_t/#members","title":"Members","text":"<p>public VEC3[3] verts</p> <p>public VEC4[3] colors</p> <p>public VEC2[3] uvs</p> <p>public float[3] depthoffsets</p>"},{"location":"api/ROCKY_NAMESPACE/URIResponse/","title":"struct URIResponse","text":"<p>Defined at src/rocky/URI.h#16</p>"},{"location":"api/ROCKY_NAMESPACE/URIResponse/#members","title":"Members","text":"<p>public int content</p> <p>public int lastModifiedTime</p> <p>public int duration</p> <p>public _Bool fromCache</p> <p>public int jsonMetadata</p>"},{"location":"api/ROCKY_NAMESPACE/URIResponse/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/URIResponse/#uriresponse","title":"URIResponse","text":"<p>public void URIResponse(const int &amp; in_content)</p> <p>Defined at src/rocky/URI.h#24</p>"},{"location":"api/ROCKY_NAMESPACE/URIResponse/#uriresponse_1","title":"URIResponse","text":"<p>public void URIResponse(int &amp;&amp; in_content)</p> <p>Defined at src/rocky/URI.h#28</p>"},{"location":"api/ROCKY_NAMESPACE/VSGContextFactory/","title":"class VSGContextFactory","text":"<p>Defined at src/rocky/vsg/VSGContext.h#169</p> <p>Factory singleton for creating a VSGContext instance.</p>"},{"location":"api/ROCKY_NAMESPACE/VSGContextFactory/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/VSGContextFactory/#create","title":"create","text":"<p>public int create(Args &amp;&amp;... args)</p> <p>Defined at src/rocky/vsg/VSGContext.h#173</p>"},{"location":"api/ROCKY_NAMESPACE/Visibility/","title":"struct Visibility","text":"<p>Defined at src/rocky/ecs/Visibility.h#25</p> <p>Component representing an entity's visibility state across mulitple views.</p>"},{"location":"api/ROCKY_NAMESPACE/Visibility/#members","title":"Members","text":"<p>public int visible</p> <p>public int frame</p>"},{"location":"api/ROCKY_NAMESPACE/Visibility/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Visibility/#visibility","title":"Visibility","text":"<p>public void Visibility()</p> <p>Defined at src/rocky/ecs/Visibility.h#27</p>"},{"location":"api/ROCKY_NAMESPACE/Visibility/#enableframeagevisibility","title":"enableFrameAgeVisibility","text":"<p>public void enableFrameAgeVisibility(_Bool on)</p> <p>Defined at src/rocky/ecs/Visibility.h#40</p> <p>Activate the ability to control visibility based on visitation frame</p>"},{"location":"api/ROCKY_NAMESPACE/option/","title":"struct option","text":"<p>Defined at src/rocky/option.h#26</p> <p>A template for defining an object that is either set or unset and  can have a default value in its unset state.</p> <p>This differs from std::optional&lt;&gt; by supporting a \"default value\" in addition to the set/unset flag.</p> <p>You can default-initialize an optional in a class defition like so. In this example, the \"value\" property is unset with a default value of 123:</p> <p>struct MyClass {     option value { 123 };     option fvalue = 123.0f; };"},{"location":"api/ROCKY_NAMESPACE/option/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/option/#option","title":"option <p>public void option() <p>Defined at src/rocky/option.h#28</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#option_1","title":"option <p>public void option(const T &amp; defaultValue) <p>Defined at src/rocky/option.h#29</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#option_2","title":"option <p>public void option(const T &amp; defaultValue, const T &amp; value) <p>Defined at src/rocky/option.h#30</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#option_3","title":"option <p>public void option(const option &amp; rhs) <p>Defined at src/rocky/option.h#31</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator","title":"operator= <p>public option &amp; operator=(const option &amp; rhs) <p>Defined at src/rocky/option.h#32</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_1","title":"operator= <p>public const T &amp; operator=(const T &amp; value)</p> <p>Defined at src/rocky/option.h#33</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_2","title":"operator== <p>public _Bool operator==(const option &amp; rhs) <p>Defined at src/rocky/option.h#34</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_3","title":"operator!= <p>public _Bool operator!=(const option &amp; rhs) <p>Defined at src/rocky/option.h#35</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_4","title":"operator== <p>public _Bool operator==(const T &amp; value)</p> <p>Defined at src/rocky/option.h#36</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_5","title":"operator!= <p>public _Bool operator!=(const T &amp; value)</p> <p>Defined at src/rocky/option.h#37</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_6","title":"operator&gt; <p>public _Bool operator&gt;(const T &amp; value)</p> <p>Defined at src/rocky/option.h#38</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_7","title":"operator&gt;= <p>public _Bool operator&gt;=(const T &amp; value)</p> <p>Defined at src/rocky/option.h#39</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_8","title":"operator&lt; <p>public _Bool operator&lt;(const T &amp; value)</p> <p>Defined at src/rocky/option.h#40</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator_9","title":"operator&lt;= <p>public _Bool operator&lt;=(const T &amp; value)</p> <p>Defined at src/rocky/option.h#41</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#has_value","title":"has_value <p>public _Bool has_value()</p> <p>Defined at src/rocky/option.h#42</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#has_value_1","title":"has_value <p>public _Bool has_value(const T &amp; value)</p> <p>Defined at src/rocky/option.h#43</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#value","title":"value <p>public const T &amp; value()</p> <p>Defined at src/rocky/option.h#44</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#default_value","title":"default_value <p>public const T &amp; default_value()</p> <p>Defined at src/rocky/option.h#45</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#clear","title":"clear <p>public void clear()</p> <p>Defined at src/rocky/option.h#46</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#value_or","title":"value_or <p>public const T &amp; value_or(const T &amp; fallback)</p> <p>Defined at src/rocky/option.h#47</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#temp_copy","title":"temp_copy <p>public T temp_copy()</p> <p>Defined at src/rocky/option.h#48</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#mutable_value","title":"mutable_value <p>public T &amp; mutable_value()</p> <p>Defined at src/rocky/option.h#51</p> <p>gets a mutable reference, automatically setting</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#set_default","title":"set_default <p>public void set_default(T defValue)</p> <p>Defined at src/rocky/option.h#54</p> <p>sets a default value (without altering a set value)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator-const-type-parameter-0-0","title":"operator const type-parameter-0-0 * <p>public const T * operator const type-parameter-0-0 ()*</p> <p>Defined at src/rocky/option.h#57</p> <p>accessors</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator-","title":"operator-&gt; <p>public T * operator-&gt;()</p> <p>Defined at src/rocky/option.h#58</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator-_1","title":"operator-&gt; <p>public const T * operator-&gt;()</p> <p>Defined at src/rocky/option.h#59</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator-const-type-parameter-0-0_1","title":"operator const type-parameter-0-0 &amp; <p>public const T &amp; operator const type-parameter-0-0 &amp;()</p> <p>Defined at src/rocky/option.h#60</p>","text":""},{"location":"api/ROCKY_NAMESPACE/option/#operator-type-parameter-0-0-option","title":"operator type-parameter-0-0 option:: <p>public unspecified_bool_type operator type-parameter-0-0 option::() <p>Defined at src/rocky/option.h#69</p>","text":""},{"location":"api/ROCKY_NAMESPACE/GeometryPool/Settings/","title":"struct Settings","text":"<p>Defined at src/rocky/vsg/terrain/GeometryPool.h#124</p>"},{"location":"api/ROCKY_NAMESPACE/GeometryPool/Settings/#members","title":"Members","text":"<p>public int tileSize</p> <p>public float skirtRatio</p> <p>public _Bool morphing</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Impl/","title":"struct Impl","text":"<p>Defined at src/rocky/ecs/Registry.h#106</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Impl/#members","title":"Members","text":"<p>public int _mutex</p> <p>public int _registry</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Read/","title":"struct Read","text":"<p>Defined at src/rocky/ecs/Registry.h#34</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Read/#members","title":"Members","text":"<p>public int lock</p> <p>public int &amp; registry</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Read/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Registry/Read/#operator-","title":"operator-&gt;","text":"<p>public int * operator-&gt;()</p> <p>Defined at src/rocky/ecs/Registry.h#37</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Write/","title":"struct Write","text":"<p>Defined at src/rocky/ecs/Registry.h#40</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Write/#members","title":"Members","text":"<p>public int lock</p> <p>public int &amp; registry</p>"},{"location":"api/ROCKY_NAMESPACE/Registry/Write/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/Registry/Write/#operator-","title":"operator-&gt;","text":"<p>public int * operator-&gt;()</p> <p>Defined at src/rocky/ecs/Registry.h#43</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/ViewLocalData/","title":"struct ViewLocalData","text":"<p>Defined at src/rocky/vsg/terrain/SurfaceNode.h#77</p>"},{"location":"api/ROCKY_NAMESPACE/SurfaceNode/ViewLocalData/#members","title":"Members","text":"<p>public int horizon</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/","title":"namespace TMS","text":""},{"location":"api/ROCKY_NAMESPACE/TMS/#records","title":"Records","text":"<ul> <li>Options</li> <li>TileFormat</li> <li>TileSet</li> <li>ROCKY_EXPORT</li> <li>TileMapEntry</li> </ul>"},{"location":"api/ROCKY_NAMESPACE/TMS/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/TMS/#readtilemap","title":"readTileMap","text":"<p>int readTileMap(const int &amp; location, const int &amp; io)</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/#readtilemapentries","title":"readTileMapEntries","text":"<p>int readTileMapEntries(const int &amp; location, const int &amp; io)</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/#enums","title":"Enums","text":"<p>| enum class ProfileType |</p> <p>--</p> <p>| UNKNOWN | | GEODETIC | | MERCATOR | | LOCAL |</p> <p>Defined at src/rocky/TMS.h#41</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/Options/","title":"struct Options","text":"<p>Defined at src/rocky/TMS.h#19</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/Options/#members","title":"Members","text":"<p>public int uri</p> <p>public int format</p> <p>public int invertY</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/ROCKY_EXPORT/","title":"struct ROCKY_EXPORT","text":""},{"location":"api/ROCKY_NAMESPACE/TMS/TileFormat/","title":"struct TileFormat","text":"<p>Defined at src/rocky/TMS.h#26</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/TileFormat/#members","title":"Members","text":"<p>public unsigned int width</p> <p>public unsigned int height</p> <p>public int mimeType</p> <p>public int extension</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/TileMapEntry/","title":"struct TileMapEntry","text":"<p>Defined at src/rocky/TMS.h#94</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/TileMapEntry/#members","title":"Members","text":"<p>public int title</p> <p>public int href</p> <p>public int srs</p> <p>public int profile</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/TileSet/","title":"struct TileSet","text":"<p>Defined at src/rocky/TMS.h#34</p>"},{"location":"api/ROCKY_NAMESPACE/TMS/TileSet/#members","title":"Members","text":"<p>public int href</p> <p>public double unitsPerPixel</p> <p>public unsigned int order</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainDescriptors/Uniforms/","title":"struct Uniforms","text":"<p>Defined at src/rocky/vsg/terrain/TerrainState.h#21</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainDescriptors/Uniforms/#members","title":"Members","text":"<p>public _Bool wireOverlay</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileDescriptors/Uniforms/","title":"struct Uniforms","text":"<p>Defined at src/rocky/vsg/terrain/TerrainTileNode.h#49</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTileDescriptors/Uniforms/#members","title":"Members","text":"<p>public int elevation_matrix</p> <p>public int color_matrix</p> <p>public int model_matrix</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/TileInfo/","title":"struct TileInfo","text":"<p>Defined at src/rocky/vsg/terrain/TerrainTilePager.h#29</p>"},{"location":"api/ROCKY_NAMESPACE/TerrainTilePager/TileInfo/#members","title":"Members","text":"<p>public int tile</p> <p>public void * trackerToken</p> <p>public int dataLoader</p> <p>public int dataMerger</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/Cached/","title":"struct Cached","text":"<p>Defined at src/rocky/vsg/ecs/TransformDetail.h#47</p> <p>Cached global data</p>"},{"location":"api/ROCKY_NAMESPACE/TransformDetail/Cached/#members","title":"Members","text":"<p>public int world_srs</p> <p>public const int * world_ellipsoid</p> <p>public int pos_to_world</p> <p>public int horizon</p>"},{"location":"api/ROCKY_NAMESPACE/detail/","title":"namespace detail","text":""},{"location":"api/ROCKY_NAMESPACE/detail/#records","title":"Records","text":"<ul> <li>qualified_double</li> <li>SystemNodeBase</li> <li>Renderable</li> <li>BuildInfo</li> <li>BuildItem</li> <li>BuildBatch</li> <li>EntityNodeFactory</li> <li>SystemNode</li> <li>ROCKY_EXPORT</li> <li>ImGuiDispatcher</li> <li>FindNodeVisitor</li> <li>ForEachNodeVisitor</li> <li>RenderingState</li> </ul>"},{"location":"api/ROCKY_NAMESPACE/detail/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/#systemnode_on_construct","title":"SystemNode_on_construct","text":"<p>void SystemNode_on_construct(int &amp; r, int e)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#240</p> <p>called by registry.emplace()"},{"location":"api/ROCKY_NAMESPACE/detail/#systemnode_on_update","title":"SystemNode_on_update","text":"<p>void SystemNode_on_update(int &amp; r, int e)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#265</p> <p>invoked by registry.replace(), emplace_or_replace(), or patch()"},{"location":"api/ROCKY_NAMESPACE/detail/#systemnode_on_destroy","title":"SystemNode_on_destroy","text":"<p>void SystemNode_on_destroy(int &amp; r, int e)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#280</p> <p>invoked by registry.erase(), remove(), or registry.destroy(e)"},{"location":"api/ROCKY_NAMESPACE/detail/BuildBatch/","title":"struct BuildBatch","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#48</p> <p>Internal structure for a batch of BuildItems associated with a system</p>"},{"location":"api/ROCKY_NAMESPACE/detail/BuildBatch/#members","title":"Members","text":"<p>public int items</p> <p>public int system</p> <p>public int * context</p>"},{"location":"api/ROCKY_NAMESPACE/detail/BuildInfo/","title":"struct BuildInfo","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#33</p> <p>Information passed to a system when creating or updating a node</p>"},{"location":"api/ROCKY_NAMESPACE/detail/BuildInfo/#members","title":"Members","text":"<p>public int existing_node</p> <p>public int new_node</p>"},{"location":"api/ROCKY_NAMESPACE/detail/BuildItem/","title":"struct BuildItem","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#40</p> <p>Internal record for a component that needs building</p> <p>Inherits from BuildInfo</p>"},{"location":"api/ROCKY_NAMESPACE/detail/BuildItem/#members","title":"Members","text":"<p>public int entity</p> <p>public int version</p> <p>public int component</p>"},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/","title":"class EntityNodeFactory","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#56</p> <p>Internal utility for compiling nodes in a background thread</p>"},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/#members","title":"Members","text":"<p>public int buffers</p> <p>public int thread</p>"},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/#records","title":"Records","text":"<p>Buffers</p>"},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/#start","title":"start","text":"<p>public void start()</p> <p>Start the compiler's thread</p>"},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/#quit","title":"quit","text":"<p>public void quit()</p> <p>Stop the compiler's thread</p>"},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/#mergeresults","title":"mergeResults","text":"<p>public void mergeResults(int &amp; , int &amp; )</p> <p>Called during update, this will merge any compilation results into the scene</p>"},{"location":"api/ROCKY_NAMESPACE/detail/FindNodeVisitor/","title":"struct FindNodeVisitor","text":"<p>Defined at src/rocky/vsg/VSGUtils.h#21</p> <p>Visitor that finds the first node of a given type in a scene graph.</p>"},{"location":"api/ROCKY_NAMESPACE/detail/FindNodeVisitor/#members","title":"Members","text":"<p>public T * found</p>"},{"location":"api/ROCKY_NAMESPACE/detail/FindNodeVisitor/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/FindNodeVisitor/#apply","title":"apply","text":"<p>public void apply(int &amp; node)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#24</p>"},{"location":"api/ROCKY_NAMESPACE/detail/ForEachNodeVisitor/","title":"struct ForEachNodeVisitor","text":"<p>Defined at src/rocky/vsg/VSGUtils.h#35</p>"},{"location":"api/ROCKY_NAMESPACE/detail/ForEachNodeVisitor/#members","title":"Members","text":"<p>public int _func</p>"},{"location":"api/ROCKY_NAMESPACE/detail/ForEachNodeVisitor/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/ForEachNodeVisitor/#foreachnodevisitor","title":"ForEachNodeVisitor <p>public void ForEachNodeVisitor(int func) <p>Defined at src/rocky/vsg/VSGUtils.h#38</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/ForEachNodeVisitor/#apply","title":"apply <p>public void apply(int &amp; object)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#41</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/ImGuiDispatcher/","title":"class ImGuiDispatcher","text":"<p>Defined at src/rocky/vsg/imgui/ImGuiIntegration.h#140</p> <p>Node that lives under a RenderImGui node, and invokes any GUI renderers installed on the VSGContext (for example, the one used by the WidgetSystem).</p>"},{"location":"api/ROCKY_NAMESPACE/detail/ImGuiDispatcher/#members","title":"Members","text":"<p>public int * imguicontext</p> <p>public int vsgcontext</p>"},{"location":"api/ROCKY_NAMESPACE/detail/ImGuiDispatcher/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/ImGuiDispatcher/#imguidispatcher","title":"ImGuiDispatcher","text":"<p>public void ImGuiDispatcher(int * imguiContext_in, int vsgContext_in)</p> <p>Defined at src/rocky/vsg/imgui/ImGuiIntegration.h#146</p>"},{"location":"api/ROCKY_NAMESPACE/detail/ImGuiDispatcher/#traverse","title":"traverse","text":"<p>public void traverse(int &amp; record)</p> <p>Defined at src/rocky/vsg/imgui/ImGuiIntegration.h#150</p>"},{"location":"api/ROCKY_NAMESPACE/detail/ROCKY_EXPORT/","title":"class ROCKY_EXPORT","text":""},{"location":"api/ROCKY_NAMESPACE/detail/Renderable/","title":"struct Renderable","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#26</p> <p>Component that holds a VSG node and its revision (so it can be synchronized with the associated data model). One will typically attach a Renderable to BaseComponent::entity.</p>"},{"location":"api/ROCKY_NAMESPACE/detail/Renderable/#members","title":"Members","text":"<p>public int node</p> <p>public int revision</p>"},{"location":"api/ROCKY_NAMESPACE/detail/RenderingState/","title":"struct RenderingState","text":"<p>Defined at src/rocky/Rendering.h#15</p> <p>State information at the time of rendering a view.</p>"},{"location":"api/ROCKY_NAMESPACE/detail/RenderingState/#members","title":"Members","text":"<p>public int viewID</p> <p>public int frame</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/","title":"class SystemNode","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#99</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#members","title":"Members","text":"<p>protected int pipelines</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#records","title":"Records","text":"<p>Pipeline</p> <p>RenderLeaf</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#systemnode","title":"~SystemNode <p>public void ~SystemNode() <p>Defined at src/rocky/vsg/ecs/ECSNode.h#298</p> <p>Destructor</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#update","title":"update <p>public void update(int &amp; )</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#460</p> <p>looks for any new components that need VSG initialization</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#systemnode_1","title":"SystemNode <p>protected void SystemNode(int &amp; in_registry) <p>Defined at src/rocky/vsg/ecs/ECSNode.h#287</p> <p>Construct from a subclass</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#featuremask","title":"featureMask <p>protected int featureMask(const T &amp; t)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#120</p> <p>Feature mask for a specific component instance</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#compile","title":"compile <p>protected void compile(int &amp; )</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#349</p> <p>Hooks to expose systems and components to VSG visitors.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#traverse","title":"traverse <p>protected void traverse(int &amp; v)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#308</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#traverse_1","title":"traverse <p>protected void traverse(int &amp; v)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#329</p> <p>Pass-thru for VSG const visitors</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#parsereferencepoint","title":"parseReferencePoint <p>protected _Bool parseReferencePoint(const int &amp; point, int &amp; out_xform, DVEC3 &amp; out_offset)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#550</p> <p>Given a geospatial reference point, extract both an SRS op that will transform points from the component's SRS to the world SRS, and an offset for floating-point precision localization.</p> <p>point The reference point</p> <p>out_xform The SRS operation to transform points</p> <p>out_offset The offset to localize points</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#getpipelinelayout","title":"getPipelineLayout <p>protected int getPipelineLayout(const T &amp; )</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#578</p> <p>Fetches the correct layout for a component.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#createorupdatenode","title":"createOrUpdateNode <p>protected void createOrUpdateNode(T &amp; , BuildInfo &amp; , int &amp; )</p> <p>Subclass must implement this to create or update a node for a component.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#invokecreateorupdate","title":"invokeCreateOrUpdate <p>protected void invokeCreateOrUpdate(BuildItem &amp; item, int &amp; runtime)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#521</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/#mergecreateorupdateresults","title":"mergeCreateOrUpdateResults <p>protected void mergeCreateOrUpdateResults(int &amp; registry, BuildItem &amp; item, int &amp; runtime)</p> <p>Defined at src/rocky/vsg/ecs/ECSNode.h#528</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNodeBase/","title":"class SystemNodeBase","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#88</p> <p>VSG node representing an ECS system for the given component type (T). A system of this type asumes that \"T\" will have a Renderable component attached to \"T::entity\".</p> <p>This lives under a ECSNode node that will tick it each frame.</p> <p>T The component type</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNodeBase/#members","title":"Members","text":"<p>public EntityNodeFactory * factory</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNodeBase/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/SystemNodeBase/#invokecreateorupdate","title":"invokeCreateOrUpdate","text":"<p>public void invokeCreateOrUpdate(BuildItem &amp; item, int &amp; runtime)</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNodeBase/#mergecreateorupdateresults","title":"mergeCreateOrUpdateResults","text":"<p>public void mergeCreateOrUpdateResults(int &amp; , BuildItem &amp; item, int &amp; runtime)</p>"},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/","title":"class qualified_double","text":"<p>Defined at src/rocky/Units.h#176</p>"},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#members","title":"Members","text":"<p>protected double _value</p> <p>protected int _units</p>"},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#qualified_double","title":"qualified_double <p>public void qualified_double(double value, const int &amp; units) <p>Defined at src/rocky/Units.h#179</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#qualified_double_1","title":"qualified_double <p>public void qualified_double(const T &amp; rhs) <p>Defined at src/rocky/Units.h#181</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#qualified_double_2","title":"qualified_double <p>public void qualified_double(const int &amp; parseable, const int &amp; defaultUnits) <p>Defined at src/rocky/Units.h#184</p> <p>parses the qualified number from a parseable string (e.g., \"123km\")</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#set","title":"set <p>public void set(double value, const int &amp; units)</p> <p>Defined at src/rocky/Units.h#188</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator","title":"operator= <p>public T &amp; operator=(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#193</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_1","title":"operator+ <p>public T operator+(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#198</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator-","title":"operator- <p>public T operator-(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#204</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_2","title":"operator* <p>public T operator(double rhs)*</p> <p>Defined at src/rocky/Units.h#210</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_3","title":"operator/ <p>public T operator/(double rhs)</p> <p>Defined at src/rocky/Units.h#214</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_4","title":"operator== <p>public _Bool operator==(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#218</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_5","title":"operator!= <p>public _Bool operator!=(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#222</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_6","title":"operator&lt; <p>public _Bool operator&lt;(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#226</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_7","title":"operator&lt;= <p>public _Bool operator&lt;=(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#230</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_8","title":"operator&gt; <p>public _Bool operator&gt;(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#234</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#operator_9","title":"operator&gt;= <p>public _Bool operator&gt;=(const T &amp; rhs)</p> <p>Defined at src/rocky/Units.h#238</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#as","title":"as <p>public double as(const int &amp; convertTo)</p> <p>Defined at src/rocky/Units.h#242</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#to","title":"to <p>public T to(const int &amp; convertTo)</p> <p>Defined at src/rocky/Units.h#246</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#value","title":"value <p>public double value()</p> <p>Defined at src/rocky/Units.h#251</p> <p>Access the value part directly</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#units","title":"units <p>public const int &amp; units()</p> <p>Defined at src/rocky/Units.h#254</p> <p>Access the units part directly</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#to_string","title":"to_string <p>public int to_string()</p> <p>Defined at src/rocky/Units.h#256</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/qualified_double/#to_parseable_string","title":"to_parseable_string <p>public int to_parseable_string()</p> <p>Defined at src/rocky/Units.h#260</p>","text":""},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/Buffers/","title":"struct Buffers","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#69</p> <p>the data structures holding the queued jobs. 16 might be overkill :)</p>"},{"location":"api/ROCKY_NAMESPACE/detail/EntityNodeFactory/Buffers/#members","title":"Members","text":"<p>public int input</p> <p>public int output</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/Pipeline/","title":"struct Pipeline","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#126</p> <p>The configuration and command list for a graphics pipeline configured for a specific set of features. This setup  supports the creation of a unique pipeline for a feature set that's stored in an integer mask.</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/Pipeline/#members","title":"Members","text":"<p>public int config</p> <p>public int commands</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/RenderLeaf/","title":"struct RenderLeaf","text":"<p>Defined at src/rocky/vsg/ecs/ECSNode.h#164</p> <p>internal structure used when sorting components (by pipeline) for rendering</p>"},{"location":"api/ROCKY_NAMESPACE/detail/SystemNode/RenderLeaf/#members","title":"Members","text":"<p>public Renderable * renderable</p> <p>public int * transform_detail</p>"},{"location":"api/ROCKY_NAMESPACE/util/","title":"namespace util","text":""},{"location":"api/ROCKY_NAMESPACE/util/#records","title":"Records","text":"<ul> <li>vector_map_equal</li> <li>vector_map</li> <li>make_string</li> <li>ROCKY_EXPORT</li> <li>StreamCompressor</li> <li>ThreadLocal</li> <li>Gate</li> <li>ScopedGate</li> <li>SentryTracker</li> <li>PromiseOperation</li> <li>LambdaOperation</li> <li>SimpleCompiler</li> <li>ResidentCache</li> <li>LRUCache</li> </ul>"},{"location":"api/ROCKY_NAMESPACE/util/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/#linear_to_srgb","title":"linear_to_sRGB","text":"<p>float linear_to_sRGB(float c)</p> <p>Defined at src/rocky/Image.h#365</p>"},{"location":"api/ROCKY_NAMESPACE/util/#srgb_to_linear","title":"sRGB_to_linear","text":"<p>float sRGB_to_linear(float c)</p> <p>Defined at src/rocky/Image.h#377</p>"},{"location":"api/ROCKY_NAMESPACE/util/#isenvvarset","title":"isEnvVarSet","text":"<p>int isEnvVarSet(const char * name)</p> <p>Whther and environment variable is set at all</p>"},{"location":"api/ROCKY_NAMESPACE/util/#indexof","title":"indexOf","text":"<p>int indexOf(const T &amp; container, const V &amp; v)</p> <p>Defined at src/rocky/Utils.h#36</p> <p>Index of an element in a container</p>"},{"location":"api/ROCKY_NAMESPACE/util/#format","title":"format","text":"<p>int format(const int &amp; format, Args... args)</p> <p>Defined at src/rocky/Utils.h#44</p> <p>Replacement for sprintf https://stackoverflow.com/a/26221725/4218920</p>"},{"location":"api/ROCKY_NAMESPACE/util/#tolower","title":"toLower","text":"<p>char toLower(char c)</p> <p>Defined at src/rocky/Utils.h#66</p> <p>Character to lower case</p>"},{"location":"api/ROCKY_NAMESPACE/util/#tolower_1","title":"toLower","text":"<p>int toLower(int in)</p> <p>Defined at src/rocky/Utils.h#71</p> <p>String to lower case</p>"},{"location":"api/ROCKY_NAMESPACE/util/#tolowerinplace","title":"toLowerInPlace","text":"<p>int &amp; toLowerInPlace(int &amp; in)</p> <p>Defined at src/rocky/Utils.h#78</p> <p>String to lower case in situ</p>"},{"location":"api/ROCKY_NAMESPACE/util/#startswith","title":"startsWith","text":"<p>int startsWith(int ref, int pattern, _Bool caseSensitive)</p> <p>True is \"ref\" starts with \"pattern\"</p>"},{"location":"api/ROCKY_NAMESPACE/util/#endswith","title":"endsWith","text":"<p>int endsWith(int ref, int pattern, _Bool caseSensitive)</p> <p>True is \"ref\" ends with \"pattern\"</p>"},{"location":"api/ROCKY_NAMESPACE/util/#ciequals","title":"ciEquals","text":"<p>int ciEquals(int lhs, int rhs)</p> <p>Case-insensitive compare</p>"},{"location":"api/ROCKY_NAMESPACE/util/#setthreadname","title":"setThreadName","text":"<p>ROCKY_EXPORT setThreadName(const char * name)</p> <p>Sets the name of the current thread</p>"},{"location":"api/ROCKY_NAMESPACE/util/#lengthsquared","title":"lengthSquared","text":"<p>double lengthSquared(const T &amp; v)</p> <p>Defined at src/rocky/Math.h#258</p>"},{"location":"api/ROCKY_NAMESPACE/util/#deg2rad","title":"deg2rad","text":"<p>T deg2rad(T v)</p> <p>Defined at src/rocky/Math.h#263</p>"},{"location":"api/ROCKY_NAMESPACE/util/#rad2deg","title":"rad2deg","text":"<p>T rad2deg(T v)</p> <p>Defined at src/rocky/Math.h#268</p>"},{"location":"api/ROCKY_NAMESPACE/util/#step","title":"step","text":"<p>T step(const T &amp; edge, const T &amp; x)</p> <p>Defined at src/rocky/Math.h#273</p>"},{"location":"api/ROCKY_NAMESPACE/util/#clamp","title":"clamp","text":"<p>T clamp(const T &amp; x, const T &amp; lo, const T &amp; hi)</p> <p>Defined at src/rocky/Math.h#279</p>"},{"location":"api/ROCKY_NAMESPACE/util/#lerpstep","title":"lerpstep","text":"<p>T lerpstep(T lo, T hi, T x)</p> <p>Defined at src/rocky/Math.h#285</p>"},{"location":"api/ROCKY_NAMESPACE/util/#smoothstep","title":"smoothstep","text":"<p>T smoothstep(T lo, T hi, T x)</p> <p>Defined at src/rocky/Math.h#293</p>"},{"location":"api/ROCKY_NAMESPACE/util/#decel","title":"decel","text":"<p>T decel(T x)</p> <p>Defined at src/rocky/Math.h#301</p> <p>move closer to one</p>"},{"location":"api/ROCKY_NAMESPACE/util/#accel","title":"accel","text":"<p>T accel(T x)</p> <p>Defined at src/rocky/Math.h#308</p> <p>move closer to zero</p>"},{"location":"api/ROCKY_NAMESPACE/util/#threshold","title":"threshold","text":"<p>T threshold(T x, T thresh, T buf)</p> <p>Defined at src/rocky/Math.h#314</p>"},{"location":"api/ROCKY_NAMESPACE/util/#fract","title":"fract","text":"<p>T fract(T x)</p> <p>Defined at src/rocky/Math.h#322</p>"},{"location":"api/ROCKY_NAMESPACE/util/#unitremap","title":"unitremap","text":"<p>double unitremap(T a, T lo, T hi)</p> <p>Defined at src/rocky/Math.h#328</p>"},{"location":"api/ROCKY_NAMESPACE/util/#mix","title":"mix","text":"<p>T mix(const T &amp; a, const T &amp; b, float c)</p> <p>Defined at src/rocky/Math.h#334</p>"},{"location":"api/ROCKY_NAMESPACE/util/#dot2d","title":"dot2D","text":"<p>double dot2D(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/Math.h#340</p>"},{"location":"api/ROCKY_NAMESPACE/util/#dot3d","title":"dot3D","text":"<p>double dot3D(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/Math.h#346</p>"},{"location":"api/ROCKY_NAMESPACE/util/#distancesquared2d","title":"distanceSquared2D","text":"<p>double distanceSquared2D(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/Math.h#352</p>"},{"location":"api/ROCKY_NAMESPACE/util/#distancesquared3d","title":"distanceSquared3D","text":"<p>double distanceSquared3D(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/Math.h#360</p>"},{"location":"api/ROCKY_NAMESPACE/util/#distance2d","title":"distance2D","text":"<p>double distance2D(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/Math.h#369</p>"},{"location":"api/ROCKY_NAMESPACE/util/#distance3d","title":"distance3D","text":"<p>double distance3D(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/Math.h#375</p>"},{"location":"api/ROCKY_NAMESPACE/util/#square","title":"square","text":"<p>T square(const T &amp; a)</p> <p>Defined at src/rocky/Math.h#381</p>"},{"location":"api/ROCKY_NAMESPACE/util/#normalize","title":"normalize","text":"<p>T normalize(const T &amp; a)</p> <p>Defined at src/rocky/Math.h#387</p>"},{"location":"api/ROCKY_NAMESPACE/util/#align","title":"align","text":"<p>T align(T x, T multiple)</p> <p>Defined at src/rocky/Math.h#396</p> <p>Round integral x to the nearest multiple of \"multiple\" greater than or equal to x</p>"},{"location":"api/ROCKY_NAMESPACE/util/#equiv","title":"equiv","text":"<p>_Bool equiv(A x, B y, double epsilon)</p> <p>Defined at src/rocky/Math.h#404</p> <p>equal within a threshold</p>"},{"location":"api/ROCKY_NAMESPACE/util/#equiv_1","title":"equiv","text":"<p>_Bool equiv(A x, B y)</p> <p>Defined at src/rocky/Math.h#412</p> <p>equal within a default threshold</p>"},{"location":"api/ROCKY_NAMESPACE/util/#nextpowerof2","title":"nextPowerOf2","text":"<p>int nextPowerOf2(int x)</p> <p>Defined at src/rocky/Math.h#431</p>"},{"location":"api/ROCKY_NAMESPACE/util/#smallest","title":"smallest","text":"<p>double smallest(Args... a)</p> <p>Defined at src/rocky/Math.h#443</p>"},{"location":"api/ROCKY_NAMESPACE/util/#largest","title":"largest","text":"<p>double largest(Args... a)</p> <p>Defined at src/rocky/Math.h#452</p>"},{"location":"api/ROCKY_NAMESPACE/util/#is_identity","title":"is_identity","text":"<p>_Bool is_identity(const int &amp; m)</p> <p>Defined at src/rocky/Math.h#461</p>"},{"location":"api/ROCKY_NAMESPACE/util/#pre_mult","title":"pre_mult","text":"<p>M pre_mult(const M &amp; a, const M &amp; b)</p> <p>Defined at src/rocky/Math.h#471</p>"},{"location":"api/ROCKY_NAMESPACE/util/#quaternion_from_euler_radians","title":"quaternion_from_euler_radians","text":"<p>Q quaternion_from_euler_radians(double xaxis, double yaxis, double zaxis)</p> <p>Defined at src/rocky/Math.h#478</p> <p>Convert Euler angles, in radians, to a quaternion. https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles</p>"},{"location":"api/ROCKY_NAMESPACE/util/#quaternion_from_euler_degrees","title":"quaternion_from_euler_degrees","text":"<p>Q quaternion_from_euler_degrees(double xaxis, double yaxis, double zaxis)</p> <p>Defined at src/rocky/Math.h#502</p> <p>Convert Euler angles, in degrees, to a quaternion.</p>"},{"location":"api/ROCKY_NAMESPACE/util/#euler_radians_from_quaternion","title":"euler_radians_from_quaternion","text":"<p>int euler_radians_from_quaternion(const Q &amp; q)</p> <p>Defined at src/rocky/Math.h#510</p> <p>Convert a quat to Euler angles in radians. https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles</p>"},{"location":"api/ROCKY_NAMESPACE/util/#euler_degrees_from_quaternion","title":"euler_degrees_from_quaternion","text":"<p>int euler_degrees_from_quaternion(const Q &amp; q)</p> <p>Defined at src/rocky/Math.h#530</p> <p>Convert a quat to Euler angles in degrees.</p>"},{"location":"api/ROCKY_NAMESPACE/util/#quaternion_from_unscaled_matrix","title":"quaternion_from_unscaled_matrix","text":"<p>Q quaternion_from_unscaled_matrix(const M &amp; _mat)</p> <p>Defined at src/rocky/Math.h#543</p> <p>Extract the rotation component from a 4x4 matrix as a quaternion, assuming the matrix has a unit scale (i.e., unscaled). If you are unsure whether the matrix is scaled or not, use quaternion_from_matrix() instead.</p> <p>mat The input unscaled matrix.</p> <p>return The rotation component of the unscaled matrix.</p>"},{"location":"api/ROCKY_NAMESPACE/util/#quaternion_from_matrix","title":"quaternion_from_matrix","text":"<p>Q quaternion_from_matrix(const M &amp; mat)</p> <p>Defined at src/rocky/Math.h#608</p> <p>Extract the rotation component from a 4x4 matrix as a quaternion. This method will normalize any scaling factor found in the matrix. If you know your matrix is unscaled, call quaternion_from_unscaled_matrix() instead for better performance.</p> <p>mat The input matrix.</p> <p>return The rotation component of the matrix.</p>"},{"location":"api/ROCKY_NAMESPACE/util/#polygonsintersect2d","title":"polygonsIntersect2D","text":"<p>_Bool polygonsIntersect2D(ItA a_begin, ItA a_end, ItB b_begin, ItB b_end, double eps)</p> <p>Defined at src/rocky/Math.h#711</p>"},{"location":"api/ROCKY_NAMESPACE/util/#setthreadname_1","title":"setThreadName","text":"<p>int setThreadName(const int &amp; name)</p> <p>Sets the name of the current thread</p>"},{"location":"api/ROCKY_NAMESPACE/util/#fromvkpixelformat","title":"fromVkPixelFormat","text":"<p>int fromVkPixelFormat(int vkformat)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#337</p>"},{"location":"api/ROCKY_NAMESPACE/util/#tovkpixelformat","title":"toVkPixelFormat","text":"<p>int toVkPixelFormat(int format)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#356</p>"},{"location":"api/ROCKY_NAMESPACE/util/#find","title":"find","text":"<p>T * find(const int &amp; root)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#543</p> <p>Finds the first node of a given type in a scene graph.</p>"},{"location":"api/ROCKY_NAMESPACE/util/#foreach","title":"forEach","text":"<p>void forEach(const int &amp; root, int func)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#552</p> <p>Finds every node of a fiven type and runs a function against it</p>"},{"location":"api/ROCKY_NAMESPACE/util/Gate/","title":"class Gate","text":"<p>Defined at src/rocky/Threading.h#46</p> <p>Primitive that only allows one thread at a time access to a keyed resourse </p>"},{"location":"api/ROCKY_NAMESPACE/util/Gate/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/Gate/#gate","title":"Gate <p>public void Gate() <p>Defined at src/rocky/Threading.h#49</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/Gate/#lock","title":"lock <p>public void lock(const T &amp; key)</p> <p>Defined at src/rocky/Threading.h#52</p> <p>Lock key's gate</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/Gate/#unlock","title":"unlock <p>public void unlock(const T &amp; key)</p> <p>Defined at src/rocky/Threading.h#63</p> <p>Unlock the key's gate</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/","title":"class LRUCache","text":"<p>Defined at src/rocky/Cache.h#117</p> <p>LRUCache is a thread-safe implementation of a Least Recently Used (LRU) cache. It stores key-value pairs and evicts the least recently used item when the cache reaches its capacity. The cache is protected by a mutex to ensure thread safety. Adapted from https://www.geeksforgeeks.org/lru-cache-implementation Optimized by Copilot</p>"},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#lrucache","title":"LRUCache <p>public void LRUCache(int capacity) <p>Defined at src/rocky/Cache.h#131</p> <p>Constructs an LRUCache with the specified capacity.</p> <p>capacity_ The maximum number of items the cache can hold.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#setcapacity","title":"setCapacity <p>public void setCapacity(int value)</p> <p>Defined at src/rocky/Cache.h#138</p> <p>Sets the cache capacity and clears all current entries and statistics.</p> <p>value The new maximum number of items the cache can hold.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#get","title":"get <p>public int get(const K &amp; key)</p> <p>Defined at src/rocky/Cache.h#153</p> <p>Retrieves the value associated with the given key, if present. Moves the accessed item to the most recently used position.</p> <p>key The key to look up.</p> <p>return An optional containing the value if found, or empty if not found.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#put","title":"put <p>public void put(const K &amp; key, const V &amp; value)</p> <p>Defined at src/rocky/Cache.h#174</p> <p>Inserts or updates the value for the given key. If the key already exists, updates its value and moves it to the most recently used position. If the cache is full, evicts the least recently used item.</p> <p>key The key to insert or update.</p> <p>value The value to associate with the key.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#capacity","title":"capacity <p>public int capacity()</p> <p>Defined at src/rocky/Cache.h#197</p> <p>Returns the maximum number of items the cache can hold.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#size","title":"size <p>public int size()</p> <p>Defined at src/rocky/Cache.h#202</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#hits","title":"hits <p>public int hits()</p> <p>Defined at src/rocky/Cache.h#208</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#misses","title":"misses <p>public int misses()</p> <p>Defined at src/rocky/Cache.h#213</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LRUCache/#clear","title":"clear <p>public void clear()</p> <p>Defined at src/rocky/Cache.h#219</p> <p>Clears all entries from the cache and resets statistics.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/LambdaOperation/","title":"class LambdaOperation","text":"<p>Defined at src/rocky/vsg/VSGUtils.h#505</p> <p>vsg::Operation that executes a lambda function.</p>"},{"location":"api/ROCKY_NAMESPACE/util/LambdaOperation/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/LambdaOperation/#lambdaoperation","title":"LambdaOperation","text":"<p>public void LambdaOperation(int func)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#508</p>"},{"location":"api/ROCKY_NAMESPACE/util/LambdaOperation/#run","title":"run","text":"<p>public void run()</p> <p>Defined at src/rocky/vsg/VSGUtils.h#509</p>"},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/","title":"struct PromiseOperation","text":"<p>Defined at src/rocky/vsg/VSGUtils.h#460</p> <p>PromiseOperation combines a VSG operation with the Promise/Future construct so that a VSG operation can return a future result.</p> <p>Example: say you want to run something in VSG's update operations queue and get the result when it's done:</p> <p>auto op = PromiseOperation::create();   auto result = op-&gt;future();   vsg_viewer-&gt;updateOperations-&gt;add(op);   ... later, maybe during the next frame ...   auto result = result.get();"},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#members","title":"Members","text":"<p>public int _promise</p> <p>public int _func</p>"},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#canceled","title":"canceled","text":"<p>public _Bool canceled()</p> <p>Defined at src/rocky/vsg/VSGUtils.h#466</p> <p>Was the operation canceled or abandoned?</p>"},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#create","title":"create","text":"<p>public int create(const Args &amp;... args)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#472</p> <p>Static factory function</p>"},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#promiseoperation","title":"PromiseOperation <p>public void PromiseOperation(int func) <p>Defined at src/rocky/vsg/VSGUtils.h#478</p> <p>Construct a new promise operation with the function to execute</p> <p>func Function to execute</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#promiseoperation_1","title":"PromiseOperation <p>public void PromiseOperation(int promise, int func) <p>Defined at src/rocky/vsg/VSGUtils.h#484</p> <p>Construct a new promise operation with the function to execute</p> <p>promise User-supplied promise object to use</p> <p>func Function to execute</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#future","title":"future <p>public int future()</p> <p>Defined at src/rocky/vsg/VSGUtils.h#489</p> <p>Return the future result assocaited with this operation</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/PromiseOperation/#run","title":"run <p>public void run()</p> <p>Defined at src/rocky/vsg/VSGUtils.h#494</p> <p>Runs the operation (don't call this directly)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/ROCKY_EXPORT/","title":"class ROCKY_EXPORT","text":""},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/","title":"class ResidentCache","text":"<p>Defined at src/rocky/Cache.h#40</p> <p>ResidentCache cached std::weak_ptr's to shared objects. If the shared object is resideny anywhere in memory, the ResidentCache will be able to return it. K = KEY. Any object that can be hashed for an unordered_map. V = VALUE. Any object that is stored in a shared_ptr.</p>"},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#members","title":"Members","text":"<p>public int _lut</p> <p>public int _mutex</p> <p>public int _hits</p> <p>public int _misses</p> <p>public int _puts</p>"},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#get","title":"get","text":"<p>public int get(const K &amp; key)</p> <p>Defined at src/rocky/Cache.h#52</p>"},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#put","title":"put","text":"<p>public void put(const K &amp; key, const int &amp; value, const METADATA &amp; m)</p> <p>Defined at src/rocky/Cache.h#69</p>"},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#capacity","title":"capacity","text":"<p>public int capacity()</p> <p>Defined at src/rocky/Cache.h#87</p>"},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#size","title":"size","text":"<p>public int size()</p> <p>Defined at src/rocky/Cache.h#92</p>"},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#hits","title":"hits","text":"<p>public int hits()</p> <p>Defined at src/rocky/Cache.h#98</p>"},{"location":"api/ROCKY_NAMESPACE/util/ResidentCache/#misses","title":"misses","text":"<p>public int misses()</p> <p>Defined at src/rocky/Cache.h#103</p>"},{"location":"api/ROCKY_NAMESPACE/util/ScopedGate/","title":"struct ScopedGate","text":"<p>Defined at src/rocky/Threading.h#87</p> <p>Gate the locks for the duration of this object's scope</p>"},{"location":"api/ROCKY_NAMESPACE/util/ScopedGate/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/ScopedGate/#scopedgate","title":"ScopedGate <p>public void ScopedGate(Gate &amp; gate, const T &amp; key) <p>Defined at src/rocky/Threading.h#91</p> <p>Lock a gate based on key \"key\"</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/ScopedGate/#scopedgate_1","title":"ScopedGate <p>public void ScopedGate(Gate &amp; gate, const T &amp; key, CALLABLE &amp;&amp; pred) <p>Defined at src/rocky/Threading.h#102</p> <p>Lock a gate based on key \"key\" IFF the predicate is true, else it's a nop.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/ScopedGate/#scopedgate_2","title":"ScopedGate <p>public void ScopedGate(int &amp; gate, const T &amp; key) <p>Defined at src/rocky/Threading.h#111</p> <p>Lock a gate if the pointer to the gate is valid; else NOOP.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/ScopedGate/#scopedgate_3","title":"~ScopedGate <p>public void ~ScopedGate() <p>Defined at src/rocky/Threading.h#120</p> <p>End-of-scope destructor unlocks the gate</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/","title":"class SentryTracker","text":"<p>Defined at src/rocky/SentryTracker.h#21</p> <p>Tracks usage data by maintaining a sentry-blocked linked list. Each time a something calls \"emplace_or_update\" the corresponding record moves to the right of the sentry marker. After a cycle you can call flush to process all users that did not call update() in the that cycle and dispose of them.</p>"},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#members","title":"Members","text":"<p>public int _list</p> <p>public int _sentryptr</p> <p>public unsigned int _size</p>"},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#records","title":"Records","text":"<p>ListEntry</p>"},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#sentrytracker","title":"SentryTracker <p>public void SentryTracker() <p>Defined at src/rocky/SentryTracker.h#34</p> <p>Construct a new tracker.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#reset","title":"reset <p>public void reset()</p> <p>Defined at src/rocky/SentryTracker.h#41</p> <p>Resets the tracker to its initial state. Tracked objects are NOT disposed.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#emplace","title":"emplace <p>public void * emplace(const T &amp; data)</p> <p>Defined at src/rocky/SentryTracker.h#55</p> <p>Emplace a new item in the tracker, and receive a token to use when calling update().</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#update","title":"update <p>public void * update(void * token)</p> <p>Defined at src/rocky/SentryTracker.h#66</p> <p>Inform the tracker that the object associated with the token is still in use, and return a new token to replace the old one.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#emplace_or_update","title":"emplace_or_update <p>public void * emplace_or_update(const T &amp; data, void * token)</p> <p>Defined at src/rocky/SentryTracker.h#79</p> <p>Calls emplace if token is null, otherwise called update and returns a new token.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#flush","title":"flush <p>public void flush(unsigned int maxCount, CALLABLE &amp;&amp; dispose)</p> <p>Defined at src/rocky/SentryTracker.h#90</p> <p>Removes any tracked objects that were not updated since the last flush, and calls dispose() on each one.</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/#snapshot","title":"snapshot <p>public int snapshot()</p> <p>Defined at src/rocky/SentryTracker.h#125</p> <p>Snapshot of the object list (for debugging)</p>","text":""},{"location":"api/ROCKY_NAMESPACE/util/SimpleCompiler/","title":"class SimpleCompiler","text":"<p>Defined at src/rocky/vsg/VSGUtils.h#517</p> <p>Like vsg::CompileTraversal, but only for simple nodes and commands.</p>"},{"location":"api/ROCKY_NAMESPACE/util/SimpleCompiler/#members","title":"Members","text":"<p>public int &amp; context</p>"},{"location":"api/ROCKY_NAMESPACE/util/SimpleCompiler/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/SimpleCompiler/#simplecompiler","title":"SimpleCompiler","text":"<p>public void SimpleCompiler(int &amp; context_)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#521</p>"},{"location":"api/ROCKY_NAMESPACE/util/SimpleCompiler/#apply","title":"apply","text":"<p>public void apply(int &amp; node)</p> <p>Defined at src/rocky/vsg/VSGUtils.h#523</p>"},{"location":"api/ROCKY_NAMESPACE/util/StreamCompressor/","title":"class StreamCompressor","text":"<p>Defined at src/rocky/Utils.h#430</p> <p>Virtual interface for a stream compressor</p>"},{"location":"api/ROCKY_NAMESPACE/util/StreamCompressor/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/StreamCompressor/#compress","title":"compress","text":"<p>public _Bool compress(const int &amp; src, int &amp; out)</p> <p>Compress data to an output stream.</p> <p>src Data to compress</p> <p>out Stream to which to write compressed data</p> <p>return True upon success</p>"},{"location":"api/ROCKY_NAMESPACE/util/StreamCompressor/#decompress","title":"decompress","text":"<p>public _Bool decompress(int &amp; in, int &amp; out)</p> <p>Decompress data from a stream.</p> <p>src Data to decompress</p> <p>out Data in which to store decompressed data</p> <p>return True upon success</p>"},{"location":"api/ROCKY_NAMESPACE/util/ThreadLocal/","title":"struct ThreadLocal","text":"<p>Defined at src/rocky/Threading.h#23</p> <p>Per-thread data store </p>"},{"location":"api/ROCKY_NAMESPACE/util/ThreadLocal/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/ThreadLocal/#value","title":"value","text":"<p>public T &amp; value()</p> <p>Defined at src/rocky/Threading.h#25</p>"},{"location":"api/ROCKY_NAMESPACE/util/ThreadLocal/#clear","title":"clear","text":"<p>public void clear()</p> <p>Defined at src/rocky/Threading.h#34</p>"},{"location":"api/ROCKY_NAMESPACE/util/make_string/","title":"struct make_string","text":"<p>Defined at src/rocky/Utils.h#212</p> <p>Assembles and returns an inline string using a stream-like &lt;&lt; operator. Example:     std::string str = make_string() &lt;&lt; \"Hello, world \" &lt;&lt; variable;</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/","title":"struct vector_map","text":"<p>Defined at src/rocky/Utils.h#115</p> <p>A std::map-like map that uses a vector. This benchmarks much faster than std::map or std::unordered_map for small sets.</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#members","title":"Members","text":"<p>public EQUAL keys_equal</p> <p>public int _container</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#records","title":"Records","text":"<p>ENTRY</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#operator","title":"operator[]","text":"<p>public DATA &amp; operator</p> <p>Defined at src/rocky/Utils.h#128</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#emplace","title":"emplace","text":"<p>public DATA &amp; emplace(const KEY &amp; key, const DATA &amp; data)</p> <p>Defined at src/rocky/Utils.h#139</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#emplace_1","title":"emplace","text":"<p>public DATA &amp; emplace(const KEY &amp; key, DATA &amp;&amp; data)</p> <p>Defined at src/rocky/Utils.h#145</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#begin","title":"begin","text":"<p>public int begin()</p> <p>Defined at src/rocky/Utils.h#151</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#end","title":"end","text":"<p>public int end()</p> <p>Defined at src/rocky/Utils.h#152</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#begin_1","title":"begin","text":"<p>public int begin()</p> <p>Defined at src/rocky/Utils.h#153</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#end_1","title":"end","text":"<p>public int end()</p> <p>Defined at src/rocky/Utils.h#154</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#find","title":"find","text":"<p>public int find(const KEY &amp; key)</p> <p>Defined at src/rocky/Utils.h#156</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#find_1","title":"find","text":"<p>public int find(const KEY &amp; key)</p> <p>Defined at src/rocky/Utils.h#165</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#empty","title":"empty","text":"<p>public _Bool empty()</p> <p>Defined at src/rocky/Utils.h#174</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#clear","title":"clear","text":"<p>public void clear()</p> <p>Defined at src/rocky/Utils.h#176</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#erase","title":"erase","text":"<p>public void erase(const KEY &amp; key)</p> <p>Defined at src/rocky/Utils.h#178</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#indexof","title":"indexOf","text":"<p>public int indexOf(const KEY &amp; key)</p> <p>Defined at src/rocky/Utils.h#190</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#size","title":"size","text":"<p>public int size()</p> <p>Defined at src/rocky/Utils.h#199</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/#insert","title":"insert","text":"<p>public void insert(InputIterator a, InputIterator b)</p> <p>Defined at src/rocky/Utils.h#202</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map_equal/","title":"struct vector_map_equal","text":"<p>Defined at src/rocky/Utils.h#104</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map_equal/#functions","title":"Functions","text":""},{"location":"api/ROCKY_NAMESPACE/util/vector_map_equal/#operator","title":"operator()","text":"<p>public _Bool operator()(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/Utils.h#105</p>"},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/ListEntry/","title":"struct ListEntry","text":"<p>Defined at src/rocky/SentryTracker.h#24</p>"},{"location":"api/ROCKY_NAMESPACE/util/SentryTracker/ListEntry/#members","title":"Members","text":"<p>public T _data</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/ENTRY/","title":"struct ENTRY","text":"<p>Defined at src/rocky/Utils.h#117</p>"},{"location":"api/ROCKY_NAMESPACE/util/vector_map/ENTRY/#members","title":"Members","text":"<p>public KEY first</p> <p>public DATA second</p>"},{"location":"api/jobs/","title":"namespace jobs","text":"<p>weejobs is an API for scheduling a task to run in the background. Please read the README.md file for more information.</p>"},{"location":"api/jobs/#namespaces","title":"Namespaces","text":"<ul> <li>detail</li> </ul>"},{"location":"api/jobs/#records","title":"Records","text":"<ul> <li>cancelable</li> <li>jobgroup</li> <li>context</li> <li>jobpool</li> <li>future</li> <li>metrics</li> </ul>"},{"location":"api/jobs/#functions","title":"Functions","text":""},{"location":"api/jobs/#instance","title":"instance","text":"<p>detail::runtime &amp; instance()</p> <p>Access to the runtime singleton - users need not call this</p>"},{"location":"api/jobs/#get_pool","title":"get_pool","text":"<p>jobpool * get_pool(const int &amp; name, unsigned int pool_size)</p> <p>Defined at src/rocky/weejobs.h#747</p> <p>Returns the job pool with the given name, creating a new one if it doesn't  already exist. If you don't specify a name, a default pool is used.</p> <p>name Name of the pool to fetch (or create)</p> <p>pool_size Number of threads in the pool (if it's a new pool)</p> <p>return Pointer to the job pool</p>"},{"location":"api/jobs/#get_metrics","title":"get_metrics","text":"<p>metrics * get_metrics()</p> <p>Defined at src/rocky/weejobs.h#854</p> <p>Metrics for all job pool</p>"},{"location":"api/jobs/#shutdown","title":"shutdown","text":"<p>void shutdown()</p> <p>Defined at src/rocky/weejobs.h#860</p> <p>stop all threads, wait for them to exit, and shut down the system</p>"},{"location":"api/jobs/#alive","title":"alive","text":"<p>_Bool alive()</p> <p>Defined at src/rocky/weejobs.h#866</p> <p>Whether the weejobs runtime is still alive (has not been shutdown)</p>"},{"location":"api/jobs/#set_allow_work_stealing","title":"set_allow_work_stealing","text":"<p>void set_allow_work_stealing(_Bool value)</p> <p>Defined at src/rocky/weejobs.h#879</p> <p>Whether to allow jobpools to steal work from other jobpools when they are idle.</p>"},{"location":"api/jobs/cancelable/","title":"class cancelable","text":"<p>Defined at src/rocky/weejobs.h#57</p> <p>Interface for something that can be canceled</p>"},{"location":"api/jobs/cancelable/#functions","title":"Functions","text":""},{"location":"api/jobs/cancelable/#canceled","title":"canceled","text":"<p>public _Bool canceled()</p> <p>Defined at src/rocky/weejobs.h#60</p>"},{"location":"api/jobs/context/","title":"struct context","text":"<p>Defined at src/rocky/weejobs.h#268</p> <p>Context object you can pass to dispatch(...) to control aspects of how the background task is run.</p>"},{"location":"api/jobs/context/#members","title":"Members","text":"<p>public int name</p> <p>public class jobpool * pool</p> <p>public int priority</p> <p>public int group</p> <p>public _Bool can_cancel</p>"},{"location":"api/jobs/future/","title":"class future","text":"<p>Defined at src/rocky/weejobs.h#293</p> <p>Future holds the future result of an asynchronous operation.</p> <p>Usage:   Producer (usually an asynchronous function call) creates a future   (the promise of a future result) and immediately returns it. The Consumer   then performs other work, and eventually (or immediately) checks available()   for a result or canceled() for cancelation. If availabile() is true,   Consumer calls value() to fetch the valid result. <p>As long as at least two equivalent Future object (i.e. Futures pointing to the   same internal shared data) exist, the Future is considered valid. Once   that count goes to one, the Future is either available (the value is ready)   or empty (i.e., canceled or abandoned).</p> <p>Inherits from cancelable</p>"},{"location":"api/jobs/future/#records","title":"Records","text":"<p>shared_t</p>"},{"location":"api/jobs/future/#functions","title":"Functions","text":""},{"location":"api/jobs/future/#future","title":"future <p>public void future() <p>Defined at src/rocky/weejobs.h#311</p> <p>Default constructor</p>","text":""},{"location":"api/jobs/future/#future_1","title":"future <p>public void future(const future &amp; rhs) <p>Defined at src/rocky/weejobs.h#317</p> <p>Default copy constructor</p>","text":""},{"location":"api/jobs/future/#empty","title":"empty <p>public _Bool empty()</p> <p>Defined at src/rocky/weejobs.h#320</p> <p>True is this Future is unused and not connected to any other Future</p>","text":""},{"location":"api/jobs/future/#available","title":"available <p>public _Bool available()</p> <p>Defined at src/rocky/weejobs.h#326</p> <p>True if the promise was resolved and a result if available.</p>","text":""},{"location":"api/jobs/future/#working","title":"working <p>public _Bool working()</p> <p>Defined at src/rocky/weejobs.h#333</p> <p>True if a promise exists, but has not yet been resolved; Presumably the asynchronous task is still working.</p>","text":""},{"location":"api/jobs/future/#canceled","title":"canceled <p>public _Bool canceled()</p> <p>Defined at src/rocky/weejobs.h#339</p> <p>cancelable interface</p>","text":""},{"location":"api/jobs/future/#value","title":"value <p>public const T &amp; value()</p> <p>Defined at src/rocky/weejobs.h#347</p> <p>Deference the result object. Make sure you check available() to check that the future was actually resolved; otherwise you will just get the default object.</p>","text":""},{"location":"api/jobs/future/#operator-","title":"operator-&gt; <p>public const T * operator-&gt;()</p> <p>Defined at src/rocky/weejobs.h#353</p> <p>Dereference this object to const pointer to the result.</p>","text":""},{"location":"api/jobs/future/#has_value","title":"has_value <p>public _Bool has_value(const T &amp; arg)</p> <p>Defined at src/rocky/weejobs.h#359</p> <p>Result is available AND equal to the argument.</p>","text":""},{"location":"api/jobs/future/#release","title":"release <p>public T release()</p> <p>Defined at src/rocky/weejobs.h#366</p> <p>Same as value(), but if the result is available will reset the future before returning the result object.</p>","text":""},{"location":"api/jobs/future/#join","title":"join <p>public const T &amp; join()</p> <p>Defined at src/rocky/weejobs.h#377</p> <p>Blocks until the result becomes available or the future is abandoned; then returns the result object.</p>","text":""},{"location":"api/jobs/future/#join_1","title":"join <p>public const T &amp; join(const cancelable * p)</p> <p>Defined at src/rocky/weejobs.h#388</p> <p>Blocks until the result becomes available or the future is abandoned or a cancelation flag is set; then returns the result object. Be sure to check canceled() after calling join() to see if the return value is valid.</p>","text":""},{"location":"api/jobs/future/#join_2","title":"join <p>public const T &amp; join(const cancelable &amp; p)</p> <p>Defined at src/rocky/weejobs.h#400</p> <p>Blocks until the result becomes available or the future is abandoned or a cancelation flag is set; then returns the result object. Be sure to check canceled() after calling join() to see if the return value is valid.</p>","text":""},{"location":"api/jobs/future/#abandon","title":"abandon <p>public void abandon()</p> <p>Defined at src/rocky/weejobs.h#406</p> <p>Release reference to a promise, resetting this future to its default state</p>","text":""},{"location":"api/jobs/future/#reset","title":"reset <p>public void reset()</p> <p>Defined at src/rocky/weejobs.h#412</p> <p>synonym for abandon.</p>","text":""},{"location":"api/jobs/future/#resolve","title":"resolve <p>public void resolve(const T &amp; value)</p> <p>Defined at src/rocky/weejobs.h#418</p> <p>Resolve (fulfill) the promise with the provided result value.</p>","text":""},{"location":"api/jobs/future/#resolve_1","title":"resolve <p>public void resolve(T &amp;&amp; value)</p> <p>Defined at src/rocky/weejobs.h#426</p> <p>Resolve (fulfill) the promise with an rvalue</p>","text":""},{"location":"api/jobs/future/#resolve_2","title":"resolve <p>public void resolve()</p> <p>Defined at src/rocky/weejobs.h#434</p> <p>Resolve (fulfill) the promise with a default result</p>","text":""},{"location":"api/jobs/future/#refs","title":"refs <p>public unsigned int refs()</p> <p>Defined at src/rocky/weejobs.h#444</p> <p>The number of objects, including this one, that reference the shared container. If this method returns 1, that means this is the only object with access to the data. This method will never return zero.</p>","text":""},{"location":"api/jobs/future/#then_dispatch","title":"then_dispatch <p>public future then_dispatch(int func, const context &amp; con) <p>Add a continuation to this future. Instead of the functor returning a value, it will instead have the option of resolving the incoming future/promise object. This is useful for operations that have their own way of running asynchronous code. Note: for some reason when you use this variant you must specific the template argument, e.g. result.then(auto i, promise p)","text":""},{"location":"api/jobs/future/#then_dispatch_1","title":"then_dispatch <p>public void then_dispatch(int func, const context &amp; con)</p> <p>Add a continuation to this future. The functor only takes an input value and has no return value (fire and forget).</p>","text":""},{"location":"api/jobs/future/#then_dispatch_2","title":"then_dispatch <p>public future then_dispatch(F func, const context &amp; con) <p>Defined at src/rocky/weejobs.h#1072</p>","text":""},{"location":"api/jobs/jobgroup/","title":"struct jobgroup","text":"<p>Defined at src/rocky/weejobs.h#256</p> <p>Include a jobgroup in a context to group together multiple jobs. You can then call jobgroup::join() to wait for the whole group to finish.</p> <p>Inherits from semaphore</p>"},{"location":"api/jobs/jobgroup/#functions","title":"Functions","text":""},{"location":"api/jobs/jobgroup/#create","title":"create","text":"<p>public int create()</p> <p>Defined at src/rocky/weejobs.h#258</p>"},{"location":"api/jobs/jobpool/","title":"class jobpool","text":"<p>Defined at src/rocky/weejobs.h#511</p> <p>A priority-sorted collection of jobs that are running or waiting to run in a thread pool.</p>"},{"location":"api/jobs/jobpool/#members","title":"Members","text":"<p>public _Bool _can_steal_work</p> <p>public int _queue</p> <p>public int _queue_mutex</p> <p>public int _quit_mutex</p> <p>public int _target_concurrency</p> <p>public int _block</p> <p>public _Bool _done</p> <p>public int _threads</p> <p>public metrics_t _metrics</p>"},{"location":"api/jobs/jobpool/#records","title":"Records","text":"<p>metrics_t</p>"},{"location":"api/jobs/jobpool/#functions","title":"Functions","text":""},{"location":"api/jobs/jobpool/#jobpool","title":"~jobpool","text":"<p>public void ~jobpool()</p> <p>Defined at src/rocky/weejobs.h#530</p> <p>Destroy</p>"},{"location":"api/jobs/jobpool/#name","title":"name","text":"<p>public const int &amp; name()</p> <p>Defined at src/rocky/weejobs.h#536</p> <p>Name of this job pool</p>"},{"location":"api/jobs/jobpool/#metrics","title":"metrics","text":"<p>public metrics_t * metrics()</p> <p>Defined at src/rocky/weejobs.h#541</p>"},{"location":"api/jobs/jobpool/#set_concurrency","title":"set_concurrency","text":"<p>public void set_concurrency(unsigned int value)</p> <p>Defined at src/rocky/weejobs.h#547</p> <p>Set the concurrency of this job scheduler</p>"},{"location":"api/jobs/jobpool/#concurrency","title":"concurrency","text":"<p>public unsigned int concurrency()</p> <p>Defined at src/rocky/weejobs.h#558</p> <p>Get the target concurrency (thread count) </p>"},{"location":"api/jobs/jobpool/#set_can_steal_work","title":"set_can_steal_work","text":"<p>public void set_can_steal_work(_Bool value)</p> <p>Defined at src/rocky/weejobs.h#565</p> <p>Whether this job pool is allowed to steal work from other job pools when it is idle. Default = true.</p>"},{"location":"api/jobs/jobpool/#cancel_all","title":"cancel_all","text":"<p>public void cancel_all()</p> <p>Defined at src/rocky/weejobs.h#571</p> <p>Discard all queued jobs</p>"},{"location":"api/jobs/jobpool/#_dispatch_delegate","title":"_dispatch_delegate","text":"<p>public void _dispatch_delegate(int &amp; delegate, const context &amp; context)</p> <p>Defined at src/rocky/weejobs.h#583</p> <p>Schedule an asynchronous task on this scheduler Use job::dispatch to run jobs (usually no need to call this directly)</p> <p>delegate Function to execute</p> <p>context Job details</p>"},{"location":"api/jobs/jobpool/#_take_job","title":"_take_job","text":"<p>public _Bool _take_job(detail::job &amp; output, _Bool lock)</p> <p>Defined at src/rocky/weejobs.h#619</p> <p>removes the highest priority job from the queue and places it in output. Returns true if a job was taken, false if the queue was empty.</p>"},{"location":"api/jobs/jobpool/#jobpool_1","title":"jobpool","text":"<p>public void jobpool(const int &amp; name, unsigned int concurrency)</p> <p>Defined at src/rocky/weejobs.h#659</p> <p>Construct a new job pool. Do not call this directly - call getPool(name) instead.</p>"},{"location":"api/jobs/jobpool/#run","title":"run","text":"<p>public void run()</p> <p>Defined at src/rocky/weejobs.h#909</p> <p>Pulls queued jobs and runs them in whatever thread run() is called from. Runs in a loop until _done is set.</p>"},{"location":"api/jobs/jobpool/#start_threads","title":"start_threads","text":"<p>public void start_threads()</p> <p>Defined at src/rocky/weejobs.h#985</p> <p>Spawn all threads in this scheduler</p>"},{"location":"api/jobs/jobpool/#stop_threads","title":"stop_threads","text":"<p>public void stop_threads()</p> <p>Defined at src/rocky/weejobs.h#1006</p> <p>Signall all threads to stop</p>"},{"location":"api/jobs/jobpool/#join_threads","title":"join_threads","text":"<p>public void join_threads()</p> <p>Defined at src/rocky/weejobs.h#1029</p> <p>Wait for all threads to exit (after calling stop_threads)</p>"},{"location":"api/jobs/metrics/","title":"class metrics","text":"<p>Defined at src/rocky/weejobs.h#691</p>"},{"location":"api/jobs/metrics/#members","title":"Members","text":"<p>public int _pools</p>"},{"location":"api/jobs/metrics/#functions","title":"Functions","text":""},{"location":"api/jobs/metrics/#total_pending","title":"total_pending","text":"<p>public int total_pending()</p> <p>Defined at src/rocky/weejobs.h#1212</p> <p>Total number of pending jobs across all schedulers</p>"},{"location":"api/jobs/metrics/#total_running","title":"total_running","text":"<p>public int total_running()</p> <p>Defined at src/rocky/weejobs.h#1222</p> <p>Total number of running jobs across all schedulers</p>"},{"location":"api/jobs/metrics/#total_postprocessing","title":"total_postprocessing","text":"<p>public int total_postprocessing()</p> <p>Defined at src/rocky/weejobs.h#1232</p> <p>Total number of running jobs across all schedulers</p>"},{"location":"api/jobs/metrics/#total_canceled","title":"total_canceled","text":"<p>public int total_canceled()</p> <p>Defined at src/rocky/weejobs.h#1242</p> <p>Total number of canceled jobs across all schedulers</p>"},{"location":"api/jobs/metrics/#total","title":"total","text":"<p>public int total()</p> <p>Defined at src/rocky/weejobs.h#1252</p> <p>Total number of active jobs in the system</p>"},{"location":"api/jobs/metrics/#all","title":"all","text":"<p>public const int all()</p> <p>Defined at src/rocky/weejobs.h#710</p> <p>Gets a vector of all jobpool metrics structures.</p>"},{"location":"api/jobs/detail/","title":"namespace detail","text":"<p>Runtime singleton object; Declare with WEEJOBS_INSTANCE in one of your .cpp files.</p>"},{"location":"api/jobs/detail/#records","title":"Records","text":"<ul> <li>event</li> <li>semaphore</li> <li>job</li> <li>runtime</li> </ul>"},{"location":"api/jobs/detail/#functions","title":"Functions","text":""},{"location":"api/jobs/detail/#steal_job","title":"steal_job","text":"<p>_Bool steal_job(class jobpool * thief, detail::job &amp; stolen)</p> <p>Defined at src/rocky/weejobs.h#1044</p> <p>steal a job from another jobpool's queue (other than \"thief\").</p>"},{"location":"api/jobs/detail/event/","title":"struct event","text":"<p>Defined at src/rocky/weejobs.h#80</p> <p>Event with a binary signaled state, for multi-threaded sychronization.</p> <p>The event has two states:  \"set\" means that a call to wait() will not block;  \"unset\" means that calls to wait() will block until another thread calls set().</p> <p>The event starts out unset.</p> <p>Typical usage: Thread A creates Thread B to run asynchronous code. Thread A then calls wait(), which blocks Thread A. When Thread B is finished, it calls set(). Thread A then wakes up and continues execution.</p> <p>NOTE: ALL waiting threads will wake up when the Event is cleared.</p>"},{"location":"api/jobs/detail/event/#members","title":"Members","text":"<p>protected _Bool _set</p> <p>protected int _cond</p> <p>protected int _m</p>"},{"location":"api/jobs/detail/event/#functions","title":"Functions","text":""},{"location":"api/jobs/detail/event/#event","title":"event","text":"<p>public void event()</p> <p>Defined at src/rocky/weejobs.h#84</p> <p>Construct a new event</p>"},{"location":"api/jobs/detail/event/#event_1","title":"~event","text":"<p>public void ~event()</p> <p>Defined at src/rocky/weejobs.h#87</p> <p>DTOR</p>"},{"location":"api/jobs/detail/event/#wait","title":"wait","text":"<p>public _Bool wait()</p> <p>Defined at src/rocky/weejobs.h#94</p> <p>Block until the event is set, then return true.</p>"},{"location":"api/jobs/detail/event/#wait_1","title":"wait","text":"<p>public _Bool wait(T timeout)</p> <p>Defined at src/rocky/weejobs.h#106</p> <p>Block until the event is set or the timout expires. Return true if the event has set, otherwise false.</p>"},{"location":"api/jobs/detail/event/#waitandreset","title":"waitAndReset","text":"<p>public _Bool waitAndReset()</p> <p>Defined at src/rocky/weejobs.h#116</p> <p>Block until the event is set; then reset it.</p>"},{"location":"api/jobs/detail/event/#operator","title":"operator=","text":"<p>public void operator=(_Bool value)</p> <p>Defined at src/rocky/weejobs.h#125</p> <p>Set if true, reset if false.</p>"},{"location":"api/jobs/detail/event/#set","title":"set","text":"<p>public void set()</p> <p>Defined at src/rocky/weejobs.h#133</p> <p>Set the event state, causing any waiters to unblock.</p>"},{"location":"api/jobs/detail/event/#reset","title":"reset","text":"<p>public void reset()</p> <p>Defined at src/rocky/weejobs.h#144</p> <p>Reset (unset) the event state; new waiters will block until set() is called.</p>"},{"location":"api/jobs/detail/event/#isset","title":"isSet","text":"<p>public _Bool isSet()</p> <p>Defined at src/rocky/weejobs.h#150</p> <p>Whether the event state is set (waiters will not block).</p>"},{"location":"api/jobs/detail/event/#operator-bool","title":"operator bool","text":"<p>public _Bool operator bool()</p> <p>Defined at src/rocky/weejobs.h#155</p> <p>Synonymous with isSet()</p>"},{"location":"api/jobs/detail/job/","title":"struct job","text":"<p>Defined at src/rocky/weejobs.h#491</p>"},{"location":"api/jobs/detail/job/#members","title":"Members","text":"<p>public context ctx</p> <p>public int _delegate</p>"},{"location":"api/jobs/detail/job/#functions","title":"Functions","text":""},{"location":"api/jobs/detail/job/#operator","title":"operator&lt;","text":"<p>public _Bool operator&lt;(const job &amp; rhs)</p> <p>Defined at src/rocky/weejobs.h#496</p>"},{"location":"api/jobs/detail/runtime/","title":"struct runtime","text":"<p>Defined at src/rocky/weejobs.h#724</p>"},{"location":"api/jobs/detail/runtime/#members","title":"Members","text":"<p>public _Bool _alive</p> <p>public _Bool _stealing_allowed</p> <p>public int _pools_mutex</p> <p>public int _pools</p> <p>public metrics _metrics</p> <p>public int _set_thread_name</p>"},{"location":"api/jobs/detail/runtime/#functions","title":"Functions","text":""},{"location":"api/jobs/detail/runtime/#runtime","title":"runtime","text":"<p>public void runtime()</p> <p>Defined at src/rocky/weejobs.h#884</p>"},{"location":"api/jobs/detail/runtime/#runtime_1","title":"~runtime","text":"<p>public void ~runtime()</p> <p>Defined at src/rocky/weejobs.h#889</p>"},{"location":"api/jobs/detail/runtime/#shutdown","title":"shutdown","text":"<p>public void shutdown()</p> <p>Defined at src/rocky/weejobs.h#894</p>"},{"location":"api/jobs/detail/semaphore/","title":"class semaphore","text":"<p>Defined at src/rocky/weejobs.h#170</p> <p>Sempahore lets N users aquire it and then notifies when the count goes back down to zero.</p>"},{"location":"api/jobs/detail/semaphore/#functions","title":"Functions","text":""},{"location":"api/jobs/detail/semaphore/#acquire","title":"acquire","text":"<p>public void acquire()</p> <p>Defined at src/rocky/weejobs.h#174</p> <p>Acquire, increasing the usage count by one</p>"},{"location":"api/jobs/detail/semaphore/#operator","title":"operator++","text":"<p>public void operator++()</p> <p>Defined at src/rocky/weejobs.h#180</p>"},{"location":"api/jobs/detail/semaphore/#release","title":"release","text":"<p>public void release()</p> <p>Defined at src/rocky/weejobs.h#185</p> <p>Release, decreasing the usage count by one. When the count reaches zero, joiners will be notified and the semaphore will reset to its initial state.</p>"},{"location":"api/jobs/detail/semaphore/#operator-","title":"operator--","text":"<p>public void operator--()</p> <p>Defined at src/rocky/weejobs.h#193</p>"},{"location":"api/jobs/detail/semaphore/#reset","title":"reset","text":"<p>public void reset()</p> <p>Defined at src/rocky/weejobs.h#197</p> <p>Reset to initialize state; this will cause a join to occur even if no acquisitions have taken place.</p>"},{"location":"api/jobs/detail/semaphore/#count","title":"count","text":"<p>public int count()</p> <p>Defined at src/rocky/weejobs.h#205</p> <p>Current count in the semaphore</p>"},{"location":"api/jobs/detail/semaphore/#join","title":"join","text":"<p>public void join()</p> <p>Defined at src/rocky/weejobs.h#215</p> <p>Block until the semaphore count returns to zero. (It must first have left zero) Warning: this method will block forever if the count never reaches zero!</p>"},{"location":"api/jobs/detail/semaphore/#join_1","title":"join","text":"<p>public void join(cancelable * c)</p> <p>Defined at src/rocky/weejobs.h#225</p> <p>Block until the semaphore count returns to zero, or the operation is canceled. (It must first have left zero)</p>"},{"location":"api/jobs/future/shared_t/","title":"struct shared_t","text":"<p>Defined at src/rocky/weejobs.h#299</p> <p>internal structure to track references to the result One instance of this is shared among all Future instances created from the copy constructor.</p>"},{"location":"api/jobs/future/shared_t/#members","title":"Members","text":"<p>public int _obj</p> <p>public event _ev</p> <p>public int _continuation_mutex</p> <p>public int _continuation</p> <p>public int _continuation_ran</p>"},{"location":"api/jobs/jobpool/metrics_t/","title":"struct metrics_t","text":"<p>Defined at src/rocky/weejobs.h#517</p> <p>Metrics of a thread pool.</p>"},{"location":"api/jobs/jobpool/metrics_t/#members","title":"Members","text":"<p>public int name</p> <p>public int concurrency</p> <p>public int pending</p> <p>public int running</p> <p>public int postprocessing</p> <p>public int canceled</p> <p>public int total</p>"},{"location":"api/nlohmann/","title":"namespace nlohmann","text":""},{"location":"api/nlohmann/#records","title":"Records","text":"<ul> <li>adl_serializer</li> </ul>"},{"location":"api/nlohmann/adl_serializer/","title":"struct adl_serializer","text":"<p>Support the option&lt;&gt; construct https://github.com/nlohmann/json#how-do-i-convert-third-party-types</p>"},{"location":"api/rocky/","title":"namespace rocky","text":""},{"location":"api/rocky/#records","title":"Records","text":"<ul> <li>Object</li> <li>Inherit</li> <li>NamedFunction</li> <li>Failure</li> <li>Result</li> <li>Status</li> <li>json_parse_result</li> <li>CachePolicy</li> <li>Color</li> <li>Angle</li> <li>Distance</li> <li>Duration</li> <li>Hyperlink</li> <li>Speed</li> <li>ScreenSize</li> <li>Profile</li> <li>ProxySettings</li> <li>DateTime</li> <li>SRS</li> <li>GeoExtent</li> <li>GeoPoint</li> <li>URI</li> <li>Viewpoint</li> <li>IOOptions</li> </ul>"},{"location":"api/rocky/#functions","title":"Functions","text":""},{"location":"api/rocky/#json_pretty","title":"json_pretty","text":"<p>int json_pretty(int JSON)</p> <p>Pretty-print a json string.</p>"},{"location":"api/rocky/#createuid","title":"createUID","text":"<p>int createUID()</p> <p>Generate an application-wide unique identifier.</p>"},{"location":"api/rocky/#parse_json","title":"parse_json","text":"<p>json_parse_result parse_json(int input)</p> <p>Defined at src/rocky/json.h#63</p>"},{"location":"api/rocky/#set","title":"set","text":"<p>void set(int &amp; obj, const char * name, const T &amp; var)</p> <p>Defined at src/rocky/json.h#76</p>"},{"location":"api/rocky/#set_1","title":"set","text":"<p>void set(int &amp; obj, const T &amp; var)</p> <p>Defined at src/rocky/json.h#88</p>"},{"location":"api/rocky/#get_to","title":"get_to","text":"<p>_Bool get_to(const int &amp; obj, const char * name, T &amp; var)</p> <p>Defined at src/rocky/json.h#98</p>"},{"location":"api/rocky/#get_to_1","title":"get_to","text":"<p>void get_to(const int &amp; obj, T &amp; var)</p> <p>Defined at src/rocky/json.h#117</p>"},{"location":"api/rocky/#get_string","title":"get_string","text":"<p>int get_string(const int &amp; obj)</p> <p>Defined at src/rocky/json.h#126</p>"},{"location":"api/rocky/#to_string","title":"to_string","text":"<p>int to_string(const int &amp; obj)</p> <p>Defined at src/rocky/json.h#137</p>"},{"location":"api/rocky/#to_json","title":"to_json","text":"<p>void to_json(int &amp; j, const class CachePolicy &amp; obj)</p>"},{"location":"api/rocky/#from_json","title":"from_json","text":"<p>void from_json(const int &amp; j, class CachePolicy &amp; obj)</p>"},{"location":"api/rocky/#to_json_1","title":"to_json","text":"<p>void to_json(int &amp; j, const class Color &amp; obj)</p>"},{"location":"api/rocky/#from_json_1","title":"from_json","text":"<p>void from_json(const int &amp; j, class Color &amp; obj)</p>"},{"location":"api/rocky/#to_json_2","title":"to_json","text":"<p>void to_json(int &amp; j, const class Angle &amp; obj)</p>"},{"location":"api/rocky/#from_json_2","title":"from_json","text":"<p>void from_json(const int &amp; j, class Angle &amp; obj)</p>"},{"location":"api/rocky/#to_json_3","title":"to_json","text":"<p>void to_json(int &amp; j, const class Distance &amp; obj)</p>"},{"location":"api/rocky/#from_json_3","title":"from_json","text":"<p>void from_json(const int &amp; j, class Distance &amp; obj)</p>"},{"location":"api/rocky/#to_json_4","title":"to_json","text":"<p>void to_json(int &amp; j, const class Duration &amp; obj)</p>"},{"location":"api/rocky/#from_json_4","title":"from_json","text":"<p>void from_json(const int &amp; j, class Duration &amp; obj)</p>"},{"location":"api/rocky/#to_json_5","title":"to_json","text":"<p>void to_json(int &amp; j, const struct Hyperlink &amp; obj)</p>"},{"location":"api/rocky/#from_json_5","title":"from_json","text":"<p>void from_json(const int &amp; j, struct Hyperlink &amp; obj)</p>"},{"location":"api/rocky/#to_json_6","title":"to_json","text":"<p>void to_json(int &amp; j, const class Speed &amp; obj)</p>"},{"location":"api/rocky/#from_json_6","title":"from_json","text":"<p>void from_json(const int &amp; j, class Speed &amp; obj)</p>"},{"location":"api/rocky/#to_json_7","title":"to_json","text":"<p>void to_json(int &amp; j, const class ScreenSize &amp; obj)</p>"},{"location":"api/rocky/#from_json_7","title":"from_json","text":"<p>void from_json(const int &amp; j, class ScreenSize &amp; obj)</p>"},{"location":"api/rocky/#to_json_8","title":"to_json","text":"<p>void to_json(int &amp; j, const class Profile &amp; obj)</p>"},{"location":"api/rocky/#from_json_8","title":"from_json","text":"<p>void from_json(const int &amp; j, class Profile &amp; obj)</p>"},{"location":"api/rocky/#to_json_9","title":"to_json","text":"<p>void to_json(int &amp; j, const class ProxySettings &amp; obj)</p>"},{"location":"api/rocky/#from_json_9","title":"from_json","text":"<p>void from_json(const int &amp; j, class ProxySettings &amp; obj)</p>"},{"location":"api/rocky/#to_json_10","title":"to_json","text":"<p>void to_json(int &amp; j, const class DateTime &amp; obj)</p>"},{"location":"api/rocky/#from_json_10","title":"from_json","text":"<p>void from_json(const int &amp; j, class DateTime &amp; obj)</p>"},{"location":"api/rocky/#to_json_11","title":"to_json","text":"<p>void to_json(int &amp; j, const class SRS &amp; obj)</p>"},{"location":"api/rocky/#from_json_11","title":"from_json","text":"<p>void from_json(const int &amp; j, class SRS &amp; obj)</p>"},{"location":"api/rocky/#to_json_12","title":"to_json","text":"<p>void to_json(int &amp; j, const class GeoExtent &amp; obj)</p>"},{"location":"api/rocky/#from_json_12","title":"from_json","text":"<p>void from_json(const int &amp; j, class GeoExtent &amp; obj)</p>"},{"location":"api/rocky/#to_json_13","title":"to_json","text":"<p>void to_json(int &amp; j, const class GeoPoint &amp; obj)</p>"},{"location":"api/rocky/#from_json_13","title":"from_json","text":"<p>void from_json(const int &amp; j, class GeoPoint &amp; obj)</p>"},{"location":"api/rocky/#to_json_14","title":"to_json","text":"<p>void to_json(int &amp; j, const class URI &amp; obj)</p>"},{"location":"api/rocky/#from_json_14","title":"from_json","text":"<p>void from_json(const int &amp; j, class URI &amp; obj)</p>"},{"location":"api/rocky/#to_json_15","title":"to_json","text":"<p>void to_json(int &amp; j, const class Viewpoint &amp; obj)</p>"},{"location":"api/rocky/#from_json_15","title":"from_json","text":"<p>void from_json(const int &amp; j, class Viewpoint &amp; obj)</p>"},{"location":"api/rocky/#get_to_2","title":"get_to","text":"<p>_Bool get_to(const int &amp; obj, const char * name, URI &amp; var, const IOOptions &amp; io)</p>"},{"location":"api/rocky/#get_to_3","title":"get_to","text":"<p>_Bool get_to(const int &amp; obj, const char * name, int &amp; var, const IOOptions &amp; io)</p>"},{"location":"api/rocky/Angle/","title":"class Angle","text":""},{"location":"api/rocky/CachePolicy/","title":"class CachePolicy","text":""},{"location":"api/rocky/Color/","title":"class Color","text":""},{"location":"api/rocky/DateTime/","title":"class DateTime","text":""},{"location":"api/rocky/Distance/","title":"class Distance","text":""},{"location":"api/rocky/Duration/","title":"class Duration","text":""},{"location":"api/rocky/Failure/","title":"struct Failure","text":"<p>Defined at src/rocky/Result.h#18</p> <p>General purpose failure object that can be used to report errors</p>"},{"location":"api/rocky/Failure/#members","title":"Members","text":"<p>public Type type</p> <p>public int message</p>"},{"location":"api/rocky/Failure/#functions","title":"Functions","text":""},{"location":"api/rocky/Failure/#failure","title":"Failure","text":"<p>public void Failure()</p> <p>Defined at src/rocky/Result.h#32</p>"},{"location":"api/rocky/Failure/#failure_1","title":"Failure","text":"<p>public void Failure(const Failure &amp; rhs)</p> <p>Defined at src/rocky/Result.h#33</p>"},{"location":"api/rocky/Failure/#failure_2","title":"Failure","text":"<p>public void Failure(Failure &amp;&amp; rhs)</p> <p>Defined at src/rocky/Result.h#34</p>"},{"location":"api/rocky/Failure/#operator","title":"operator=","text":"<p>public Failure &amp; operator=(const Failure &amp; rhs)</p> <p>Defined at src/rocky/Result.h#35</p>"},{"location":"api/rocky/Failure/#failure_3","title":"Failure","text":"<p>public void Failure(Type t)</p> <p>Defined at src/rocky/Result.h#37</p>"},{"location":"api/rocky/Failure/#failure_4","title":"Failure","text":"<p>public void Failure(int m)</p> <p>Defined at src/rocky/Result.h#38</p>"},{"location":"api/rocky/Failure/#failure_5","title":"Failure","text":"<p>public void Failure(Type t, int m)</p> <p>Defined at src/rocky/Result.h#39</p>"},{"location":"api/rocky/Failure/#string","title":"string","text":"<p>public int string()</p> <p>Defined at src/rocky/Result.h#41</p>"},{"location":"api/rocky/Failure/#operator_1","title":"operator()","text":"<p>public Failure &amp; operator()(int m)</p> <p>Defined at src/rocky/Result.h#55</p>"},{"location":"api/rocky/Failure/#enums","title":"Enums","text":"<p>| enum Type |</p> <p>--</p> <p>| ResourceUnavailable | | ServiceUnavailable | | ConfigurationError | | AssertionFailure | | OperationCanceled | | GeneralError |</p> <p>Defined at src/rocky/Result.h#20</p>"},{"location":"api/rocky/GeoExtent/","title":"class GeoExtent","text":""},{"location":"api/rocky/GeoPoint/","title":"class GeoPoint","text":""},{"location":"api/rocky/Hyperlink/","title":"struct Hyperlink","text":""},{"location":"api/rocky/IOOptions/","title":"class IOOptions","text":"<p>specializations.</p>"},{"location":"api/rocky/Inherit/","title":"class Inherit","text":"<p>Defined at src/rocky/Common.h#72</p> <p>Base class for objects implementing the create() pattern that should only be held with a shared_ptr.private </p> <p>Inherits from PARENT</p>"},{"location":"api/rocky/Inherit/#functions","title":"Functions","text":""},{"location":"api/rocky/Inherit/#inherit","title":"Inherit <p>protected void Inherit(const Args &amp;... args) <p>Defined at src/rocky/Common.h#76</p>","text":""},{"location":"api/rocky/Inherit/#create","title":"create <p>public int create(Args &amp;&amp;... args)</p> <p>Defined at src/rocky/Common.h#88</p>","text":""},{"location":"api/rocky/Inherit/#cast","title":"cast <p>public int cast(int &amp; rhs)</p> <p>Defined at src/rocky/Common.h#92</p>","text":""},{"location":"api/rocky/Inherit/#cast_1","title":"cast <p>public int cast(const int &amp; rhs)</p> <p>Defined at src/rocky/Common.h#100</p>","text":""},{"location":"api/rocky/Inherit/#cast_2","title":"cast <p>public const int cast(const int &amp; rhs)</p> <p>Defined at src/rocky/Common.h#104</p>","text":""},{"location":"api/rocky/NamedFunction/","title":"struct NamedFunction","text":"<p>Defined at src/rocky/Common.h#110</p> <p>A comparable function that you can use in a container </p>"},{"location":"api/rocky/NamedFunction/#members","title":"Members","text":"<p>public void * id</p> <p>public int func</p>"},{"location":"api/rocky/NamedFunction/#functions","title":"Functions","text":""},{"location":"api/rocky/NamedFunction/#operator","title":"operator==","text":"<p>public _Bool operator==(const NamedFunction &amp; other)</p> <p>Defined at src/rocky/Common.h#114</p>"},{"location":"api/rocky/NamedFunction/#operator_1","title":"operator&lt;","text":"<p>public _Bool operator&lt;(const NamedFunction &amp; other)</p> <p>Defined at src/rocky/Common.h#115</p>"},{"location":"api/rocky/NamedFunction/#namedfunction","title":"NamedFunction","text":"<p>public void NamedFunction(void * in_in, int in_func)</p> <p>Defined at src/rocky/Common.h#116</p>"},{"location":"api/rocky/Object/","title":"class Object","text":"<p>Defined at src/rocky/Common.h#57</p> <p>Base class for anything using the \"Inherit\" patternprivate </p>"},{"location":"api/rocky/Object/#members","title":"Members","text":"<p>public int name</p>"},{"location":"api/rocky/Object/#functions","title":"Functions","text":""},{"location":"api/rocky/Object/#object","title":"Object","text":"<p>protected void Object()</p> <p>Defined at src/rocky/Common.h#60</p>"},{"location":"api/rocky/Object/#object_1","title":"~Object","text":"<p>public void ~Object()</p> <p>Defined at src/rocky/Common.h#65</p>"},{"location":"api/rocky/Profile/","title":"class Profile","text":""},{"location":"api/rocky/ProxySettings/","title":"class ProxySettings","text":""},{"location":"api/rocky/Result/","title":"class Result","text":"<p>Defined at src/rocky/Result.h#75</p> <p>Result union that can hold either a success value object or a failure object. Result has NO default constructor. If you want to hold onto a Failure state, Use the Status object instead.</p>"},{"location":"api/rocky/Result/#functions","title":"Functions","text":""},{"location":"api/rocky/Result/#result","title":"Result <p>public void Result(const Result &amp; rhs) <p>Defined at src/rocky/Result.h#79</p> <p>Copy construct</p>","text":""},{"location":"api/rocky/Result/#result_1","title":"Result <p>public void Result(const T &amp; good) <p>Defined at src/rocky/Result.h#82</p> <p>New successful result</p>","text":""},{"location":"api/rocky/Result/#result_2","title":"Result <p>public void Result(T &amp;&amp; good) <p>Defined at src/rocky/Result.h#86</p> <p>New successful result (moved)</p>","text":""},{"location":"api/rocky/Result/#result_3","title":"Result <p>public void Result(const E &amp; bad) <p>Defined at src/rocky/Result.h#90</p> <p>New failure result</p>","text":""},{"location":"api/rocky/Result/#result_4","title":"Result <p>public void Result(E &amp;&amp; bad) <p>Defined at src/rocky/Result.h#94</p> <p>New failure result (moved)</p>","text":""},{"location":"api/rocky/Result/#operator","title":"operator= <p>public Result &amp; operator=(const Result &amp; rhs) <p>Defined at src/rocky/Result.h#98</p> <p>Assignment operator (copy)</p>","text":""},{"location":"api/rocky/Result/#operator_1","title":"operator= <p>public Result &amp; operator=(const E &amp; bad) <p>Defined at src/rocky/Result.h#109</p> <p>Assignment operator (failure)</p>","text":""},{"location":"api/rocky/Result/#operator_2","title":"operator= <p>public Result &amp; operator=(const T &amp; good) <p>Defined at src/rocky/Result.h#114</p> <p>Assignment operator (success)</p>","text":""},{"location":"api/rocky/Result/#ok","title":"ok <p>public _Bool ok()</p> <p>Defined at src/rocky/Result.h#120</p> <p>Did the result succeed?</p>","text":""},{"location":"api/rocky/Result/#failed","title":"failed <p>public _Bool failed()</p> <p>Defined at src/rocky/Result.h#124</p> <p>Did the result fail?</p>","text":""},{"location":"api/rocky/Result/#operator-bool","title":"operator bool <p>public _Bool operator bool()</p> <p>Defined at src/rocky/Result.h#128</p> <p>Did the result succeed?</p>","text":""},{"location":"api/rocky/Result/#operator-","title":"operator-&gt; <p>public T * operator-&gt;()</p> <p>Defined at src/rocky/Result.h#132</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/rocky/Result/#operator-_1","title":"operator-&gt; <p>public const T * operator-&gt;()</p> <p>Defined at src/rocky/Result.h#136</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/rocky/Result/#value","title":"value <p>public T &amp; value()</p> <p>Defined at src/rocky/Result.h#140</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/rocky/Result/#release","title":"release <p>public T release()</p> <p>Defined at src/rocky/Result.h#144</p> <p>Release ownership of the good result, leaving this object in an undefined state.</p>","text":""},{"location":"api/rocky/Result/#value_1","title":"value <p>public const T &amp; value()</p> <p>Defined at src/rocky/Result.h#148</p> <p>Access a good result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/rocky/Result/#error","title":"error <p>public const E &amp; error()</p> <p>Defined at src/rocky/Result.h#152</p> <p>Access the failure result (be sure to check ok()/failed() first)</p>","text":""},{"location":"api/rocky/SRS/","title":"class SRS","text":""},{"location":"api/rocky/ScreenSize/","title":"class ScreenSize","text":""},{"location":"api/rocky/Speed/","title":"class Speed","text":""},{"location":"api/rocky/Status/","title":"class Status","text":"<p>Defined at src/rocky/Result.h#170</p> <p>Status object that holds a potential Failure state. The default constructed Status represents a good state.</p>"},{"location":"api/rocky/Status/#functions","title":"Functions","text":""},{"location":"api/rocky/Status/#status","title":"Status","text":"<p>public void Status()</p> <p>Defined at src/rocky/Result.h#174</p> <p>Construct a status indicating all is well</p>"},{"location":"api/rocky/Status/#status_1","title":"Status","text":"<p>public void Status(const Failure &amp; f)</p> <p>Defined at src/rocky/Result.h#177</p> <p>Construct a status indicating failure</p>"},{"location":"api/rocky/Status/#operator","title":"operator=","text":"<p>public Status &amp; operator=(const Failure &amp; f)</p> <p>Defined at src/rocky/Result.h#180</p> <p>Assign</p>"},{"location":"api/rocky/Status/#operator_1","title":"operator=","text":"<p>public Status &amp; operator=(const Status &amp; rhs)</p> <p>Defined at src/rocky/Result.h#186</p> <p>Assign</p>"},{"location":"api/rocky/Status/#error","title":"error","text":"<p>public const Failure &amp; error()</p> <p>Defined at src/rocky/Result.h#193</p>"},{"location":"api/rocky/Status/#ok","title":"ok","text":"<p>public _Bool ok()</p> <p>Defined at src/rocky/Result.h#196</p>"},{"location":"api/rocky/Status/#failed","title":"failed","text":"<p>public _Bool failed()</p> <p>Defined at src/rocky/Result.h#199</p>"},{"location":"api/rocky/Status/#clear","title":"clear","text":"<p>public void clear()</p> <p>Defined at src/rocky/Result.h#202</p>"},{"location":"api/rocky/URI/","title":"class URI","text":""},{"location":"api/rocky/Viewpoint/","title":"class Viewpoint","text":""},{"location":"api/rocky/json_parse_result/","title":"struct json_parse_result","text":"<p>Defined at src/rocky/json.h#54</p> <p>extent json with a status so we can check for parsing errors</p>"},{"location":"api/rocky/json_parse_result/#members","title":"Members","text":"<p>public Status status</p>"},{"location":"api/rocky/json_parse_result/#functions","title":"Functions","text":""},{"location":"api/rocky/json_parse_result/#json_parse_result","title":"json_parse_result","text":"<p>public void json_parse_result()</p> <p>Defined at src/rocky/json.h#57</p>"},{"location":"api/rocky/json_parse_result/#json_parse_result_1","title":"json_parse_result","text":"<p>public void json_parse_result(const int &amp; j)</p> <p>Defined at src/rocky/json.h#58</p>"},{"location":"api/rocky/json_parse_result/#json_parse_result_2","title":"json_parse_result","text":"<p>public void json_parse_result(const Failure &amp; f)</p> <p>Defined at src/rocky/json.h#59</p>"},{"location":"api/rocky/json_parse_result/#json_parse_result_3","title":"json_parse_result","text":"<p>public void json_parse_result(const int &amp; j, const Failure &amp; f)</p> <p>Defined at src/rocky/json.h#60</p>"},{"location":"api/std/","title":"namespace std","text":""},{"location":"api/std/#records","title":"Records","text":"<ul> <li>hash</li> </ul>"},{"location":"api/std/hash/","title":"struct hash","text":"<p>Defined at src/rocky/Profile.h#185</p> <p>std::hash specialization for Profile</p>"},{"location":"api/std/hash/#functions","title":"Functions","text":""},{"location":"api/std/hash/#operator","title":"operator()","text":"<p>public int operator()(const int &amp; value)</p> <p>Defined at src/rocky/Profile.h#186</p>"},{"location":"api/vsg/","title":"namespace vsg","text":""},{"location":"api/vsg/#records","title":"Records","text":"<ul> <li>Window</li> </ul>"},{"location":"api/vsg/Window/","title":"class Window","text":""},{"location":"api/weemesh/","title":"namespace weemesh","text":""},{"location":"api/weemesh/#records","title":"Records","text":"<ul> <li>vert_t</li> <li>segment_t</li> <li>triangle_t</li> <li>edge_t</li> <li>mesh_t</li> <li>node_t</li> <li>edgeset_t</li> <li>neighbors_t</li> <li>graph_t</li> </ul>"},{"location":"api/weemesh/#functions","title":"Functions","text":""},{"location":"api/weemesh/#equivalent","title":"equivalent","text":"<p>_Bool equivalent(T a, T b, T epsilon)</p> <p>Defined at src/rocky/weemesh.h#24</p>"},{"location":"api/weemesh/#clamp","title":"clamp","text":"<p>T clamp(T x, T lo, T hi)</p> <p>Defined at src/rocky/weemesh.h#31</p>"},{"location":"api/weemesh/#hash_value_unsigned","title":"hash_value_unsigned","text":"<p>int hash_value_unsigned(T val)</p> <p>Defined at src/rocky/weemesh.h#39</p> <p>Adapted from Boost - see boost license https://www.boost.org/users/license.html</p>"},{"location":"api/weemesh/#same_vert","title":"same_vert","text":"<p>_Bool same_vert(const vert_t &amp; a, const vert_t &amp; b, struct vert_t::value_type epsilon)</p> <p>Defined at src/rocky/weemesh.h#107</p>"},{"location":"api/weemesh/edge_t/","title":"struct edge_t","text":"<p>Defined at src/rocky/weemesh.h#242</p> <p>a mesh edge connecting to verts</p>"},{"location":"api/weemesh/edge_t/#members","title":"Members","text":"<p>public int _i0</p> <p>public int _i1</p>"},{"location":"api/weemesh/edge_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/edge_t/#edge_t","title":"edge_t","text":"<p>public void edge_t()</p> <p>Defined at src/rocky/weemesh.h#245</p>"},{"location":"api/weemesh/edge_t/#edge_t_1","title":"edge_t","text":"<p>public void edge_t(int i0, int i1)</p> <p>Defined at src/rocky/weemesh.h#246</p>"},{"location":"api/weemesh/edge_t/#operator","title":"operator==","text":"<p>public _Bool operator==(const edge_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#249</p> <p>don't care about direction</p>"},{"location":"api/weemesh/edge_t/#operator_1","title":"operator()","text":"<p>public int operator()(const edge_t &amp; edge)</p> <p>Defined at src/rocky/weemesh.h#258</p> <p>hash table function. This needs to combine i0 and i1 in  a commutative way, i.e., such that if _i0 and _i1 are  interchanged, they will return the same hash code.</p>"},{"location":"api/weemesh/edgeset_t/","title":"struct edgeset_t","text":"<p>Defined at src/rocky/weemesh.h#758</p> <p>collection of edges (optionally corresponding to marker data)</p>"},{"location":"api/weemesh/edgeset_t/#members","title":"Members","text":"<p>public int _edges</p>"},{"location":"api/weemesh/edgeset_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/edgeset_t/#edgeset_t","title":"edgeset_t","text":"<p>public void edgeset_t(const mesh_t &amp; mesh, int marker_mask)</p> <p>Defined at src/rocky/weemesh.h#762</p>"},{"location":"api/weemesh/edgeset_t/#add_triangle","title":"add_triangle","text":"<p>public void add_triangle(const triangle_t &amp; tri, const mesh_t &amp; mesh, int marker_mask)</p> <p>Defined at src/rocky/weemesh.h#771</p>"},{"location":"api/weemesh/edgeset_t/#point_on_any_edge_closest_to","title":"point_on_any_edge_closest_to","text":"<p>public _Bool point_on_any_edge_closest_to(const vert_t &amp; p, const mesh_t &amp; mesh, vert_t &amp; closest)</p> <p>Defined at src/rocky/weemesh.h#785</p>"},{"location":"api/weemesh/graph_t/","title":"struct graph_t","text":"<p>Defined at src/rocky/weemesh.h#828</p> <p>undirected graph representing a mesh (currently unused!)</p>"},{"location":"api/weemesh/graph_t/#members","title":"Members","text":"<p>public int _nodes</p> <p>public int _num_subgraphs</p>"},{"location":"api/weemesh/graph_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/graph_t/#graph_t","title":"graph_t","text":"<p>public void graph_t(const mesh_t &amp; mesh)</p> <p>Defined at src/rocky/weemesh.h#833</p>"},{"location":"api/weemesh/graph_t/#get_or_create_node","title":"get_or_create_node","text":"<p>public node_t &amp; get_or_create_node(int vertex_index)</p> <p>Defined at src/rocky/weemesh.h#843</p>"},{"location":"api/weemesh/graph_t/#add_triangle","title":"add_triangle","text":"<p>public void add_triangle(const triangle_t &amp; tri)</p> <p>Defined at src/rocky/weemesh.h#850</p>"},{"location":"api/weemesh/graph_t/#assign_graph_ids","title":"assign_graph_ids","text":"<p>public void assign_graph_ids()</p> <p>Defined at src/rocky/weemesh.h#866</p>"},{"location":"api/weemesh/graph_t/#assign_graph_ids_1","title":"assign_graph_ids","text":"<p>public _Bool assign_graph_ids(node_t &amp; node, int graphid)</p> <p>Defined at src/rocky/weemesh.h#877</p>"},{"location":"api/weemesh/graph_t/#get_num_subgraphs","title":"get_num_subgraphs","text":"<p>public int get_num_subgraphs()</p> <p>Defined at src/rocky/weemesh.h#892</p>"},{"location":"api/weemesh/graph_t/#get_hull","title":"get_hull","text":"<p>public void get_hull(int graphid, const mesh_t &amp; mesh, int &amp; hull)</p> <p>Defined at src/rocky/weemesh.h#898</p> <p>attempt to find the concave hull by walking the outside of subgraph.</p>"},{"location":"api/weemesh/mesh_t/","title":"struct mesh_t","text":"<p>Defined at src/rocky/weemesh.h#264</p> <p>connected mesh of triangles, verts, and associated markers</p>"},{"location":"api/weemesh/mesh_t/#members","title":"Members","text":"<p>public int uidgen</p> <p>public int triangles</p> <p>public int verts</p> <p>public int markers</p> <p>public struct vert_t::value_type epsilon</p> <p>public int _spatial_index</p> <p>public int _vert_lut</p> <p>public int _num_edits</p> <p>public int _boundary_marker</p> <p>public int _constraint_marker</p> <p>public int _has_elevation_marker</p> <p>public const double one_third</p>"},{"location":"api/weemesh/mesh_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/mesh_t/#mesh_t","title":"mesh_t","text":"<p>public void mesh_t()</p> <p>Defined at src/rocky/weemesh.h#280</p>"},{"location":"api/weemesh/mesh_t/#set_boundary_marker","title":"set_boundary_marker","text":"<p>public void set_boundary_marker(int value)</p> <p>Defined at src/rocky/weemesh.h#285</p>"},{"location":"api/weemesh/mesh_t/#set_constraint_marker","title":"set_constraint_marker","text":"<p>public void set_constraint_marker(int value)</p> <p>Defined at src/rocky/weemesh.h#290</p>"},{"location":"api/weemesh/mesh_t/#set_has_elevation_marker","title":"set_has_elevation_marker","text":"<p>public void set_has_elevation_marker(int value)</p> <p>Defined at src/rocky/weemesh.h#295</p>"},{"location":"api/weemesh/mesh_t/#remove_triangle","title":"remove_triangle","text":"<p>public void remove_triangle(triangle_t &amp; tri)</p> <p>Defined at src/rocky/weemesh.h#301</p> <p>delete triangle from the mesh</p>"},{"location":"api/weemesh/mesh_t/#add_triangle","title":"add_triangle","text":"<p>public int add_triangle(int i0, int i1, int i2)</p> <p>Defined at src/rocky/weemesh.h#313</p> <p>add new triangle to the mesh from 3 indices</p>"},{"location":"api/weemesh/mesh_t/#get_vertex","title":"get_vertex","text":"<p>public const vert_t &amp; get_vertex(unsigned int i)</p> <p>Defined at src/rocky/weemesh.h#352</p> <p>find a vertex by its index</p>"},{"location":"api/weemesh/mesh_t/#get_vertex_1","title":"get_vertex","text":"<p>public vert_t &amp; get_vertex(unsigned int i)</p> <p>Defined at src/rocky/weemesh.h#358</p> <p>find a vertex by its index</p>"},{"location":"api/weemesh/mesh_t/#get_marker","title":"get_marker","text":"<p>public int &amp; get_marker(const vert_t &amp; vert)</p> <p>Defined at src/rocky/weemesh.h#364</p> <p>find the marker for a vertex</p>"},{"location":"api/weemesh/mesh_t/#get_marker_1","title":"get_marker","text":"<p>public int get_marker(int i)</p> <p>Defined at src/rocky/weemesh.h#370</p> <p>find the marker for a vertex index</p>"},{"location":"api/weemesh/mesh_t/#get_or_create_vertex","title":"get_or_create_vertex","text":"<p>public int get_or_create_vertex(const vert_t &amp; input, int marker)</p> <p>Defined at src/rocky/weemesh.h#377</p> <p>Add a new vertex (or lookup a matching one) and return its index. If the vertex already exists, update its marker if necessary.</p>"},{"location":"api/weemesh/mesh_t/#get_triangles","title":"get_triangles","text":"<p>public unsigned int get_triangles(struct vert_t::value_type xmin, struct vert_t::value_type ymin, struct vert_t::value_type xmax, struct vert_t::value_type ymax, int &amp; output)</p> <p>Defined at src/rocky/weemesh.h#402</p> <p>fetch a pointer to each triangle that intersects the bounding box</p>"},{"location":"api/weemesh/mesh_t/#get_or_create_vertex_from_vec3","title":"get_or_create_vertex_from_vec3","text":"<p>public int get_or_create_vertex_from_vec3(const T &amp; vec, int marker)</p> <p>Defined at src/rocky/weemesh.h#414</p>"},{"location":"api/weemesh/mesh_t/#insert","title":"insert","text":"<p>public void insert(const vert_t &amp; vert, int marker)</p> <p>Defined at src/rocky/weemesh.h#419</p> <p>insert a point into the mesh, cutting triangles as necessary</p>"},{"location":"api/weemesh/mesh_t/#insert_1","title":"insert","text":"<p>public void insert(const segment_t &amp; seg, int marker)</p> <p>Defined at src/rocky/weemesh.h#453</p> <p>insert a segment into the mesh, cutting triangles as necessary</p>"},{"location":"api/weemesh/mesh_t/#inside_split","title":"inside_split","text":"<p>public _Bool inside_split(triangle_t &amp; tri, const vert_t &amp; p, int * uid_list, int new_marker)</p> <p>Defined at src/rocky/weemesh.h#657</p> <p>inserts point \"p\" into the interior of triangle \"tri\", adds three new triangles, and removes the original triangle. return true if a split actual happened</p>"},{"location":"api/weemesh/mesh_t/#point_on_edge_closest_to","title":"point_on_edge_closest_to","text":"<p>public vert_t point_on_edge_closest_to(const edge_t &amp; edge, const vert_t &amp; p)</p> <p>Defined at src/rocky/weemesh.h#733</p>"},{"location":"api/weemesh/neighbors_t/","title":"struct neighbors_t","text":"<p>Defined at src/rocky/weemesh.h#805</p> <p>each node paires with a vector of its neighbors, i.e. other nodes with which is shares an edge.</p>"},{"location":"api/weemesh/neighbors_t/#members","title":"Members","text":"<p>public edgeset_t _edgeset</p>"},{"location":"api/weemesh/neighbors_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/neighbors_t/#neighbors_t","title":"neighbors_t","text":"<p>public void neighbors_t(const mesh_t &amp; mesh)</p> <p>Defined at src/rocky/weemesh.h#810</p>"},{"location":"api/weemesh/neighbors_t/#operator","title":"operator()","text":"<p>public const int &amp; operator()(int vertex_index)</p> <p>Defined at src/rocky/weemesh.h#820</p>"},{"location":"api/weemesh/node_t/","title":"struct node_t","text":"<p>Defined at src/rocky/weemesh.h#746</p> <p>a graph node</p>"},{"location":"api/weemesh/node_t/#members","title":"Members","text":"<p>public int _vertex_index</p> <p>public int _graphid</p> <p>public int _edges</p>"},{"location":"api/weemesh/node_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/node_t/#node_t","title":"node_t","text":"<p>public void node_t(int vi)</p> <p>Defined at src/rocky/weemesh.h#751</p>"},{"location":"api/weemesh/node_t/#operator","title":"operator==","text":"<p>public _Bool operator==(const node_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#752</p>"},{"location":"api/weemesh/segment_t/","title":"struct segment_t","text":"<p>Defined at src/rocky/weemesh.h#122</p> <p>line segment connecting two verts</p>"},{"location":"api/weemesh/segment_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/segment_t/#segment_t","title":"segment_t","text":"<p>public void segment_t(const vert_t &amp; a, const vert_t &amp; b)</p> <p>Defined at src/rocky/weemesh.h#124</p>"},{"location":"api/weemesh/segment_t/#segment_t_1","title":"segment_t","text":"<p>public void segment_t(const T &amp; a, const T &amp; b)</p> <p>Defined at src/rocky/weemesh.h#128</p>"},{"location":"api/weemesh/segment_t/#intersect","title":"intersect","text":"<p>public _Bool intersect(const segment_t &amp; rhs, vert_t &amp; out, struct vert_t::value_type &amp; u)</p> <p>Defined at src/rocky/weemesh.h#132</p> <p>true if 2 segments intersect; intersection point in \"out\"</p>"},{"location":"api/weemesh/triangle_t/","title":"struct triangle_t","text":"<p>Defined at src/rocky/weemesh.h#150</p>"},{"location":"api/weemesh/triangle_t/#members","title":"Members","text":"<p>public int uid</p> <p>public vert_t p0</p> <p>public vert_t p1</p> <p>public vert_t p2</p> <p>public vert_t centroid</p> <p>public unsigned int i0</p> <p>public unsigned int i1</p> <p>public unsigned int i2</p> <p>public struct vert_t::value_type[2] a_min</p> <p>public struct vert_t::value_type[2] a_max</p> <p>public _Bool is_2d_degenerate</p>"},{"location":"api/weemesh/triangle_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/triangle_t/#contains_2d","title":"contains_2d","text":"<p>public _Bool contains_2d(const vert_t &amp; P, struct vert_t::value_type epsilon)</p> <p>Defined at src/rocky/weemesh.h#162</p> <p>true if the triangle contains point P (in xy) within a certain tolerance.</p>"},{"location":"api/weemesh/triangle_t/#is_vertex","title":"is_vertex","text":"<p>public _Bool is_vertex(int i)</p> <p>Defined at src/rocky/weemesh.h#182</p> <p>true is index I is in this triangle.</p>"},{"location":"api/weemesh/triangle_t/#is_vertex_1","title":"is_vertex","text":"<p>public _Bool is_vertex(const vert_t &amp; p, struct vert_t::value_type epsilon)</p> <p>Defined at src/rocky/weemesh.h#187</p> <p>true if point P is one of the triangle's verts</p>"},{"location":"api/weemesh/triangle_t/#get_vertex","title":"get_vertex","text":"<p>public int get_vertex(const vert_t &amp; p, struct vert_t::value_type epsilon)</p> <p>Defined at src/rocky/weemesh.h#202</p>"},{"location":"api/weemesh/triangle_t/#get_barycentric","title":"get_barycentric","text":"<p>public _Bool get_barycentric(const vert_t &amp; p, vert_t &amp; out, struct vert_t::value_type epsilon)</p> <p>Defined at src/rocky/weemesh.h#217</p>"},{"location":"api/weemesh/vert_t/","title":"struct vert_t","text":"<p>Defined at src/rocky/weemesh.h#51</p> <p>2.5D vertex. Holds a Z, but most operations only use X/Y</p>"},{"location":"api/weemesh/vert_t/#members","title":"Members","text":"<p>public double x</p> <p>public double y</p> <p>public double z</p>"},{"location":"api/weemesh/vert_t/#functions","title":"Functions","text":""},{"location":"api/weemesh/vert_t/#vert_t","title":"vert_t","text":"<p>public void vert_t()</p> <p>Defined at src/rocky/weemesh.h#55</p>"},{"location":"api/weemesh/vert_t/#vert_t_1","title":"vert_t","text":"<p>public void vert_t(value_type a, value_type b, value_type c)</p> <p>Defined at src/rocky/weemesh.h#56</p>"},{"location":"api/weemesh/vert_t/#vert_t_2","title":"vert_t","text":"<p>public void vert_t(value_type * ptr)</p> <p>Defined at src/rocky/weemesh.h#57</p>"},{"location":"api/weemesh/vert_t/#vert_t_3","title":"vert_t","text":"<p>public void vert_t(const vert_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#58</p>"},{"location":"api/weemesh/vert_t/#operator","title":"operator&lt;","text":"<p>public _Bool operator&lt;(const vert_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#59</p>"},{"location":"api/weemesh/vert_t/#operator_1","title":"operator[]","text":"<p>public const value_type &amp; operator</p> <p>Defined at src/rocky/weemesh.h#64</p>"},{"location":"api/weemesh/vert_t/#operator_2","title":"operator[]","text":"<p>public value_type &amp; operator</p> <p>Defined at src/rocky/weemesh.h#67</p>"},{"location":"api/weemesh/vert_t/#operator-","title":"operator-","text":"<p>public vert_t operator-(const vert_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#70</p>"},{"location":"api/weemesh/vert_t/#operator_3","title":"operator+","text":"<p>public vert_t operator+(const vert_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#73</p>"},{"location":"api/weemesh/vert_t/#operator_4","title":"operator*","text":"<p>public vert_t operator(value_type a)*</p> <p>Defined at src/rocky/weemesh.h#76</p>"},{"location":"api/weemesh/vert_t/#dot2d","title":"dot2d","text":"<p>public value_type dot2d(const vert_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#79</p>"},{"location":"api/weemesh/vert_t/#cross2d","title":"cross2d","text":"<p>public value_type cross2d(const vert_t &amp; rhs)</p> <p>Defined at src/rocky/weemesh.h#82</p>"},{"location":"api/weemesh/vert_t/#normalize2d","title":"normalize2d","text":"<p>public vert_t normalize2d()</p> <p>Defined at src/rocky/weemesh.h#85</p>"},{"location":"api/weemesh/vert_t/#set","title":"set","text":"<p>public void set(value_type a, value_type b, value_type c)</p> <p>Defined at src/rocky/weemesh.h#89</p>"},{"location":"api/weemesh/vert_t/#length2d","title":"length2d","text":"<p>public value_type length2d()</p> <p>Defined at src/rocky/weemesh.h#92</p>"},{"location":"api/weemesh/vert_t/#length2d_squared","title":"length2d_squared","text":"<p>public value_type length2d_squared()</p> <p>Defined at src/rocky/weemesh.h#95</p>"},{"location":"api/weemesh/vert_t/#operator-type-parameter-0-0","title":"operator type-parameter-0-0","text":"<p>public VEC3 operator type-parameter-0-0()</p> <p>Defined at src/rocky/weemesh.h#100</p> <p>cast to another vec3 type</p>"}]}